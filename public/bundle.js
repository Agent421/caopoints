"use strict";
(() => {
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };

  // public/node_modules/darkreader/darkreader.js
  var require_darkreader = __commonJS({
    "public/node_modules/darkreader/darkreader.js"(exports, module) {
      (function(global2, factory2) {
        typeof exports === "object" && typeof module !== "undefined" ? factory2(exports) : typeof define === "function" && define.amd ? define(["exports"], factory2) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory2(global2.DarkReader = {}));
      })(exports, function(exports2) {
        "use strict";
        var __assign = function() {
          __assign = Object.assign || function __assign2(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                  t[p] = s[p];
            }
            return t;
          };
          return __assign.apply(this, arguments);
        };
        function __awaiter(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        }
        function __generator(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        }
        function __values(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }
        function __read(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        }
        function __spreadArray(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        }
        var MessageType;
        (function(MessageType2) {
          MessageType2["UI_GET_DATA"] = "ui-get-data";
          MessageType2["UI_SUBSCRIBE_TO_CHANGES"] = "ui-subscribe-to-changes";
          MessageType2["UI_UNSUBSCRIBE_FROM_CHANGES"] = "ui-unsubscribe-from-changes";
          MessageType2["UI_CHANGE_SETTINGS"] = "ui-change-settings";
          MessageType2["UI_SET_THEME"] = "ui-set-theme";
          MessageType2["UI_SET_SHORTCUT"] = "ui-set-shortcut";
          MessageType2["UI_TOGGLE_ACTIVE_TAB"] = "ui-toggle-active-tab";
          MessageType2["UI_MARK_NEWS_AS_READ"] = "ui-mark-news-as-read";
          MessageType2["UI_MARK_NEWS_AS_DISPLAYED"] = "ui-mark-news-as-displayed";
          MessageType2["UI_LOAD_CONFIG"] = "ui-load-config";
          MessageType2["UI_APPLY_DEV_DYNAMIC_THEME_FIXES"] = "ui-apply-dev-dynamic-theme-fixes";
          MessageType2["UI_RESET_DEV_DYNAMIC_THEME_FIXES"] = "ui-reset-dev-dynamic-theme-fixes";
          MessageType2["UI_APPLY_DEV_INVERSION_FIXES"] = "ui-apply-dev-inversion-fixes";
          MessageType2["UI_RESET_DEV_INVERSION_FIXES"] = "ui-reset-dev-inversion-fixes";
          MessageType2["UI_APPLY_DEV_STATIC_THEMES"] = "ui-apply-dev-static-themes";
          MessageType2["UI_RESET_DEV_STATIC_THEMES"] = "ui-reset-dev-static-themes";
          MessageType2["UI_SAVE_FILE"] = "ui-save-file";
          MessageType2["UI_REQUEST_EXPORT_CSS"] = "ui-request-export-css";
          MessageType2["UI_COLOR_SCHEME_CHANGE"] = "ui-color-scheme-change";
          MessageType2["BG_CHANGES"] = "bg-changes";
          MessageType2["BG_ADD_CSS_FILTER"] = "bg-add-css-filter";
          MessageType2["BG_ADD_STATIC_THEME"] = "bg-add-static-theme";
          MessageType2["BG_ADD_SVG_FILTER"] = "bg-add-svg-filter";
          MessageType2["BG_ADD_DYNAMIC_THEME"] = "bg-add-dynamic-theme";
          MessageType2["BG_EXPORT_CSS"] = "bg-export-css";
          MessageType2["BG_UNSUPPORTED_SENDER"] = "bg-unsupported-sender";
          MessageType2["BG_CLEAN_UP"] = "bg-clean-up";
          MessageType2["BG_RELOAD"] = "bg-reload";
          MessageType2["BG_FETCH_RESPONSE"] = "bg-fetch-response";
          MessageType2["BG_UI_UPDATE"] = "bg-ui-update";
          MessageType2["BG_CSS_UPDATE"] = "bg-css-update";
          MessageType2["CS_COLOR_SCHEME_CHANGE"] = "cs-color-scheme-change";
          MessageType2["CS_FRAME_CONNECT"] = "cs-frame-connect";
          MessageType2["CS_FRAME_FORGET"] = "cs-frame-forget";
          MessageType2["CS_FRAME_FREEZE"] = "cs-frame-freeze";
          MessageType2["CS_FRAME_RESUME"] = "cs-frame-resume";
          MessageType2["CS_EXPORT_CSS_RESPONSE"] = "cs-export-css-response";
          MessageType2["CS_FETCH"] = "cs-fetch";
          MessageType2["CS_DARK_THEME_DETECTED"] = "cs-dark-theme-detected";
          MessageType2["CS_DARK_THEME_NOT_DETECTED"] = "cs-dark-theme-not-detected";
          MessageType2["CS_LOG"] = "cs-log";
        })(MessageType || (MessageType = {}));
        var isNavigatorDefined = typeof navigator !== "undefined";
        var userAgent = isNavigatorDefined ? navigator.userAgentData && Array.isArray(navigator.userAgentData.brands) ? navigator.userAgentData.brands.map(function(brand) {
          return "".concat(brand.brand.toLowerCase(), " ").concat(brand.version);
        }).join(" ") : navigator.userAgent.toLowerCase() : "some useragent";
        var platform = isNavigatorDefined ? navigator.userAgentData && typeof navigator.userAgentData.platform === "string" ? navigator.userAgentData.platform.toLowerCase() : navigator.platform.toLowerCase() : "some platform";
        var isChromium = userAgent.includes("chrome") || userAgent.includes("chromium");
        var isThunderbird = userAgent.includes("thunderbird");
        var isFirefox = userAgent.includes("firefox") || userAgent.includes("librewolf") || isThunderbird;
        userAgent.includes("vivaldi");
        userAgent.includes("yabrowser");
        userAgent.includes("opr") || userAgent.includes("opera");
        userAgent.includes("edg");
        var isSafari = userAgent.includes("safari") && !isChromium;
        var isWindows = platform.startsWith("win");
        var isMacOS = platform.startsWith("mac");
        isNavigatorDefined && navigator.userAgentData ? navigator.userAgentData.mobile : userAgent.includes("mobile");
        var isShadowDomSupported = typeof ShadowRoot === "function";
        var isMatchMediaChangeEventListenerSupported = typeof MediaQueryList === "function" && typeof MediaQueryList.prototype.addEventListener === "function";
        (function() {
          var m = userAgent.match(/chrom(?:e|ium)(?:\/| )([^ ]+)/);
          if (m && m[1]) {
            return m[1];
          }
          return "";
        })();
        (function() {
          var m = userAgent.match(/(?:firefox|librewolf)(?:\/| )([^ ]+)/);
          if (m && m[1]) {
            return m[1];
          }
          return "";
        })();
        var isDefinedSelectorSupported = function() {
          try {
            document.querySelector(":defined");
            return true;
          } catch (err) {
            return false;
          }
        }();
        var isCSSColorSchemePropSupported = function() {
          if (typeof document === "undefined") {
            return false;
          }
          var el = document.createElement("div");
          el.setAttribute("style", "color-scheme: dark");
          return el.style && el.style.colorScheme === "dark";
        }();
        function getOKResponse(url, mimeType, origin) {
          return __awaiter(this, void 0, void 0, function() {
            var response;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, fetch(url, {
                    cache: "force-cache",
                    credentials: "omit",
                    referrer: origin
                  })];
                case 1:
                  response = _a.sent();
                  if (isFirefox && mimeType === "text/css" && url.startsWith("moz-extension://") && url.endsWith(".css")) {
                    return [2, response];
                  }
                  if (mimeType && !response.headers.get("Content-Type").startsWith(mimeType)) {
                    throw new Error("Mime type mismatch when loading ".concat(url));
                  }
                  if (!response.ok) {
                    throw new Error("Unable to load ".concat(url, " ").concat(response.status, " ").concat(response.statusText));
                  }
                  return [2, response];
              }
            });
          });
        }
        function loadAsDataURL(url, mimeType) {
          return __awaiter(this, void 0, void 0, function() {
            var response;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, getOKResponse(url, mimeType)];
                case 1:
                  response = _a.sent();
                  return [4, readResponseAsDataURL(response)];
                case 2:
                  return [2, _a.sent()];
              }
            });
          });
        }
        function readResponseAsDataURL(response) {
          return __awaiter(this, void 0, void 0, function() {
            var blob, dataURL;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, response.blob()];
                case 1:
                  blob = _a.sent();
                  return [4, new Promise(function(resolve) {
                    var reader = new FileReader();
                    reader.onloadend = function() {
                      return resolve(reader.result);
                    };
                    reader.readAsDataURL(blob);
                  })];
                case 2:
                  dataURL = _a.sent();
                  return [2, dataURL];
              }
            });
          });
        }
        var throwCORSError = function(url) {
          return __awaiter(void 0, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, Promise.reject(new Error([
                "Embedded Dark Reader cannot access a cross-origin resource",
                url,
                "Overview your URLs and CORS policies or use",
                "`DarkReader.setFetchMethod(fetch: (url) => Promise<Response>))`.",
                "See if using `DarkReader.setFetchMethod(window.fetch)`",
                "before `DarkReader.enable()` works."
              ].join(" ")))];
            });
          });
        };
        var fetcher = throwCORSError;
        function setFetchMethod$1(fetch2) {
          if (fetch2) {
            fetcher = fetch2;
          } else {
            fetcher = throwCORSError;
          }
        }
        function callFetchMethod(url) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, fetcher(url)];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        }
        if (!window.chrome) {
          window.chrome = {};
        }
        if (!chrome.runtime) {
          chrome.runtime = {};
        }
        var messageListeners = /* @__PURE__ */ new Set();
        function sendMessage() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return __awaiter(this, void 0, void 0, function() {
            var id_1, _a, url, responseType, response, text_1, error_1;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!(args[0] && args[0].type === MessageType.CS_FETCH))
                    return [3, 8];
                  id_1 = args[0].id;
                  _b.label = 1;
                case 1:
                  _b.trys.push([1, 7, , 8]);
                  _a = args[0].data, url = _a.url, responseType = _a.responseType;
                  return [4, callFetchMethod(url)];
                case 2:
                  response = _b.sent();
                  if (!(responseType === "data-url"))
                    return [3, 4];
                  return [4, readResponseAsDataURL(response)];
                case 3:
                  text_1 = _b.sent();
                  return [3, 6];
                case 4:
                  return [4, response.text()];
                case 5:
                  text_1 = _b.sent();
                  _b.label = 6;
                case 6:
                  messageListeners.forEach(function(cb) {
                    return cb({ type: MessageType.BG_FETCH_RESPONSE, data: text_1, error: null, id: id_1 });
                  });
                  return [3, 8];
                case 7:
                  error_1 = _b.sent();
                  console.error(error_1);
                  messageListeners.forEach(function(cb) {
                    return cb({ type: MessageType.BG_FETCH_RESPONSE, data: null, error: error_1, id: id_1 });
                  });
                  return [3, 8];
                case 8:
                  return [2];
              }
            });
          });
        }
        function addMessageListener(callback) {
          messageListeners.add(callback);
        }
        if (typeof chrome.runtime.sendMessage === "function") {
          var nativeSendMessage_1 = chrome.runtime.sendMessage;
          chrome.runtime.sendMessage = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            sendMessage.apply(void 0, __spreadArray([], __read(args), false));
            nativeSendMessage_1.apply(chrome.runtime, args);
          };
        } else {
          chrome.runtime.sendMessage = sendMessage;
        }
        if (!chrome.runtime.onMessage) {
          chrome.runtime.onMessage = {};
        }
        if (typeof chrome.runtime.onMessage.addListener === "function") {
          var nativeAddListener_1 = chrome.runtime.onMessage.addListener;
          chrome.runtime.onMessage.addListener = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            addMessageListener(args[0]);
            nativeAddListener_1.apply(chrome.runtime.onMessage, args);
          };
        } else {
          chrome.runtime.onMessage.addListener = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return addMessageListener(args[0]);
          };
        }
        var ThemeEngines = {
          cssFilter: "cssFilter",
          svgFilter: "svgFilter",
          staticTheme: "staticTheme",
          dynamicTheme: "dynamicTheme"
        };
        var DEFAULT_COLORS = {
          darkScheme: {
            background: "#181a1b",
            text: "#e8e6e3"
          },
          lightScheme: {
            background: "#dcdad7",
            text: "#181a1b"
          }
        };
        var DEFAULT_THEME = {
          mode: 1,
          brightness: 100,
          contrast: 100,
          grayscale: 0,
          sepia: 0,
          useFont: false,
          fontFamily: isMacOS ? "Helvetica Neue" : isWindows ? "Segoe UI" : "Open Sans",
          textStroke: 0,
          engine: ThemeEngines.dynamicTheme,
          stylesheet: "",
          darkSchemeBackgroundColor: DEFAULT_COLORS.darkScheme.background,
          darkSchemeTextColor: DEFAULT_COLORS.darkScheme.text,
          lightSchemeBackgroundColor: DEFAULT_COLORS.lightScheme.background,
          lightSchemeTextColor: DEFAULT_COLORS.lightScheme.text,
          scrollbarColor: isMacOS ? "" : "auto",
          selectionColor: "auto",
          styleSystemControls: !isCSSColorSchemePropSupported,
          lightColorScheme: "Default",
          darkColorScheme: "Default",
          immediateModify: false
        };
        function isArrayLike(items) {
          return items.length != null;
        }
        function forEach(items, iterator) {
          var e_1, _a;
          if (isArrayLike(items)) {
            for (var i = 0, len = items.length; i < len; i++) {
              iterator(items[i]);
            }
          } else {
            try {
              for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var item = items_1_1.value;
                iterator(item);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return))
                  _a.call(items_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }
        }
        function push(array, addition) {
          forEach(addition, function(a) {
            return array.push(a);
          });
        }
        function toArray(items) {
          var results = [];
          for (var i = 0, len = items.length; i < len; i++) {
            results.push(items[i]);
          }
          return results;
        }
        function logInfo() {
        }
        function logWarn() {
        }
        function throttle(callback) {
          var pending = false;
          var frameId = null;
          var lastArgs;
          var throttled = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            lastArgs = args;
            if (frameId) {
              pending = true;
            } else {
              callback.apply(void 0, __spreadArray([], __read(lastArgs), false));
              frameId = requestAnimationFrame(function() {
                frameId = null;
                if (pending) {
                  callback.apply(void 0, __spreadArray([], __read(lastArgs), false));
                  pending = false;
                }
              });
            }
          };
          var cancel = function() {
            cancelAnimationFrame(frameId);
            pending = false;
            frameId = null;
          };
          return Object.assign(throttled, { cancel });
        }
        function createAsyncTasksQueue() {
          var tasks = [];
          var frameId = null;
          function runTasks() {
            var task;
            while (task = tasks.shift()) {
              task();
            }
            frameId = null;
          }
          function add(task) {
            tasks.push(task);
            if (!frameId) {
              frameId = requestAnimationFrame(runTasks);
            }
          }
          function cancel() {
            tasks.splice(0);
            cancelAnimationFrame(frameId);
            frameId = null;
          }
          return { add, cancel };
        }
        function getDuration(time) {
          var duration = 0;
          if (time.seconds) {
            duration += time.seconds * 1e3;
          }
          if (time.minutes) {
            duration += time.minutes * 60 * 1e3;
          }
          if (time.hours) {
            duration += time.hours * 60 * 60 * 1e3;
          }
          if (time.days) {
            duration += time.days * 24 * 60 * 60 * 1e3;
          }
          return duration;
        }
        function removeNode(node) {
          node && node.parentNode && node.parentNode.removeChild(node);
        }
        function watchForNodePosition(node, mode, onRestore) {
          if (onRestore === void 0) {
            onRestore = Function.prototype;
          }
          var MAX_ATTEMPTS_COUNT = 10;
          var RETRY_TIMEOUT = getDuration({ seconds: 2 });
          var ATTEMPTS_INTERVAL = getDuration({ seconds: 10 });
          var prevSibling = node.previousSibling;
          var parent = node.parentNode;
          if (!parent) {
            throw new Error("Unable to watch for node position: parent element not found");
          }
          if (mode === "prev-sibling" && !prevSibling) {
            throw new Error("Unable to watch for node position: there is no previous sibling");
          }
          var attempts = 0;
          var start = null;
          var timeoutId = null;
          var restore = throttle(function() {
            if (timeoutId) {
              return;
            }
            attempts++;
            var now = Date.now();
            if (start == null) {
              start = now;
            } else if (attempts >= MAX_ATTEMPTS_COUNT) {
              if (now - start < ATTEMPTS_INTERVAL) {
                timeoutId = setTimeout(function() {
                  start = null;
                  attempts = 0;
                  timeoutId = null;
                  restore();
                }, RETRY_TIMEOUT);
                return;
              }
              start = now;
              attempts = 1;
            }
            if (mode === "parent") {
              if (prevSibling && prevSibling.parentNode !== parent) {
                stop();
                return;
              }
            }
            if (mode === "prev-sibling") {
              if (prevSibling.parentNode == null) {
                stop();
                return;
              }
              if (prevSibling.parentNode !== parent) {
                updateParent(prevSibling.parentNode);
              }
            }
            parent.insertBefore(node, prevSibling ? prevSibling.nextSibling : parent.firstChild);
            observer2.takeRecords();
            onRestore && onRestore();
          });
          var observer2 = new MutationObserver(function() {
            if (mode === "parent" && node.parentNode !== parent || mode === "prev-sibling" && node.previousSibling !== prevSibling) {
              restore();
            }
          });
          var run = function() {
            observer2.observe(parent, { childList: true });
          };
          var stop = function() {
            clearTimeout(timeoutId);
            observer2.disconnect();
            restore.cancel();
          };
          var skip = function() {
            observer2.takeRecords();
          };
          var updateParent = function(parentNode) {
            parent = parentNode;
            stop();
            run();
          };
          run();
          return { run, stop, skip };
        }
        function iterateShadowHosts(root, iterator) {
          if (root == null) {
            return;
          }
          var walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
            acceptNode: function(node2) {
              return node2.shadowRoot == null ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT;
            }
          });
          for (var node = root.shadowRoot ? walker.currentNode : walker.nextNode(); node != null; node = walker.nextNode()) {
            if (node.classList.contains("surfingkeys_hints_host")) {
              continue;
            }
            iterator(node);
            iterateShadowHosts(node.shadowRoot, iterator);
          }
        }
        var isDOMReady = function() {
          return document.readyState === "complete" || document.readyState === "interactive";
        };
        function setIsDOMReady(newFunc) {
          isDOMReady = newFunc;
        }
        var readyStateListeners = /* @__PURE__ */ new Set();
        function addDOMReadyListener(listener) {
          isDOMReady() ? listener() : readyStateListeners.add(listener);
        }
        function removeDOMReadyListener(listener) {
          readyStateListeners.delete(listener);
        }
        function isReadyStateComplete() {
          return document.readyState === "complete";
        }
        var readyStateCompleteListeners = /* @__PURE__ */ new Set();
        function addReadyStateCompleteListener(listener) {
          isReadyStateComplete() ? listener() : readyStateCompleteListeners.add(listener);
        }
        function cleanReadyStateCompleteListeners() {
          readyStateCompleteListeners.clear();
        }
        if (!isDOMReady()) {
          var onReadyStateChange_1 = function() {
            if (isDOMReady()) {
              readyStateListeners.forEach(function(listener) {
                return listener();
              });
              readyStateListeners.clear();
              if (isReadyStateComplete()) {
                document.removeEventListener("readystatechange", onReadyStateChange_1);
                readyStateCompleteListeners.forEach(function(listener) {
                  return listener();
                });
                readyStateCompleteListeners.clear();
              }
            }
          };
          document.addEventListener("readystatechange", onReadyStateChange_1);
        }
        var HUGE_MUTATIONS_COUNT = 1e3;
        function isHugeMutation(mutations) {
          if (mutations.length > HUGE_MUTATIONS_COUNT) {
            return true;
          }
          var addedNodesCount = 0;
          for (var i = 0; i < mutations.length; i++) {
            addedNodesCount += mutations[i].addedNodes.length;
            if (addedNodesCount > HUGE_MUTATIONS_COUNT) {
              return true;
            }
          }
          return false;
        }
        function getElementsTreeOperations(mutations) {
          var additions = /* @__PURE__ */ new Set();
          var deletions = /* @__PURE__ */ new Set();
          var moves = /* @__PURE__ */ new Set();
          mutations.forEach(function(m) {
            forEach(m.addedNodes, function(n) {
              if (n instanceof Element && n.isConnected) {
                additions.add(n);
              }
            });
            forEach(m.removedNodes, function(n) {
              if (n instanceof Element) {
                if (n.isConnected) {
                  moves.add(n);
                  additions.delete(n);
                } else {
                  deletions.add(n);
                }
              }
            });
          });
          var duplicateAdditions = [];
          var duplicateDeletions = [];
          additions.forEach(function(node) {
            if (additions.has(node.parentElement)) {
              duplicateAdditions.push(node);
            }
          });
          deletions.forEach(function(node) {
            if (deletions.has(node.parentElement)) {
              duplicateDeletions.push(node);
            }
          });
          duplicateAdditions.forEach(function(node) {
            return additions.delete(node);
          });
          duplicateDeletions.forEach(function(node) {
            return deletions.delete(node);
          });
          return { additions, moves, deletions };
        }
        var optimizedTreeObservers = /* @__PURE__ */ new Map();
        var optimizedTreeCallbacks = /* @__PURE__ */ new WeakMap();
        function createOptimizedTreeObserver(root, callbacks) {
          var observer2;
          var observerCallbacks;
          var domReadyListener;
          if (optimizedTreeObservers.has(root)) {
            observer2 = optimizedTreeObservers.get(root);
            observerCallbacks = optimizedTreeCallbacks.get(observer2);
          } else {
            var hadHugeMutationsBefore_1 = false;
            var subscribedForReadyState_1 = false;
            observer2 = new MutationObserver(function(mutations) {
              if (isHugeMutation(mutations)) {
                if (!hadHugeMutationsBefore_1 || isDOMReady()) {
                  observerCallbacks.forEach(function(_a) {
                    var onHugeMutations = _a.onHugeMutations;
                    return onHugeMutations(root);
                  });
                } else if (!subscribedForReadyState_1) {
                  domReadyListener = function() {
                    return observerCallbacks.forEach(function(_a) {
                      var onHugeMutations = _a.onHugeMutations;
                      return onHugeMutations(root);
                    });
                  };
                  addDOMReadyListener(domReadyListener);
                  subscribedForReadyState_1 = true;
                }
                hadHugeMutationsBefore_1 = true;
              } else {
                var elementsOperations_1 = getElementsTreeOperations(mutations);
                observerCallbacks.forEach(function(_a) {
                  var onMinorMutations = _a.onMinorMutations;
                  return onMinorMutations(elementsOperations_1);
                });
              }
            });
            observer2.observe(root, { childList: true, subtree: true });
            optimizedTreeObservers.set(root, observer2);
            observerCallbacks = /* @__PURE__ */ new Set();
            optimizedTreeCallbacks.set(observer2, observerCallbacks);
          }
          observerCallbacks.add(callbacks);
          return {
            disconnect: function() {
              observerCallbacks.delete(callbacks);
              if (domReadyListener) {
                removeDOMReadyListener(domReadyListener);
              }
              if (observerCallbacks.size === 0) {
                observer2.disconnect();
                optimizedTreeCallbacks.delete(observer2);
                optimizedTreeObservers.delete(root);
              }
            }
          };
        }
        var anchor;
        var parsedURLCache = /* @__PURE__ */ new Map();
        function fixBaseURL($url) {
          if (!anchor) {
            anchor = document.createElement("a");
          }
          anchor.href = $url;
          return anchor.href;
        }
        function parseURL($url, $base) {
          if ($base === void 0) {
            $base = null;
          }
          var key = "".concat($url).concat($base ? ";".concat($base) : "");
          if (parsedURLCache.has(key)) {
            return parsedURLCache.get(key);
          }
          if ($base) {
            var parsedURL_1 = new URL($url, fixBaseURL($base));
            parsedURLCache.set(key, parsedURL_1);
            return parsedURL_1;
          }
          var parsedURL = new URL(fixBaseURL($url));
          parsedURLCache.set($url, parsedURL);
          return parsedURL;
        }
        function getAbsoluteURL($base, $relative) {
          if ($relative.match(/^data\\?\:/)) {
            return $relative;
          }
          if (/^\/\//.test($relative)) {
            return "".concat(location.protocol).concat($relative);
          }
          var b = parseURL($base);
          var a = parseURL($relative, b.href);
          return a.href;
        }
        function isRelativeHrefOnAbsolutePath(href) {
          if (href.startsWith("data:")) {
            return true;
          }
          var url = parseURL(href);
          if (url.protocol !== location.protocol) {
            return false;
          }
          if (url.hostname !== location.hostname) {
            return false;
          }
          if (url.port !== location.port) {
            return false;
          }
          return url.pathname === location.pathname;
        }
        function iterateCSSRules(rules, iterate, onMediaRuleError) {
          forEach(rules, function(rule) {
            if (rule.selectorText) {
              iterate(rule);
            } else if (rule.href) {
              try {
                iterateCSSRules(rule.styleSheet.cssRules, iterate, onMediaRuleError);
              } catch (err) {
                logInfo("Found a non-loaded link.");
                onMediaRuleError && onMediaRuleError();
              }
            } else if (rule.media) {
              var media = Array.from(rule.media);
              var isScreenOrAllOrQuery = media.some(function(m) {
                return m.startsWith("screen") || m.startsWith("all") || m.startsWith("(");
              });
              var isPrintOrSpeech = media.some(function(m) {
                return m.startsWith("print") || m.startsWith("speech");
              });
              if (isScreenOrAllOrQuery || !isPrintOrSpeech) {
                iterateCSSRules(rule.cssRules, iterate, onMediaRuleError);
              }
            } else if (rule.conditionText) {
              if (CSS.supports(rule.conditionText)) {
                iterateCSSRules(rule.cssRules, iterate, onMediaRuleError);
              }
            } else {
              logWarn("CSSRule type not supported", rule);
            }
          });
        }
        var shorthandVarDependantProperties = [
          "background",
          "border",
          "border-color",
          "border-bottom",
          "border-left",
          "border-right",
          "border-top",
          "outline",
          "outline-color"
        ];
        var shorthandVarDepPropRegexps = isSafari ? shorthandVarDependantProperties.map(function(prop) {
          var regexp = new RegExp("".concat(prop, ":\\s*(.*?)\\s*;"));
          return [prop, regexp];
        }) : null;
        function iterateCSSDeclarations(style, iterate) {
          forEach(style, function(property) {
            var value = style.getPropertyValue(property).trim();
            if (!value) {
              return;
            }
            iterate(property, value);
          });
          var cssText = style.cssText;
          if (cssText.includes("var(")) {
            if (isSafari) {
              shorthandVarDepPropRegexps.forEach(function(_a) {
                var _b = __read(_a, 2), prop = _b[0], regexp = _b[1];
                var match = cssText.match(regexp);
                if (match && match[1]) {
                  var val = match[1].trim();
                  iterate(prop, val);
                }
              });
            } else {
              shorthandVarDependantProperties.forEach(function(prop) {
                var val = style.getPropertyValue(prop);
                if (val && val.includes("var(")) {
                  iterate(prop, val);
                }
              });
            }
          }
        }
        var cssURLRegex = /url\((('.*?')|(".*?")|([^\)]*?))\)/g;
        var cssImportRegex = /@import\s*(url\()?(('.+?')|(".+?")|([^\)]*?))\)? ?(screen)?;?/gi;
        function getCSSURLValue(cssURL) {
          return cssURL.trim().replace(/^url\((.*)\)$/, "$1").trim().replace(/^"(.*)"$/, "$1").replace(/^'(.*)'$/, "$1").replace(/(?:\\(.))/g, "$1");
        }
        function getCSSBaseBath(url) {
          var cssURL = parseURL(url);
          return "".concat(cssURL.origin).concat(cssURL.pathname.replace(/\?.*$/, "").replace(/(\/)([^\/]+)$/i, "$1"));
        }
        function replaceCSSRelativeURLsWithAbsolute($css, cssBasePath) {
          return $css.replace(cssURLRegex, function(match) {
            var pathValue = getCSSURLValue(match);
            try {
              return 'url("'.concat(getAbsoluteURL(cssBasePath, pathValue), '")');
            } catch (err) {
              return match;
            }
          });
        }
        var cssCommentsRegex = /\/\*[\s\S]*?\*\//g;
        function removeCSSComments($css) {
          return $css.replace(cssCommentsRegex, "");
        }
        var fontFaceRegex = /@font-face\s*{[^}]*}/g;
        function replaceCSSFontFace($css) {
          return $css.replace(fontFaceRegex, "");
        }
        function evalMath(expression) {
          var rpnStack = [];
          var workingStack = [];
          var lastToken;
          for (var i = 0, len = expression.length; i < len; i++) {
            var token = expression[i];
            if (!token || token === " ") {
              continue;
            }
            if (operators.has(token)) {
              var op = operators.get(token);
              while (workingStack.length) {
                var currentOp = operators.get(workingStack[0]);
                if (!currentOp) {
                  break;
                }
                if (op.lessOrEqualThan(currentOp)) {
                  rpnStack.push(workingStack.shift());
                } else {
                  break;
                }
              }
              workingStack.unshift(token);
            } else if (!lastToken || operators.has(lastToken)) {
              rpnStack.push(token);
            } else {
              rpnStack[rpnStack.length - 1] += token;
            }
            lastToken = token;
          }
          rpnStack.push.apply(rpnStack, __spreadArray([], __read(workingStack), false));
          var stack = [];
          for (var i = 0, len = rpnStack.length; i < len; i++) {
            var op = operators.get(rpnStack[i]);
            if (op) {
              var args = stack.splice(0, 2);
              stack.push(op.exec(args[1], args[0]));
            } else {
              stack.unshift(parseFloat(rpnStack[i]));
            }
          }
          return stack[0];
        }
        var Operator = function() {
          function Operator2(precedence, method) {
            this.precendce = precedence;
            this.execMethod = method;
          }
          Operator2.prototype.exec = function(left, right) {
            return this.execMethod(left, right);
          };
          Operator2.prototype.lessOrEqualThan = function(op) {
            return this.precendce <= op.precendce;
          };
          return Operator2;
        }();
        var operators = /* @__PURE__ */ new Map([
          ["+", new Operator(1, function(left, right) {
            return left + right;
          })],
          ["-", new Operator(1, function(left, right) {
            return left - right;
          })],
          ["*", new Operator(2, function(left, right) {
            return left * right;
          })],
          ["/", new Operator(2, function(left, right) {
            return left / right;
          })]
        ]);
        function getMatches(regex, input, group) {
          if (group === void 0) {
            group = 0;
          }
          var matches = [];
          var m;
          while (m = regex.exec(input)) {
            matches.push(m[group]);
          }
          return matches;
        }
        function formatCSS(text) {
          function trimLeft(text2) {
            return text2.replace(/^\s+/, "");
          }
          function getIndent(depth2) {
            if (depth2 === 0) {
              return "";
            }
            return " ".repeat(4 * depth2);
          }
          if (text.length < 5e4) {
            var emptyRuleRegexp = /[^{}]+{\s*}/;
            while (emptyRuleRegexp.test(text)) {
              text = text.replace(emptyRuleRegexp, "");
            }
          }
          var css = text.replace(/\s{2,}/g, " ").replace(/\{/g, "{\n").replace(/\}/g, "\n}\n").replace(/\;(?![^\(|\"]*(\)|\"))/g, ";\n").replace(/\,(?![^\(|\"]*(\)|\"))/g, ",\n").replace(/\n\s*\n/g, "\n").split("\n");
          var depth = 0;
          var formatted = [];
          for (var x = 0, len = css.length; x < len; x++) {
            var line = "".concat(css[x], "\n");
            if (line.includes("{")) {
              formatted.push(getIndent(depth++) + trimLeft(line));
            } else if (line.includes("}")) {
              formatted.push(getIndent(--depth) + trimLeft(line));
            } else {
              formatted.push(getIndent(depth) + trimLeft(line));
            }
          }
          return formatted.join("").trim();
        }
        function getParenthesesRange(input, searchStartIndex) {
          if (searchStartIndex === void 0) {
            searchStartIndex = 0;
          }
          var length = input.length;
          var depth = 0;
          var firstOpenIndex = -1;
          for (var i = searchStartIndex; i < length; i++) {
            if (depth === 0) {
              var openIndex = input.indexOf("(", i);
              if (openIndex < 0) {
                break;
              }
              firstOpenIndex = openIndex;
              depth++;
              i = openIndex;
            } else {
              var closingIndex = input.indexOf(")", i);
              if (closingIndex < 0) {
                break;
              }
              var openIndex = input.indexOf("(", i);
              if (openIndex < 0 || closingIndex < openIndex) {
                depth--;
                if (depth === 0) {
                  return { start: firstOpenIndex, end: closingIndex + 1 };
                }
                i = closingIndex;
              } else {
                depth++;
                i = openIndex;
              }
            }
          }
          return null;
        }
        var hslaParseCache = /* @__PURE__ */ new Map();
        var rgbaParseCache = /* @__PURE__ */ new Map();
        function parseColorWithCache($color) {
          $color = $color.trim();
          if (rgbaParseCache.has($color)) {
            return rgbaParseCache.get($color);
          }
          if ($color.includes("calc(")) {
            $color = lowerCalcExpression($color);
          }
          var color = parse($color);
          color && rgbaParseCache.set($color, color);
          return color;
        }
        function parseToHSLWithCache(color) {
          if (hslaParseCache.has(color)) {
            return hslaParseCache.get(color);
          }
          var rgb = parseColorWithCache(color);
          if (!rgb) {
            return null;
          }
          var hsl = rgbToHSL(rgb);
          hslaParseCache.set(color, hsl);
          return hsl;
        }
        function clearColorCache() {
          hslaParseCache.clear();
          rgbaParseCache.clear();
        }
        function hslToRGB(_a) {
          var h = _a.h, s = _a.s, l = _a.l, _b = _a.a, a = _b === void 0 ? 1 : _b;
          if (s === 0) {
            var _c = __read([l, l, l].map(function(x2) {
              return Math.round(x2 * 255);
            }), 3), r_1 = _c[0], b_1 = _c[1], g_1 = _c[2];
            return { r: r_1, g: g_1, b: b_1, a };
          }
          var c = (1 - Math.abs(2 * l - 1)) * s;
          var x = c * (1 - Math.abs(h / 60 % 2 - 1));
          var m = l - c / 2;
          var _d = __read((h < 60 ? [c, x, 0] : h < 120 ? [x, c, 0] : h < 180 ? [0, c, x] : h < 240 ? [0, x, c] : h < 300 ? [x, 0, c] : [c, 0, x]).map(function(n) {
            return Math.round((n + m) * 255);
          }), 3), r = _d[0], g = _d[1], b = _d[2];
          return { r, g, b, a };
        }
        function rgbToHSL(_a) {
          var r255 = _a.r, g255 = _a.g, b255 = _a.b, _b = _a.a, a = _b === void 0 ? 1 : _b;
          var r = r255 / 255;
          var g = g255 / 255;
          var b = b255 / 255;
          var max = Math.max(r, g, b);
          var min = Math.min(r, g, b);
          var c = max - min;
          var l = (max + min) / 2;
          if (c === 0) {
            return { h: 0, s: 0, l, a };
          }
          var h = (max === r ? (g - b) / c % 6 : max === g ? (b - r) / c + 2 : (r - g) / c + 4) * 60;
          if (h < 0) {
            h += 360;
          }
          var s = c / (1 - Math.abs(2 * l - 1));
          return { h, s, l, a };
        }
        function toFixed(n, digits) {
          if (digits === void 0) {
            digits = 0;
          }
          var fixed = n.toFixed(digits);
          if (digits === 0) {
            return fixed;
          }
          var dot = fixed.indexOf(".");
          if (dot >= 0) {
            var zerosMatch = fixed.match(/0+$/);
            if (zerosMatch) {
              if (zerosMatch.index === dot + 1) {
                return fixed.substring(0, dot);
              }
              return fixed.substring(0, zerosMatch.index);
            }
          }
          return fixed;
        }
        function rgbToString(rgb) {
          var r = rgb.r, g = rgb.g, b = rgb.b, a = rgb.a;
          if (a != null && a < 1) {
            return "rgba(".concat(toFixed(r), ", ").concat(toFixed(g), ", ").concat(toFixed(b), ", ").concat(toFixed(a, 2), ")");
          }
          return "rgb(".concat(toFixed(r), ", ").concat(toFixed(g), ", ").concat(toFixed(b), ")");
        }
        function rgbToHexString(_a) {
          var r = _a.r, g = _a.g, b = _a.b, a = _a.a;
          return "#".concat((a != null && a < 1 ? [r, g, b, Math.round(a * 255)] : [r, g, b]).map(function(x) {
            return "".concat(x < 16 ? "0" : "").concat(x.toString(16));
          }).join(""));
        }
        function hslToString(hsl) {
          var h = hsl.h, s = hsl.s, l = hsl.l, a = hsl.a;
          if (a != null && a < 1) {
            return "hsla(".concat(toFixed(h), ", ").concat(toFixed(s * 100), "%, ").concat(toFixed(l * 100), "%, ").concat(toFixed(a, 2), ")");
          }
          return "hsl(".concat(toFixed(h), ", ").concat(toFixed(s * 100), "%, ").concat(toFixed(l * 100), "%)");
        }
        var rgbMatch = /^rgba?\([^\(\)]+\)$/;
        var hslMatch = /^hsla?\([^\(\)]+\)$/;
        var hexMatch = /^#[0-9a-f]+$/i;
        function parse($color) {
          var c = $color.trim().toLowerCase();
          if (c.match(rgbMatch)) {
            return parseRGB(c);
          }
          if (c.match(hslMatch)) {
            return parseHSL(c);
          }
          if (c.match(hexMatch)) {
            return parseHex(c);
          }
          if (knownColors.has(c)) {
            return getColorByName(c);
          }
          if (systemColors.has(c)) {
            return getSystemColor(c);
          }
          if ($color === "transparent") {
            return { r: 0, g: 0, b: 0, a: 0 };
          }
          return null;
        }
        function getNumbers($color) {
          var numbers = [];
          var prevPos = 0;
          var isMining = false;
          var startIndex = $color.indexOf("(");
          $color = $color.substring(startIndex + 1, $color.length - 1);
          for (var i = 0; i < $color.length; i++) {
            var c = $color[i];
            if (c >= "0" && c <= "9" || c === "." || c === "+" || c === "-") {
              isMining = true;
            } else if (isMining && (c === " " || c === ",")) {
              numbers.push($color.substring(prevPos, i));
              isMining = false;
              prevPos = i + 1;
            } else if (!isMining) {
              prevPos = i + 1;
            }
          }
          if (isMining) {
            numbers.push($color.substring(prevPos, $color.length));
          }
          return numbers;
        }
        function getNumbersFromString(str, range, units) {
          var raw = getNumbers(str);
          var unitsList = Object.entries(units);
          var numbers = raw.map(function(r) {
            return r.trim();
          }).map(function(r, i) {
            var n;
            var unit = unitsList.find(function(_a) {
              var _b = __read(_a, 1), u = _b[0];
              return r.endsWith(u);
            });
            if (unit) {
              n = parseFloat(r.substring(0, r.length - unit[0].length)) / unit[1] * range[i];
            } else {
              n = parseFloat(r);
            }
            if (range[i] > 1) {
              return Math.round(n);
            }
            return n;
          });
          return numbers;
        }
        var rgbRange = [255, 255, 255, 1];
        var rgbUnits = { "%": 100 };
        function parseRGB($rgb) {
          var _a = __read(getNumbersFromString($rgb, rgbRange, rgbUnits), 4), r = _a[0], g = _a[1], b = _a[2], _b = _a[3], a = _b === void 0 ? 1 : _b;
          return { r, g, b, a };
        }
        var hslRange = [360, 1, 1, 1];
        var hslUnits = { "%": 100, "deg": 360, "rad": 2 * Math.PI, "turn": 1 };
        function parseHSL($hsl) {
          var _a = __read(getNumbersFromString($hsl, hslRange, hslUnits), 4), h = _a[0], s = _a[1], l = _a[2], _b = _a[3], a = _b === void 0 ? 1 : _b;
          return hslToRGB({ h, s, l, a });
        }
        function parseHex($hex) {
          var h = $hex.substring(1);
          switch (h.length) {
            case 3:
            case 4: {
              var _a = __read([0, 1, 2].map(function(i) {
                return parseInt("".concat(h[i]).concat(h[i]), 16);
              }), 3), r = _a[0], g = _a[1], b = _a[2];
              var a = h.length === 3 ? 1 : parseInt("".concat(h[3]).concat(h[3]), 16) / 255;
              return { r, g, b, a };
            }
            case 6:
            case 8: {
              var _b = __read([0, 2, 4].map(function(i) {
                return parseInt(h.substring(i, i + 2), 16);
              }), 3), r = _b[0], g = _b[1], b = _b[2];
              var a = h.length === 6 ? 1 : parseInt(h.substring(6, 8), 16) / 255;
              return { r, g, b, a };
            }
          }
          return null;
        }
        function getColorByName($color) {
          var n = knownColors.get($color);
          return {
            r: n >> 16 & 255,
            g: n >> 8 & 255,
            b: n >> 0 & 255,
            a: 1
          };
        }
        function getSystemColor($color) {
          var n = systemColors.get($color);
          return {
            r: n >> 16 & 255,
            g: n >> 8 & 255,
            b: n >> 0 & 255,
            a: 1
          };
        }
        function lowerCalcExpression(color) {
          var searchIndex = 0;
          var replaceBetweenIndices = function(start, end, replacement) {
            color = color.substring(0, start) + replacement + color.substring(end);
          };
          while ((searchIndex = color.indexOf("calc(")) !== -1) {
            var range = getParenthesesRange(color, searchIndex);
            if (!range) {
              break;
            }
            var slice = color.slice(range.start + 1, range.end - 1);
            var includesPercentage = slice.includes("%");
            slice = slice.split("%").join("");
            var output = Math.round(evalMath(slice));
            replaceBetweenIndices(range.start - 4, range.end, output + (includesPercentage ? "%" : ""));
          }
          return color;
        }
        var knownColors = new Map(Object.entries({
          aliceblue: 15792383,
          antiquewhite: 16444375,
          aqua: 65535,
          aquamarine: 8388564,
          azure: 15794175,
          beige: 16119260,
          bisque: 16770244,
          black: 0,
          blanchedalmond: 16772045,
          blue: 255,
          blueviolet: 9055202,
          brown: 10824234,
          burlywood: 14596231,
          cadetblue: 6266528,
          chartreuse: 8388352,
          chocolate: 13789470,
          coral: 16744272,
          cornflowerblue: 6591981,
          cornsilk: 16775388,
          crimson: 14423100,
          cyan: 65535,
          darkblue: 139,
          darkcyan: 35723,
          darkgoldenrod: 12092939,
          darkgray: 11119017,
          darkgrey: 11119017,
          darkgreen: 25600,
          darkkhaki: 12433259,
          darkmagenta: 9109643,
          darkolivegreen: 5597999,
          darkorange: 16747520,
          darkorchid: 10040012,
          darkred: 9109504,
          darksalmon: 15308410,
          darkseagreen: 9419919,
          darkslateblue: 4734347,
          darkslategray: 3100495,
          darkslategrey: 3100495,
          darkturquoise: 52945,
          darkviolet: 9699539,
          deeppink: 16716947,
          deepskyblue: 49151,
          dimgray: 6908265,
          dimgrey: 6908265,
          dodgerblue: 2003199,
          firebrick: 11674146,
          floralwhite: 16775920,
          forestgreen: 2263842,
          fuchsia: 16711935,
          gainsboro: 14474460,
          ghostwhite: 16316671,
          gold: 16766720,
          goldenrod: 14329120,
          gray: 8421504,
          grey: 8421504,
          green: 32768,
          greenyellow: 11403055,
          honeydew: 15794160,
          hotpink: 16738740,
          indianred: 13458524,
          indigo: 4915330,
          ivory: 16777200,
          khaki: 15787660,
          lavender: 15132410,
          lavenderblush: 16773365,
          lawngreen: 8190976,
          lemonchiffon: 16775885,
          lightblue: 11393254,
          lightcoral: 15761536,
          lightcyan: 14745599,
          lightgoldenrodyellow: 16448210,
          lightgray: 13882323,
          lightgrey: 13882323,
          lightgreen: 9498256,
          lightpink: 16758465,
          lightsalmon: 16752762,
          lightseagreen: 2142890,
          lightskyblue: 8900346,
          lightslategray: 7833753,
          lightslategrey: 7833753,
          lightsteelblue: 11584734,
          lightyellow: 16777184,
          lime: 65280,
          limegreen: 3329330,
          linen: 16445670,
          magenta: 16711935,
          maroon: 8388608,
          mediumaquamarine: 6737322,
          mediumblue: 205,
          mediumorchid: 12211667,
          mediumpurple: 9662683,
          mediumseagreen: 3978097,
          mediumslateblue: 8087790,
          mediumspringgreen: 64154,
          mediumturquoise: 4772300,
          mediumvioletred: 13047173,
          midnightblue: 1644912,
          mintcream: 16121850,
          mistyrose: 16770273,
          moccasin: 16770229,
          navajowhite: 16768685,
          navy: 128,
          oldlace: 16643558,
          olive: 8421376,
          olivedrab: 7048739,
          orange: 16753920,
          orangered: 16729344,
          orchid: 14315734,
          palegoldenrod: 15657130,
          palegreen: 10025880,
          paleturquoise: 11529966,
          palevioletred: 14381203,
          papayawhip: 16773077,
          peachpuff: 16767673,
          peru: 13468991,
          pink: 16761035,
          plum: 14524637,
          powderblue: 11591910,
          purple: 8388736,
          rebeccapurple: 6697881,
          red: 16711680,
          rosybrown: 12357519,
          royalblue: 4286945,
          saddlebrown: 9127187,
          salmon: 16416882,
          sandybrown: 16032864,
          seagreen: 3050327,
          seashell: 16774638,
          sienna: 10506797,
          silver: 12632256,
          skyblue: 8900331,
          slateblue: 6970061,
          slategray: 7372944,
          slategrey: 7372944,
          snow: 16775930,
          springgreen: 65407,
          steelblue: 4620980,
          tan: 13808780,
          teal: 32896,
          thistle: 14204888,
          tomato: 16737095,
          turquoise: 4251856,
          violet: 15631086,
          wheat: 16113331,
          white: 16777215,
          whitesmoke: 16119285,
          yellow: 16776960,
          yellowgreen: 10145074
        }));
        var systemColors = new Map(Object.entries({
          ActiveBorder: 3906044,
          ActiveCaption: 0,
          AppWorkspace: 11184810,
          Background: 6513614,
          ButtonFace: 16777215,
          ButtonHighlight: 15329769,
          ButtonShadow: 10461343,
          ButtonText: 0,
          CaptionText: 0,
          GrayText: 8355711,
          Highlight: 11720703,
          HighlightText: 0,
          InactiveBorder: 16777215,
          InactiveCaption: 16777215,
          InactiveCaptionText: 0,
          InfoBackground: 16514245,
          InfoText: 0,
          Menu: 16185078,
          MenuText: 16777215,
          Scrollbar: 11184810,
          ThreeDDarkShadow: 0,
          ThreeDFace: 12632256,
          ThreeDHighlight: 16777215,
          ThreeDLightShadow: 16777215,
          ThreeDShadow: 0,
          Window: 15527148,
          WindowFrame: 11184810,
          WindowText: 0,
          "-webkit-focus-ring-color": 15046400
        }).map(function(_a) {
          var _b = __read(_a, 2), key = _b[0], value = _b[1];
          return [key.toLowerCase(), value];
        }));
        function getSRGBLightness(r, g, b) {
          return (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;
        }
        function scale(x, inLow, inHigh, outLow, outHigh) {
          return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
        }
        function clamp(x, min, max) {
          return Math.min(max, Math.max(min, x));
        }
        function multiplyMatrices(m1, m2) {
          var result = [];
          for (var i = 0, len = m1.length; i < len; i++) {
            result[i] = [];
            for (var j = 0, len2 = m2[0].length; j < len2; j++) {
              var sum2 = 0;
              for (var k = 0, len3 = m1[0].length; k < len3; k++) {
                sum2 += m1[i][k] * m2[k][j];
              }
              result[i][j] = sum2;
            }
          }
          return result;
        }
        function createFilterMatrix(config) {
          var m = Matrix.identity();
          if (config.sepia !== 0) {
            m = multiplyMatrices(m, Matrix.sepia(config.sepia / 100));
          }
          if (config.grayscale !== 0) {
            m = multiplyMatrices(m, Matrix.grayscale(config.grayscale / 100));
          }
          if (config.contrast !== 100) {
            m = multiplyMatrices(m, Matrix.contrast(config.contrast / 100));
          }
          if (config.brightness !== 100) {
            m = multiplyMatrices(m, Matrix.brightness(config.brightness / 100));
          }
          if (config.mode === 1) {
            m = multiplyMatrices(m, Matrix.invertNHue());
          }
          return m;
        }
        function applyColorMatrix(_a, matrix) {
          var _b = __read(_a, 3), r = _b[0], g = _b[1], b = _b[2];
          var rgb = [[r / 255], [g / 255], [b / 255], [1], [1]];
          var result = multiplyMatrices(matrix, rgb);
          return [0, 1, 2].map(function(i) {
            return clamp(Math.round(result[i][0] * 255), 0, 255);
          });
        }
        var Matrix = {
          identity: function() {
            return [
              [1, 0, 0, 0, 0],
              [0, 1, 0, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 0, 1, 0],
              [0, 0, 0, 0, 1]
            ];
          },
          invertNHue: function() {
            return [
              [0.333, -0.667, -0.667, 0, 1],
              [-0.667, 0.333, -0.667, 0, 1],
              [-0.667, -0.667, 0.333, 0, 1],
              [0, 0, 0, 1, 0],
              [0, 0, 0, 0, 1]
            ];
          },
          brightness: function(v) {
            return [
              [v, 0, 0, 0, 0],
              [0, v, 0, 0, 0],
              [0, 0, v, 0, 0],
              [0, 0, 0, 1, 0],
              [0, 0, 0, 0, 1]
            ];
          },
          contrast: function(v) {
            var t = (1 - v) / 2;
            return [
              [v, 0, 0, 0, t],
              [0, v, 0, 0, t],
              [0, 0, v, 0, t],
              [0, 0, 0, 1, 0],
              [0, 0, 0, 0, 1]
            ];
          },
          sepia: function(v) {
            return [
              [0.393 + 0.607 * (1 - v), 0.769 - 0.769 * (1 - v), 0.189 - 0.189 * (1 - v), 0, 0],
              [0.349 - 0.349 * (1 - v), 0.686 + 0.314 * (1 - v), 0.168 - 0.168 * (1 - v), 0, 0],
              [0.272 - 0.272 * (1 - v), 0.534 - 0.534 * (1 - v), 0.131 + 0.869 * (1 - v), 0, 0],
              [0, 0, 0, 1, 0],
              [0, 0, 0, 0, 1]
            ];
          },
          grayscale: function(v) {
            return [
              [0.2126 + 0.7874 * (1 - v), 0.7152 - 0.7152 * (1 - v), 0.0722 - 0.0722 * (1 - v), 0, 0],
              [0.2126 - 0.2126 * (1 - v), 0.7152 + 0.2848 * (1 - v), 0.0722 - 0.0722 * (1 - v), 0, 0],
              [0.2126 - 0.2126 * (1 - v), 0.7152 - 0.7152 * (1 - v), 0.0722 + 0.9278 * (1 - v), 0, 0],
              [0, 0, 0, 1, 0],
              [0, 0, 0, 0, 1]
            ];
          }
        };
        function getBgPole(theme) {
          var isDarkScheme = theme.mode === 1;
          var prop = isDarkScheme ? "darkSchemeBackgroundColor" : "lightSchemeBackgroundColor";
          return theme[prop];
        }
        function getFgPole(theme) {
          var isDarkScheme = theme.mode === 1;
          var prop = isDarkScheme ? "darkSchemeTextColor" : "lightSchemeTextColor";
          return theme[prop];
        }
        var colorModificationCache = /* @__PURE__ */ new Map();
        function clearColorModificationCache() {
          colorModificationCache.clear();
        }
        var rgbCacheKeys = ["r", "g", "b", "a"];
        var themeCacheKeys$1 = ["mode", "brightness", "contrast", "grayscale", "sepia", "darkSchemeBackgroundColor", "darkSchemeTextColor", "lightSchemeBackgroundColor", "lightSchemeTextColor"];
        function getCacheId(rgb, theme) {
          var resultId = "";
          rgbCacheKeys.forEach(function(key) {
            resultId += "".concat(rgb[key], ";");
          });
          themeCacheKeys$1.forEach(function(key) {
            resultId += "".concat(theme[key], ";");
          });
          return resultId;
        }
        function modifyColorWithCache(rgb, theme, modifyHSL, poleColor, anotherPoleColor) {
          var fnCache;
          if (colorModificationCache.has(modifyHSL)) {
            fnCache = colorModificationCache.get(modifyHSL);
          } else {
            fnCache = /* @__PURE__ */ new Map();
            colorModificationCache.set(modifyHSL, fnCache);
          }
          var id = getCacheId(rgb, theme);
          if (fnCache.has(id)) {
            return fnCache.get(id);
          }
          var hsl = rgbToHSL(rgb);
          var pole = poleColor == null ? null : parseToHSLWithCache(poleColor);
          var anotherPole = anotherPoleColor == null ? null : parseToHSLWithCache(anotherPoleColor);
          var modified = modifyHSL(hsl, pole, anotherPole);
          var _a = hslToRGB(modified), r = _a.r, g = _a.g, b = _a.b, a = _a.a;
          var matrix = createFilterMatrix(theme);
          var _b = __read(applyColorMatrix([r, g, b], matrix), 3), rf = _b[0], gf = _b[1], bf = _b[2];
          var color = a === 1 ? rgbToHexString({ r: rf, g: gf, b: bf }) : rgbToString({ r: rf, g: gf, b: bf, a });
          fnCache.set(id, color);
          return color;
        }
        function noopHSL(hsl) {
          return hsl;
        }
        function modifyColor(rgb, theme) {
          return modifyColorWithCache(rgb, theme, noopHSL);
        }
        function modifyLightSchemeColor(rgb, theme) {
          var poleBg = getBgPole(theme);
          var poleFg = getFgPole(theme);
          return modifyColorWithCache(rgb, theme, modifyLightModeHSL, poleFg, poleBg);
        }
        function modifyLightModeHSL(_a, poleFg, poleBg) {
          var h = _a.h, s = _a.s, l = _a.l, a = _a.a;
          var isDark = l < 0.5;
          var isNeutral;
          if (isDark) {
            isNeutral = l < 0.2 || s < 0.12;
          } else {
            var isBlue = h > 200 && h < 280;
            isNeutral = s < 0.24 || l > 0.8 && isBlue;
          }
          var hx = h;
          var sx = l;
          if (isNeutral) {
            if (isDark) {
              hx = poleFg.h;
              sx = poleFg.s;
            } else {
              hx = poleBg.h;
              sx = poleBg.s;
            }
          }
          var lx = scale(l, 0, 1, poleFg.l, poleBg.l);
          return { h: hx, s: sx, l: lx, a };
        }
        var MAX_BG_LIGHTNESS = 0.4;
        function modifyBgHSL(_a, pole) {
          var h = _a.h, s = _a.s, l = _a.l, a = _a.a;
          var isDark = l < 0.5;
          var isBlue = h > 200 && h < 280;
          var isNeutral = s < 0.12 || l > 0.8 && isBlue;
          if (isDark) {
            var lx_1 = scale(l, 0, 0.5, 0, MAX_BG_LIGHTNESS);
            if (isNeutral) {
              var hx_1 = pole.h;
              var sx = pole.s;
              return { h: hx_1, s: sx, l: lx_1, a };
            }
            return { h, s, l: lx_1, a };
          }
          var lx = scale(l, 0.5, 1, MAX_BG_LIGHTNESS, pole.l);
          if (isNeutral) {
            var hx_2 = pole.h;
            var sx = pole.s;
            return { h: hx_2, s: sx, l: lx, a };
          }
          var hx = h;
          var isYellow = h > 60 && h < 180;
          if (isYellow) {
            var isCloserToGreen = h > 120;
            if (isCloserToGreen) {
              hx = scale(h, 120, 180, 135, 180);
            } else {
              hx = scale(h, 60, 120, 60, 105);
            }
          }
          if (hx > 40 && hx < 80) {
            lx *= 0.75;
          }
          return { h: hx, s, l: lx, a };
        }
        function modifyBackgroundColor(rgb, theme) {
          if (theme.mode === 0) {
            return modifyLightSchemeColor(rgb, theme);
          }
          var pole = getBgPole(theme);
          return modifyColorWithCache(rgb, __assign(__assign({}, theme), { mode: 0 }), modifyBgHSL, pole);
        }
        var MIN_FG_LIGHTNESS = 0.55;
        function modifyBlueFgHue(hue) {
          return scale(hue, 205, 245, 205, 220);
        }
        function modifyFgHSL(_a, pole) {
          var h = _a.h, s = _a.s, l = _a.l, a = _a.a;
          var isLight = l > 0.5;
          var isNeutral = l < 0.2 || s < 0.24;
          var isBlue = !isNeutral && h > 205 && h < 245;
          if (isLight) {
            var lx_2 = scale(l, 0.5, 1, MIN_FG_LIGHTNESS, pole.l);
            if (isNeutral) {
              var hx_3 = pole.h;
              var sx = pole.s;
              return { h: hx_3, s: sx, l: lx_2, a };
            }
            var hx_4 = h;
            if (isBlue) {
              hx_4 = modifyBlueFgHue(h);
            }
            return { h: hx_4, s, l: lx_2, a };
          }
          if (isNeutral) {
            var hx_5 = pole.h;
            var sx = pole.s;
            var lx_3 = scale(l, 0, 0.5, pole.l, MIN_FG_LIGHTNESS);
            return { h: hx_5, s: sx, l: lx_3, a };
          }
          var hx = h;
          var lx;
          if (isBlue) {
            hx = modifyBlueFgHue(h);
            lx = scale(l, 0, 0.5, pole.l, Math.min(1, MIN_FG_LIGHTNESS + 0.05));
          } else {
            lx = scale(l, 0, 0.5, pole.l, MIN_FG_LIGHTNESS);
          }
          return { h: hx, s, l: lx, a };
        }
        function modifyForegroundColor(rgb, theme) {
          if (theme.mode === 0) {
            return modifyLightSchemeColor(rgb, theme);
          }
          var pole = getFgPole(theme);
          return modifyColorWithCache(rgb, __assign(__assign({}, theme), { mode: 0 }), modifyFgHSL, pole);
        }
        function modifyBorderHSL(_a, poleFg, poleBg) {
          var h = _a.h, s = _a.s, l = _a.l, a = _a.a;
          var isDark = l < 0.5;
          var isNeutral = l < 0.2 || s < 0.24;
          var hx = h;
          var sx = s;
          if (isNeutral) {
            if (isDark) {
              hx = poleFg.h;
              sx = poleFg.s;
            } else {
              hx = poleBg.h;
              sx = poleBg.s;
            }
          }
          var lx = scale(l, 0, 1, 0.5, 0.2);
          return { h: hx, s: sx, l: lx, a };
        }
        function modifyBorderColor(rgb, theme) {
          if (theme.mode === 0) {
            return modifyLightSchemeColor(rgb, theme);
          }
          var poleFg = getFgPole(theme);
          var poleBg = getBgPole(theme);
          return modifyColorWithCache(rgb, __assign(__assign({}, theme), { mode: 0 }), modifyBorderHSL, poleFg, poleBg);
        }
        function modifyShadowColor(rgb, filter2) {
          return modifyBackgroundColor(rgb, filter2);
        }
        function modifyGradientColor(rgb, filter2) {
          return modifyBackgroundColor(rgb, filter2);
        }
        function createTextStyle(config) {
          var lines = [];
          lines.push('*:not(pre, pre *, code, .far, .fa, .glyphicon, [class*="vjs-"], .fab, .fa-github, .fas, .material-icons, .icofont, .typcn, mu, [class*="mu-"], .glyphicon, .icon) {');
          if (config.useFont && config.fontFamily) {
            lines.push("  font-family: ".concat(config.fontFamily, " !important;"));
          }
          if (config.textStroke > 0) {
            lines.push("  -webkit-text-stroke: ".concat(config.textStroke, "px !important;"));
            lines.push("  text-stroke: ".concat(config.textStroke, "px !important;"));
          }
          lines.push("}");
          return lines.join("\n");
        }
        var FilterMode;
        (function(FilterMode2) {
          FilterMode2[FilterMode2["light"] = 0] = "light";
          FilterMode2[FilterMode2["dark"] = 1] = "dark";
        })(FilterMode || (FilterMode = {}));
        function getCSSFilterValue(config) {
          var filters = [];
          if (config.mode === FilterMode.dark) {
            filters.push("invert(100%) hue-rotate(180deg)");
          }
          if (config.brightness !== 100) {
            filters.push("brightness(".concat(config.brightness, "%)"));
          }
          if (config.contrast !== 100) {
            filters.push("contrast(".concat(config.contrast, "%)"));
          }
          if (config.grayscale !== 0) {
            filters.push("grayscale(".concat(config.grayscale, "%)"));
          }
          if (config.sepia !== 0) {
            filters.push("sepia(".concat(config.sepia, "%)"));
          }
          if (filters.length === 0) {
            return null;
          }
          return filters.join(" ");
        }
        function toSVGMatrix(matrix) {
          return matrix.slice(0, 4).map(function(m) {
            return m.map(function(m2) {
              return m2.toFixed(3);
            }).join(" ");
          }).join(" ");
        }
        function getSVGFilterMatrixValue(config) {
          return toSVGMatrix(createFilterMatrix(config));
        }
        var counter = 0;
        var resolvers$1 = /* @__PURE__ */ new Map();
        var rejectors = /* @__PURE__ */ new Map();
        function bgFetch(request) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, new Promise(function(resolve, reject) {
                var id = ++counter;
                resolvers$1.set(id, resolve);
                rejectors.set(id, reject);
                chrome.runtime.sendMessage({ type: MessageType.CS_FETCH, data: request, id });
              })];
            });
          });
        }
        chrome.runtime.onMessage.addListener(function(_a) {
          var type = _a.type, data = _a.data, error = _a.error, id = _a.id;
          if (type === MessageType.BG_FETCH_RESPONSE) {
            var resolve = resolvers$1.get(id);
            var reject = rejectors.get(id);
            resolvers$1.delete(id);
            rejectors.delete(id);
            if (error) {
              reject && reject(error);
            } else {
              resolve && resolve(data);
            }
          }
        });
        var AsyncQueue = function() {
          function AsyncQueue2() {
            this.queue = [];
            this.timerId = null;
            this.frameDuration = 1e3 / 60;
          }
          AsyncQueue2.prototype.addToQueue = function(entry) {
            this.queue.push(entry);
            this.startQueue();
          };
          AsyncQueue2.prototype.stopQueue = function() {
            if (this.timerId !== null) {
              cancelAnimationFrame(this.timerId);
              this.timerId = null;
            }
            this.queue = [];
          };
          AsyncQueue2.prototype.startQueue = function() {
            var _this = this;
            if (this.timerId) {
              return;
            }
            this.timerId = requestAnimationFrame(function() {
              _this.timerId = null;
              var start = Date.now();
              var cb;
              while (cb = _this.queue.shift()) {
                cb();
                if (Date.now() - start >= _this.frameDuration) {
                  _this.startQueue();
                  break;
                }
              }
            });
          };
          return AsyncQueue2;
        }();
        var imageManager = new AsyncQueue();
        function getImageDetails(url) {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              return [2, new Promise(function(resolve, reject) {
                return __awaiter(_this, void 0, void 0, function() {
                  var dataURL, error_1, image_1, error_2;
                  return __generator(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        if (!url.startsWith("data:"))
                          return [3, 1];
                        dataURL = url;
                        return [3, 4];
                      case 1:
                        _a2.trys.push([1, 3, , 4]);
                        return [4, getImageDataURL(url)];
                      case 2:
                        dataURL = _a2.sent();
                        return [3, 4];
                      case 3:
                        error_1 = _a2.sent();
                        reject(error_1);
                        return [2];
                      case 4:
                        _a2.trys.push([4, 6, , 7]);
                        return [4, urlToImage(dataURL)];
                      case 5:
                        image_1 = _a2.sent();
                        imageManager.addToQueue(function() {
                          resolve(__assign({ src: url, dataURL, width: image_1.naturalWidth, height: image_1.naturalHeight }, analyzeImage(image_1)));
                        });
                        return [3, 7];
                      case 6:
                        error_2 = _a2.sent();
                        reject(error_2);
                        return [3, 7];
                      case 7:
                        return [2];
                    }
                  });
                });
              })];
            });
          });
        }
        function getImageDataURL(url) {
          return __awaiter(this, void 0, void 0, function() {
            var parsedURL;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  parsedURL = new URL(url);
                  if (!(parsedURL.origin === location.origin))
                    return [3, 2];
                  return [4, loadAsDataURL(url)];
                case 1:
                  return [2, _a.sent()];
                case 2:
                  return [4, bgFetch({ url, responseType: "data-url" })];
                case 3:
                  return [2, _a.sent()];
              }
            });
          });
        }
        function urlToImage(url) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, new Promise(function(resolve, reject) {
                var image = new Image();
                image.onload = function() {
                  return resolve(image);
                };
                image.onerror = function() {
                  return reject("Unable to load image ".concat(url));
                };
                image.src = url;
              })];
            });
          });
        }
        var MAX_ANALIZE_PIXELS_COUNT = 32 * 32;
        var canvas;
        var context;
        function createCanvas() {
          var maxWidth = MAX_ANALIZE_PIXELS_COUNT;
          var maxHeight = MAX_ANALIZE_PIXELS_COUNT;
          canvas = document.createElement("canvas");
          canvas.width = maxWidth;
          canvas.height = maxHeight;
          context = canvas.getContext("2d");
          context.imageSmoothingEnabled = false;
        }
        function removeCanvas() {
          canvas = null;
          context = null;
        }
        var MAX_IMAGE_SIZE = 5 * 1024 * 1024;
        function analyzeImage(image) {
          if (!canvas) {
            createCanvas();
          }
          var naturalWidth = image.naturalWidth, naturalHeight = image.naturalHeight;
          if (naturalHeight === 0 || naturalWidth === 0) {
            logWarn("logWarn(Image is empty ".concat(image.currentSrc, ")"));
            return null;
          }
          var size = naturalWidth * naturalHeight * 4;
          if (size > MAX_IMAGE_SIZE) {
            return {
              isDark: false,
              isLight: false,
              isTransparent: false,
              isLarge: false,
              isTooLarge: true
            };
          }
          var naturalPixelsCount = naturalWidth * naturalHeight;
          var k = Math.min(1, Math.sqrt(MAX_ANALIZE_PIXELS_COUNT / naturalPixelsCount));
          var width = Math.ceil(naturalWidth * k);
          var height = Math.ceil(naturalHeight * k);
          context.clearRect(0, 0, width, height);
          context.drawImage(image, 0, 0, naturalWidth, naturalHeight, 0, 0, width, height);
          var imageData = context.getImageData(0, 0, width, height);
          var d = imageData.data;
          var TRANSPARENT_ALPHA_THRESHOLD = 0.05;
          var DARK_LIGHTNESS_THRESHOLD = 0.4;
          var LIGHT_LIGHTNESS_THRESHOLD = 0.7;
          var transparentPixelsCount = 0;
          var darkPixelsCount = 0;
          var lightPixelsCount = 0;
          var i, x, y;
          var r, g, b, a;
          var l;
          for (y = 0; y < height; y++) {
            for (x = 0; x < width; x++) {
              i = 4 * (y * width + x);
              r = d[i + 0];
              g = d[i + 1];
              b = d[i + 2];
              a = d[i + 3];
              if (a / 255 < TRANSPARENT_ALPHA_THRESHOLD) {
                transparentPixelsCount++;
              } else {
                l = getSRGBLightness(r, g, b);
                if (l < DARK_LIGHTNESS_THRESHOLD) {
                  darkPixelsCount++;
                }
                if (l > LIGHT_LIGHTNESS_THRESHOLD) {
                  lightPixelsCount++;
                }
              }
            }
          }
          var totalPixelsCount = width * height;
          var opaquePixelsCount = totalPixelsCount - transparentPixelsCount;
          var DARK_IMAGE_THRESHOLD = 0.7;
          var LIGHT_IMAGE_THRESHOLD = 0.7;
          var TRANSPARENT_IMAGE_THRESHOLD = 0.1;
          var LARGE_IMAGE_PIXELS_COUNT = 800 * 600;
          return {
            isDark: darkPixelsCount / opaquePixelsCount >= DARK_IMAGE_THRESHOLD,
            isLight: lightPixelsCount / opaquePixelsCount >= LIGHT_IMAGE_THRESHOLD,
            isTransparent: transparentPixelsCount / totalPixelsCount >= TRANSPARENT_IMAGE_THRESHOLD,
            isLarge: naturalPixelsCount >= LARGE_IMAGE_PIXELS_COUNT,
            isTooLarge: false
          };
        }
        function getFilteredImageDataURL(_a, theme) {
          var dataURL = _a.dataURL, width = _a.width, height = _a.height;
          var matrix = getSVGFilterMatrixValue(theme);
          var svg = [
            '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="'.concat(width, '" height="').concat(height, '">'),
            "<defs>",
            '<filter id="darkreader-image-filter">',
            '<feColorMatrix type="matrix" values="'.concat(matrix, '" />'),
            "</filter>",
            "</defs>",
            '<image width="'.concat(width, '" height="').concat(height, '" filter="url(#darkreader-image-filter)" xlink:href="').concat(dataURL, '" />'),
            "</svg>"
          ].join("");
          return "data:image/svg+xml;base64,".concat(btoa(svg));
        }
        function cleanImageProcessingCache() {
          imageManager && imageManager.stopQueue();
          removeCanvas();
        }
        var gradientLength = "gradient".length;
        var conicGradient = "conic-";
        var conicGradientLength = conicGradient.length;
        var radialGradient = "radial-";
        var linearGradient = "linear-";
        function parseGradient(value) {
          var result = [];
          var index = 0;
          var startIndex = conicGradient.length;
          var _loop_1 = function() {
            var typeGradient;
            [linearGradient, radialGradient, conicGradient].find(function(possibleType) {
              if (index - possibleType.length >= 0) {
                var possibleGradient = value.substring(index - possibleType.length, index);
                if (possibleGradient === possibleType) {
                  if (value.slice(index - possibleType.length - 10, index - possibleType.length - 1) === "repeating") {
                    typeGradient = "repeating-".concat(possibleType, "gradient");
                    return true;
                  }
                  if (value.slice(index - possibleType.length - 8, index - possibleType.length - 1) === "-webkit") {
                    typeGradient = "-webkit-".concat(possibleType, "gradient");
                    return true;
                  }
                  typeGradient = "".concat(possibleType, "gradient");
                  return true;
                }
              }
            });
            if (!typeGradient) {
              return "break";
            }
            var _a = getParenthesesRange(value, index + gradientLength), start = _a.start, end = _a.end;
            var match = value.substring(start + 1, end - 1);
            startIndex = end + 1 + conicGradientLength;
            result.push({
              typeGradient,
              match,
              offset: typeGradient.length + 2,
              index: index - typeGradient.length + gradientLength,
              hasComma: true
            });
          };
          while ((index = value.indexOf("gradient", startIndex)) !== -1) {
            var state_1 = _loop_1();
            if (state_1 === "break")
              break;
          }
          if (result.length) {
            result[result.length - 1].hasComma = false;
          }
          return result;
        }
        function getPriority(ruleStyle, property) {
          return Boolean(ruleStyle && ruleStyle.getPropertyPriority(property));
        }
        function getModifiableCSSDeclaration(property, value, rule, variablesStore2, ignoreImageSelectors, isCancelled) {
          if (property.startsWith("--")) {
            var modifier = getVariableModifier(variablesStore2, property, value, rule, ignoreImageSelectors, isCancelled);
            if (modifier) {
              return { property, value: modifier, important: getPriority(rule.style, property), sourceValue: value };
            }
          } else if (value.includes("var(")) {
            var modifier = getVariableDependantModifier(variablesStore2, property, value);
            if (modifier) {
              return { property, value: modifier, important: getPriority(rule.style, property), sourceValue: value };
            }
          } else if (property === "color-scheme") {
            return null;
          } else if (property.includes("color") && property !== "-webkit-print-color-adjust" || property === "fill" || property === "stroke" || property === "stop-color") {
            var modifier = getColorModifier(property, value, rule);
            if (modifier) {
              return { property, value: modifier, important: getPriority(rule.style, property), sourceValue: value };
            }
          } else if (property === "background-image" || property === "list-style-image") {
            var modifier = getBgImageModifier(value, rule, ignoreImageSelectors, isCancelled);
            if (modifier) {
              return { property, value: modifier, important: getPriority(rule.style, property), sourceValue: value };
            }
          } else if (property.includes("shadow")) {
            var modifier = getShadowModifier(value);
            if (modifier) {
              return { property, value: modifier, important: getPriority(rule.style, property), sourceValue: value };
            }
          }
          return null;
        }
        function joinSelectors() {
          var selectors = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            selectors[_i] = arguments[_i];
          }
          return selectors.filter(Boolean).join(", ");
        }
        function getModifiedUserAgentStyle(theme, isIFrame2, styleSystemControls) {
          var lines = [];
          if (!isIFrame2) {
            lines.push("html {");
            lines.push("    background-color: ".concat(modifyBackgroundColor({ r: 255, g: 255, b: 255 }, theme), " !important;"));
            lines.push("}");
          }
          if (isCSSColorSchemePropSupported) {
            lines.push("html {");
            lines.push("    color-scheme: ".concat(theme.mode === 1 ? "dark" : "dark light", " !important;"));
            lines.push("}");
          }
          var bgSelectors = joinSelectors(isIFrame2 ? "" : "html, body", styleSystemControls ? "input, textarea, select, button, dialog" : "");
          if (bgSelectors) {
            lines.push("".concat(bgSelectors, " {"));
            lines.push("    background-color: ".concat(modifyBackgroundColor({ r: 255, g: 255, b: 255 }, theme), ";"));
            lines.push("}");
          }
          lines.push("".concat(joinSelectors("html, body", styleSystemControls ? "input, textarea, select, button" : ""), " {"));
          lines.push("    border-color: ".concat(modifyBorderColor({ r: 76, g: 76, b: 76 }, theme), ";"));
          lines.push("    color: ".concat(modifyForegroundColor({ r: 0, g: 0, b: 0 }, theme), ";"));
          lines.push("}");
          lines.push("a {");
          lines.push("    color: ".concat(modifyForegroundColor({ r: 0, g: 64, b: 255 }, theme), ";"));
          lines.push("}");
          lines.push("table {");
          lines.push("    border-color: ".concat(modifyBorderColor({ r: 128, g: 128, b: 128 }, theme), ";"));
          lines.push("}");
          lines.push("::placeholder {");
          lines.push("    color: ".concat(modifyForegroundColor({ r: 169, g: 169, b: 169 }, theme), ";"));
          lines.push("}");
          lines.push("input:-webkit-autofill,");
          lines.push("textarea:-webkit-autofill,");
          lines.push("select:-webkit-autofill {");
          lines.push("    background-color: ".concat(modifyBackgroundColor({ r: 250, g: 255, b: 189 }, theme), " !important;"));
          lines.push("    color: ".concat(modifyForegroundColor({ r: 0, g: 0, b: 0 }, theme), " !important;"));
          lines.push("}");
          if (theme.scrollbarColor) {
            lines.push(getModifiedScrollbarStyle(theme));
          }
          if (theme.selectionColor) {
            lines.push(getModifiedSelectionStyle(theme));
          }
          return lines.join("\n");
        }
        function getSelectionColor(theme) {
          var backgroundColorSelection;
          var foregroundColorSelection;
          if (theme.selectionColor === "auto") {
            backgroundColorSelection = modifyBackgroundColor({ r: 0, g: 96, b: 212 }, __assign(__assign({}, theme), { grayscale: 0 }));
            foregroundColorSelection = modifyForegroundColor({ r: 255, g: 255, b: 255 }, __assign(__assign({}, theme), { grayscale: 0 }));
          } else {
            var rgb = parseColorWithCache(theme.selectionColor);
            var hsl = rgbToHSL(rgb);
            backgroundColorSelection = theme.selectionColor;
            if (hsl.l < 0.5) {
              foregroundColorSelection = "#FFF";
            } else {
              foregroundColorSelection = "#000";
            }
          }
          return { backgroundColorSelection, foregroundColorSelection };
        }
        function getModifiedSelectionStyle(theme) {
          var lines = [];
          var modifiedSelectionColor = getSelectionColor(theme);
          var backgroundColorSelection = modifiedSelectionColor.backgroundColorSelection;
          var foregroundColorSelection = modifiedSelectionColor.foregroundColorSelection;
          ["::selection", "::-moz-selection"].forEach(function(selection) {
            lines.push("".concat(selection, " {"));
            lines.push("    background-color: ".concat(backgroundColorSelection, " !important;"));
            lines.push("    color: ".concat(foregroundColorSelection, " !important;"));
            lines.push("}");
          });
          return lines.join("\n");
        }
        function getModifiedScrollbarStyle(theme) {
          var lines = [];
          var colorTrack;
          var colorIcons;
          var colorThumb;
          var colorThumbHover;
          var colorThumbActive;
          var colorCorner;
          if (theme.scrollbarColor === "auto") {
            colorTrack = modifyBackgroundColor({ r: 241, g: 241, b: 241 }, theme);
            colorIcons = modifyForegroundColor({ r: 96, g: 96, b: 96 }, theme);
            colorThumb = modifyBackgroundColor({ r: 176, g: 176, b: 176 }, theme);
            colorThumbHover = modifyBackgroundColor({ r: 144, g: 144, b: 144 }, theme);
            colorThumbActive = modifyBackgroundColor({ r: 96, g: 96, b: 96 }, theme);
            colorCorner = modifyBackgroundColor({ r: 255, g: 255, b: 255 }, theme);
          } else {
            var rgb = parseColorWithCache(theme.scrollbarColor);
            var hsl_1 = rgbToHSL(rgb);
            var isLight = hsl_1.l > 0.5;
            var lighten = function(lighter) {
              return __assign(__assign({}, hsl_1), { l: clamp(hsl_1.l + lighter, 0, 1) });
            };
            var darken = function(darker) {
              return __assign(__assign({}, hsl_1), { l: clamp(hsl_1.l - darker, 0, 1) });
            };
            colorTrack = hslToString(darken(0.4));
            colorIcons = hslToString(isLight ? darken(0.4) : lighten(0.4));
            colorThumb = hslToString(hsl_1);
            colorThumbHover = hslToString(lighten(0.1));
            colorThumbActive = hslToString(lighten(0.2));
          }
          lines.push("::-webkit-scrollbar {");
          lines.push("    background-color: ".concat(colorTrack, ";"));
          lines.push("    color: ".concat(colorIcons, ";"));
          lines.push("}");
          lines.push("::-webkit-scrollbar-thumb {");
          lines.push("    background-color: ".concat(colorThumb, ";"));
          lines.push("}");
          lines.push("::-webkit-scrollbar-thumb:hover {");
          lines.push("    background-color: ".concat(colorThumbHover, ";"));
          lines.push("}");
          lines.push("::-webkit-scrollbar-thumb:active {");
          lines.push("    background-color: ".concat(colorThumbActive, ";"));
          lines.push("}");
          lines.push("::-webkit-scrollbar-corner {");
          lines.push("    background-color: ".concat(colorCorner, ";"));
          lines.push("}");
          if (isFirefox) {
            lines.push("* {");
            lines.push("    scrollbar-color: ".concat(colorThumb, " ").concat(colorTrack, ";"));
            lines.push("}");
          }
          return lines.join("\n");
        }
        function getModifiedFallbackStyle(filter2, _a) {
          var strict = _a.strict;
          var lines = [];
          var isMicrosoft = ["microsoft.com", "docs.microsoft.com"].includes(location.hostname);
          lines.push("html, body, ".concat(strict ? "body :not(iframe)".concat(isMicrosoft ? ':not(div[style^="position:absolute;top:0;left:-"]' : "") : "body > :not(iframe)", " {"));
          lines.push("    background-color: ".concat(modifyBackgroundColor({ r: 255, g: 255, b: 255 }, filter2), " !important;"));
          lines.push("    border-color: ".concat(modifyBorderColor({ r: 64, g: 64, b: 64 }, filter2), " !important;"));
          lines.push("    color: ".concat(modifyForegroundColor({ r: 0, g: 0, b: 0 }, filter2), " !important;"));
          lines.push("}");
          return lines.join("\n");
        }
        var unparsableColors = /* @__PURE__ */ new Set([
          "inherit",
          "transparent",
          "initial",
          "currentcolor",
          "none",
          "unset"
        ]);
        function getColorModifier(prop, value, rule) {
          if (unparsableColors.has(value.toLowerCase())) {
            return value;
          }
          var rgb = parseColorWithCache(value);
          if (!rgb) {
            return null;
          }
          if (prop.includes("background")) {
            if (rule.style.webkitMaskImage && rule.style.webkitMaskImage !== "none" || rule.style.webkitMask && !rule.style.webkitMask.startsWith("none") || rule.style.mask && rule.style.mask !== "none" || rule.style.getPropertyValue("mask-image") && rule.style.getPropertyValue("mask-image") !== "none") {
              return function(filter2) {
                return modifyForegroundColor(rgb, filter2);
              };
            }
            return function(filter2) {
              return modifyBackgroundColor(rgb, filter2);
            };
          }
          if (prop.includes("border") || prop.includes("outline")) {
            return function(filter2) {
              return modifyBorderColor(rgb, filter2);
            };
          }
          return function(filter2) {
            return modifyForegroundColor(rgb, filter2);
          };
        }
        var imageDetailsCache = /* @__PURE__ */ new Map();
        var awaitingForImageLoading = /* @__PURE__ */ new Map();
        function shouldIgnoreImage(selectorText, selectors) {
          if (!selectorText || selectors.length === 0) {
            return false;
          }
          if (selectors.some(function(s) {
            return s === "*";
          })) {
            return true;
          }
          var ruleSelectors = selectorText.split(/,\s*/g);
          var _loop_1 = function(i2) {
            var ignoredSelector = selectors[i2];
            if (ruleSelectors.some(function(s) {
              return s === ignoredSelector;
            })) {
              return { value: true };
            }
          };
          for (var i = 0; i < selectors.length; i++) {
            var state_1 = _loop_1(i);
            if (typeof state_1 === "object")
              return state_1.value;
          }
          return false;
        }
        function getBgImageModifier(value, rule, ignoreImageSelectors, isCancelled) {
          var _this = this;
          try {
            var gradients = parseGradient(value);
            var urls = getMatches(cssURLRegex, value);
            if (urls.length === 0 && gradients.length === 0) {
              return value;
            }
            var getIndices = function(matches) {
              var index = 0;
              return matches.map(function(match) {
                var valueIndex = value.indexOf(match, index);
                index = valueIndex + match.length;
                return { match, index: valueIndex };
              });
            };
            var matches_1 = gradients.map(function(i) {
              return __assign({ type: "gradient" }, i);
            }).concat(getIndices(urls).map(function(i) {
              return __assign({ type: "url", offset: 0 }, i);
            })).sort(function(a, b) {
              return a.index > b.index ? 1 : -1;
            });
            var getGradientModifier_1 = function(gradient) {
              var typeGradient = gradient.typeGradient, match = gradient.match, hasComma = gradient.hasComma;
              var partsRegex = /([^\(\),]+(\([^\(\)]*(\([^\(\)]*\)*[^\(\)]*)?\))?([^\(\), ]|( (?!calc)))*),?/g;
              var colorStopRegex = /^(from|color-stop|to)\(([^\(\)]*?,\s*)?(.*?)\)$/;
              var parts = getMatches(partsRegex, match, 1).map(function(part) {
                part = part.trim();
                var rgb = parseColorWithCache(part);
                if (rgb) {
                  return function(filter2) {
                    return modifyGradientColor(rgb, filter2);
                  };
                }
                var space = part.lastIndexOf(" ");
                rgb = parseColorWithCache(part.substring(0, space));
                if (rgb) {
                  return function(filter2) {
                    return "".concat(modifyGradientColor(rgb, filter2), " ").concat(part.substring(space + 1));
                  };
                }
                var colorStopMatch = part.match(colorStopRegex);
                if (colorStopMatch) {
                  rgb = parseColorWithCache(colorStopMatch[3]);
                  if (rgb) {
                    return function(filter2) {
                      return "".concat(colorStopMatch[1], "(").concat(colorStopMatch[2] ? "".concat(colorStopMatch[2], ", ") : "").concat(modifyGradientColor(rgb, filter2), ")");
                    };
                  }
                }
                return function() {
                  return part;
                };
              });
              return function(filter2) {
                return "".concat(typeGradient, "(").concat(parts.map(function(modify) {
                  return modify(filter2);
                }).join(", "), ")").concat(hasComma ? ", " : "");
              };
            };
            var getURLModifier_1 = function(urlValue) {
              var _a;
              if (shouldIgnoreImage(rule.selectorText, ignoreImageSelectors)) {
                return null;
              }
              var url = getCSSURLValue(urlValue);
              var isURLEmpty = url.length === 0;
              var parentStyleSheet = rule.parentStyleSheet;
              var baseURL = parentStyleSheet && parentStyleSheet.href ? getCSSBaseBath(parentStyleSheet.href) : ((_a = parentStyleSheet.ownerNode) === null || _a === void 0 ? void 0 : _a.baseURI) || location.origin;
              url = getAbsoluteURL(baseURL, url);
              var absoluteValue = 'url("'.concat(url, '")');
              return function(filter2) {
                return __awaiter(_this, void 0, void 0, function() {
                  var imageDetails, awaiters_1, err_1, bgImageValue;
                  return __generator(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        if (isURLEmpty) {
                          return [2, "url('')"];
                        }
                        if (!imageDetailsCache.has(url))
                          return [3, 1];
                        imageDetails = imageDetailsCache.get(url);
                        return [3, 7];
                      case 1:
                        _a2.trys.push([1, 6, , 7]);
                        if (!awaitingForImageLoading.has(url))
                          return [3, 3];
                        awaiters_1 = awaitingForImageLoading.get(url);
                        return [4, new Promise(function(resolve) {
                          return awaiters_1.push(resolve);
                        })];
                      case 2:
                        imageDetails = _a2.sent();
                        if (!imageDetails) {
                          return [2, null];
                        }
                        return [3, 5];
                      case 3:
                        awaitingForImageLoading.set(url, []);
                        return [4, getImageDetails(url)];
                      case 4:
                        imageDetails = _a2.sent();
                        imageDetailsCache.set(url, imageDetails);
                        awaitingForImageLoading.get(url).forEach(function(resolve) {
                          return resolve(imageDetails);
                        });
                        awaitingForImageLoading.delete(url);
                        _a2.label = 5;
                      case 5:
                        if (isCancelled()) {
                          return [2, null];
                        }
                        return [3, 7];
                      case 6:
                        err_1 = _a2.sent();
                        logWarn(err_1);
                        if (awaitingForImageLoading.has(url)) {
                          awaitingForImageLoading.get(url).forEach(function(resolve) {
                            return resolve(null);
                          });
                          awaitingForImageLoading.delete(url);
                        }
                        return [2, absoluteValue];
                      case 7:
                        bgImageValue = getBgImageValue_1(imageDetails, filter2) || absoluteValue;
                        return [2, bgImageValue];
                    }
                  });
                });
              };
            };
            var getBgImageValue_1 = function(imageDetails, filter2) {
              var isDark = imageDetails.isDark, isLight = imageDetails.isLight, isTransparent = imageDetails.isTransparent, isLarge = imageDetails.isLarge, isTooLarge = imageDetails.isTooLarge, width = imageDetails.width;
              var result;
              if (isTooLarge) {
                result = 'url("'.concat(imageDetails.src, '")');
              } else if (isDark && isTransparent && filter2.mode === 1 && !isLarge && width > 2) {
                logInfo("Inverting dark image ".concat(imageDetails.src));
                var inverted = getFilteredImageDataURL(imageDetails, __assign(__assign({}, filter2), { sepia: clamp(filter2.sepia + 10, 0, 100) }));
                result = 'url("'.concat(inverted, '")');
              } else if (isLight && !isTransparent && filter2.mode === 1) {
                if (isLarge) {
                  result = "none";
                } else {
                  logInfo("Dimming light image ".concat(imageDetails.src));
                  var dimmed = getFilteredImageDataURL(imageDetails, filter2);
                  result = 'url("'.concat(dimmed, '")');
                }
              } else if (filter2.mode === 0 && isLight && !isLarge) {
                logInfo("Applying filter to image ".concat(imageDetails.src));
                var filtered = getFilteredImageDataURL(imageDetails, __assign(__assign({}, filter2), { brightness: clamp(filter2.brightness - 10, 5, 200), sepia: clamp(filter2.sepia + 10, 0, 100) }));
                result = 'url("'.concat(filtered, '")');
              } else {
                result = null;
              }
              return result;
            };
            var modifiers_1 = [];
            var matchIndex_1 = 0;
            var prevHasComma_1 = false;
            matches_1.forEach(function(_a, i) {
              var type = _a.type, match = _a.match, index = _a.index, typeGradient = _a.typeGradient, hasComma = _a.hasComma, offset = _a.offset;
              var matchStart = index;
              var prefixStart = matchIndex_1;
              var matchEnd = matchStart + match.length + offset;
              matchIndex_1 = matchEnd;
              if (prefixStart !== matchStart) {
                if (prevHasComma_1) {
                  modifiers_1.push(function() {
                    var betweenValue = value.substring(prefixStart, matchStart);
                    if (betweenValue[0] === ",") {
                      betweenValue = betweenValue.substring(1);
                    }
                    return betweenValue;
                  });
                } else {
                  modifiers_1.push(function() {
                    return value.substring(prefixStart, matchStart);
                  });
                }
              }
              prevHasComma_1 = hasComma || false;
              if (type === "url") {
                modifiers_1.push(getURLModifier_1(match));
              } else if (type === "gradient") {
                modifiers_1.push(getGradientModifier_1({ match, index, typeGradient, hasComma, offset }));
              }
              if (i === matches_1.length - 1) {
                modifiers_1.push(function() {
                  return value.substring(matchEnd);
                });
              }
            });
            return function(filter2) {
              var results = modifiers_1.filter(Boolean).map(function(modify) {
                return modify(filter2);
              });
              if (results.some(function(r) {
                return r instanceof Promise;
              })) {
                return Promise.all(results).then(function(asyncResults) {
                  return asyncResults.filter(Boolean).join("");
                });
              }
              var combinedResult = results.join("");
              if (combinedResult.endsWith(", initial")) {
                return combinedResult.slice(0, -9);
              }
              return combinedResult;
            };
          } catch (err) {
            return null;
          }
        }
        function getShadowModifierWithInfo(value) {
          try {
            var index_1 = 0;
            var colorMatches_1 = getMatches(/(^|\s)(?!calc)([a-z]+\(.+?\)|#[0-9a-f]+|[a-z]+)(.*?(inset|outset)?($|,))/ig, value, 2);
            var notParsed_1 = 0;
            var modifiers_2 = colorMatches_1.map(function(match, i) {
              var prefixIndex = index_1;
              var matchIndex = value.indexOf(match, index_1);
              var matchEnd = matchIndex + match.length;
              index_1 = matchEnd;
              var rgb = parseColorWithCache(match);
              if (!rgb) {
                notParsed_1++;
                return function() {
                  return value.substring(prefixIndex, matchEnd);
                };
              }
              return function(filter2) {
                return "".concat(value.substring(prefixIndex, matchIndex)).concat(modifyShadowColor(rgb, filter2)).concat(i === colorMatches_1.length - 1 ? value.substring(matchEnd) : "");
              };
            });
            return function(filter2) {
              var modified = modifiers_2.map(function(modify) {
                return modify(filter2);
              }).join("");
              return {
                matchesLength: colorMatches_1.length,
                unparseableMatchesLength: notParsed_1,
                result: modified
              };
            };
          } catch (err) {
            return null;
          }
        }
        function getShadowModifier(value) {
          var shadowModifier = getShadowModifierWithInfo(value);
          if (!shadowModifier) {
            return null;
          }
          return function(theme) {
            return shadowModifier(theme).result;
          };
        }
        function getVariableModifier(variablesStore2, prop, value, rule, ignoredImgSelectors, isCancelled) {
          return variablesStore2.getModifierForVariable({
            varName: prop,
            sourceValue: value,
            rule,
            ignoredImgSelectors,
            isCancelled
          });
        }
        function getVariableDependantModifier(variablesStore2, prop, value) {
          return variablesStore2.getModifierForVarDependant(prop, value);
        }
        function cleanModificationCache() {
          clearColorModificationCache();
          imageDetailsCache.clear();
          cleanImageProcessingCache();
          awaitingForImageLoading.clear();
        }
        var VAR_TYPE_BGCOLOR = 1 << 0;
        var VAR_TYPE_TEXTCOLOR = 1 << 1;
        var VAR_TYPE_BORDERCOLOR = 1 << 2;
        var VAR_TYPE_BGIMG = 1 << 3;
        var VariablesStore = function() {
          function VariablesStore2() {
            this.varTypes = /* @__PURE__ */ new Map();
            this.rulesQueue = [];
            this.definedVars = /* @__PURE__ */ new Set();
            this.varRefs = /* @__PURE__ */ new Map();
            this.unknownColorVars = /* @__PURE__ */ new Set();
            this.unknownBgVars = /* @__PURE__ */ new Set();
            this.undefinedVars = /* @__PURE__ */ new Set();
            this.initialVarTypes = /* @__PURE__ */ new Map();
            this.changedTypeVars = /* @__PURE__ */ new Set();
            this.typeChangeSubscriptions = /* @__PURE__ */ new Map();
            this.unstableVarValues = /* @__PURE__ */ new Map();
          }
          VariablesStore2.prototype.clear = function() {
            this.varTypes.clear();
            this.rulesQueue.splice(0);
            this.definedVars.clear();
            this.varRefs.clear();
            this.unknownColorVars.clear();
            this.unknownBgVars.clear();
            this.undefinedVars.clear();
            this.initialVarTypes.clear();
            this.changedTypeVars.clear();
            this.typeChangeSubscriptions.clear();
            this.unstableVarValues.clear();
          };
          VariablesStore2.prototype.isVarType = function(varName, typeNum) {
            return this.varTypes.has(varName) && (this.varTypes.get(varName) & typeNum) > 0;
          };
          VariablesStore2.prototype.addRulesForMatching = function(rules) {
            this.rulesQueue.push(rules);
          };
          VariablesStore2.prototype.matchVariablesAndDependants = function() {
            var _this = this;
            this.changedTypeVars.clear();
            this.initialVarTypes = new Map(this.varTypes);
            this.collectRootVariables();
            this.collectVariablesAndVarDep(this.rulesQueue);
            this.rulesQueue.splice(0);
            this.collectRootVarDependants();
            this.varRefs.forEach(function(refs, v) {
              refs.forEach(function(r) {
                if (_this.varTypes.has(v)) {
                  _this.resolveVariableType(r, _this.varTypes.get(v));
                }
              });
            });
            this.unknownColorVars.forEach(function(v) {
              if (_this.unknownBgVars.has(v)) {
                _this.unknownColorVars.delete(v);
                _this.unknownBgVars.delete(v);
                _this.resolveVariableType(v, VAR_TYPE_BGCOLOR);
              } else if (_this.isVarType(v, VAR_TYPE_BGCOLOR | VAR_TYPE_TEXTCOLOR | VAR_TYPE_BORDERCOLOR)) {
                _this.unknownColorVars.delete(v);
              } else {
                _this.undefinedVars.add(v);
              }
            });
            this.unknownBgVars.forEach(function(v) {
              var hasColor = _this.findVarRef(v, function(ref) {
                return _this.unknownColorVars.has(ref) || _this.isVarType(ref, VAR_TYPE_TEXTCOLOR | VAR_TYPE_BORDERCOLOR);
              }) != null;
              if (hasColor) {
                _this.itarateVarRefs(v, function(ref) {
                  _this.resolveVariableType(ref, VAR_TYPE_BGCOLOR);
                });
              } else if (_this.isVarType(v, VAR_TYPE_BGCOLOR | VAR_TYPE_BGIMG)) {
                _this.unknownBgVars.delete(v);
              } else {
                _this.undefinedVars.add(v);
              }
            });
            this.changedTypeVars.forEach(function(varName) {
              if (_this.typeChangeSubscriptions.has(varName)) {
                _this.typeChangeSubscriptions.get(varName).forEach(function(callback) {
                  callback();
                });
              }
            });
            this.changedTypeVars.clear();
          };
          VariablesStore2.prototype.getModifierForVariable = function(options) {
            var _this = this;
            return function(theme) {
              var varName = options.varName, sourceValue = options.sourceValue, rule = options.rule, ignoredImgSelectors = options.ignoredImgSelectors, isCancelled = options.isCancelled;
              var getDeclarations = function() {
                var declarations = [];
                var addModifiedValue = function(typeNum, varNameWrapper, colorModifier) {
                  if (!_this.isVarType(varName, typeNum)) {
                    return;
                  }
                  var property2 = varNameWrapper(varName);
                  var modifiedValue2;
                  if (isVarDependant(sourceValue)) {
                    if (isConstructedColorVar(sourceValue)) {
                      var value = insertVarValues(sourceValue, _this.unstableVarValues);
                      if (!value) {
                        value = typeNum === VAR_TYPE_BGCOLOR ? "#ffffff" : "#000000";
                      }
                      modifiedValue2 = colorModifier(value, theme);
                    } else {
                      modifiedValue2 = replaceCSSVariablesNames(sourceValue, function(v) {
                        return varNameWrapper(v);
                      }, function(fallback) {
                        return colorModifier(fallback, theme);
                      });
                    }
                  } else {
                    modifiedValue2 = colorModifier(sourceValue, theme);
                  }
                  declarations.push({
                    property: property2,
                    value: modifiedValue2
                  });
                };
                addModifiedValue(VAR_TYPE_BGCOLOR, wrapBgColorVariableName, tryModifyBgColor);
                addModifiedValue(VAR_TYPE_TEXTCOLOR, wrapTextColorVariableName, tryModifyTextColor);
                addModifiedValue(VAR_TYPE_BORDERCOLOR, wrapBorderColorVariableName, tryModifyBorderColor);
                if (_this.isVarType(varName, VAR_TYPE_BGIMG)) {
                  var property = wrapBgImgVariableName(varName);
                  var modifiedValue = sourceValue;
                  if (isVarDependant(sourceValue)) {
                    modifiedValue = replaceCSSVariablesNames(sourceValue, function(v) {
                      return wrapBgColorVariableName(v);
                    }, function(fallback) {
                      return tryModifyBgColor(fallback, theme);
                    });
                  }
                  var bgModifier = getBgImageModifier(modifiedValue, rule, ignoredImgSelectors, isCancelled);
                  modifiedValue = typeof bgModifier === "function" ? bgModifier(theme) : bgModifier;
                  declarations.push({
                    property,
                    value: modifiedValue
                  });
                }
                return declarations;
              };
              var callbacks = /* @__PURE__ */ new Set();
              var addListener = function(onTypeChange) {
                var callback = function() {
                  var decs = getDeclarations();
                  onTypeChange(decs);
                };
                callbacks.add(callback);
                _this.subscribeForVarTypeChange(varName, callback);
              };
              var removeListeners = function() {
                callbacks.forEach(function(callback) {
                  _this.unsubscribeFromVariableTypeChanges(varName, callback);
                });
              };
              return {
                declarations: getDeclarations(),
                onTypeChange: { addListener, removeListeners }
              };
            };
          };
          VariablesStore2.prototype.getModifierForVarDependant = function(property, sourceValue) {
            var _this = this;
            if (sourceValue.match(/^\s*(rgb|hsl)a?\(/)) {
              var isBg_1 = property.startsWith("background");
              var isText_1 = property === "color" || property === "caret-color";
              return function(theme) {
                var value = insertVarValues(sourceValue, _this.unstableVarValues);
                if (!value) {
                  value = isBg_1 ? "#ffffff" : "#000000";
                }
                var modifier = isBg_1 ? tryModifyBgColor : isText_1 ? tryModifyTextColor : tryModifyBorderColor;
                return modifier(value, theme);
              };
            }
            if (property === "background-color") {
              return function(theme) {
                return replaceCSSVariablesNames(sourceValue, function(v) {
                  return wrapBgColorVariableName(v);
                }, function(fallback) {
                  return tryModifyBgColor(fallback, theme);
                });
              };
            }
            if (property === "color" || property === "caret-color") {
              return function(theme) {
                return replaceCSSVariablesNames(sourceValue, function(v) {
                  return wrapTextColorVariableName(v);
                }, function(fallback) {
                  return tryModifyTextColor(fallback, theme);
                });
              };
            }
            if (property === "background" || property === "background-image" || property === "box-shadow") {
              return function(theme) {
                var unknownVars = /* @__PURE__ */ new Set();
                var modify = function() {
                  var variableReplaced = replaceCSSVariablesNames(sourceValue, function(v) {
                    if (_this.isVarType(v, VAR_TYPE_BGCOLOR)) {
                      return wrapBgColorVariableName(v);
                    }
                    if (_this.isVarType(v, VAR_TYPE_BGIMG)) {
                      return wrapBgImgVariableName(v);
                    }
                    unknownVars.add(v);
                    return v;
                  }, function(fallback) {
                    return tryModifyBgColor(fallback, theme);
                  });
                  if (property === "box-shadow") {
                    var shadowModifier = getShadowModifierWithInfo(variableReplaced);
                    var modifiedShadow = shadowModifier(theme);
                    if (modifiedShadow.unparseableMatchesLength !== modifiedShadow.matchesLength) {
                      return modifiedShadow.result;
                    }
                  }
                  return variableReplaced;
                };
                var modified = modify();
                if (unknownVars.size > 0) {
                  return new Promise(function(resolve) {
                    var firstUnknownVar = unknownVars.values().next().value;
                    var callback = function() {
                      _this.unsubscribeFromVariableTypeChanges(firstUnknownVar, callback);
                      var newValue = modify();
                      resolve(newValue);
                    };
                    _this.subscribeForVarTypeChange(firstUnknownVar, callback);
                  });
                }
                return modified;
              };
            }
            if (property.startsWith("border") || property.startsWith("outline")) {
              return function(theme) {
                return replaceCSSVariablesNames(sourceValue, function(v) {
                  return wrapBorderColorVariableName(v);
                }, function(fallback) {
                  return tryModifyBorderColor(fallback, theme);
                });
              };
            }
            return null;
          };
          VariablesStore2.prototype.subscribeForVarTypeChange = function(varName, callback) {
            if (!this.typeChangeSubscriptions.has(varName)) {
              this.typeChangeSubscriptions.set(varName, /* @__PURE__ */ new Set());
            }
            var rootStore = this.typeChangeSubscriptions.get(varName);
            if (!rootStore.has(callback)) {
              rootStore.add(callback);
            }
          };
          VariablesStore2.prototype.unsubscribeFromVariableTypeChanges = function(varName, callback) {
            if (this.typeChangeSubscriptions.has(varName)) {
              this.typeChangeSubscriptions.get(varName).delete(callback);
            }
          };
          VariablesStore2.prototype.collectVariablesAndVarDep = function(ruleList) {
            var _this = this;
            ruleList.forEach(function(rules) {
              iterateCSSRules(rules, function(rule) {
                rule.style && iterateCSSDeclarations(rule.style, function(property, value) {
                  if (isVariable(property)) {
                    _this.inspectVariable(property, value);
                  }
                  if (isVarDependant(value)) {
                    _this.inspectVarDependant(property, value);
                  }
                });
              });
            });
          };
          VariablesStore2.prototype.collectRootVariables = function() {
            var _this = this;
            iterateCSSDeclarations(document.documentElement.style, function(property, value) {
              if (isVariable(property)) {
                _this.inspectVariable(property, value);
              }
            });
          };
          VariablesStore2.prototype.inspectVariable = function(varName, value) {
            this.unstableVarValues.set(varName, value);
            if (isVarDependant(value) && isConstructedColorVar(value)) {
              this.unknownColorVars.add(varName);
              this.definedVars.add(varName);
            }
            if (this.definedVars.has(varName)) {
              return;
            }
            this.definedVars.add(varName);
            var color = parseColorWithCache(value);
            if (color) {
              this.unknownColorVars.add(varName);
            } else if (value.includes("url(") || value.includes("linear-gradient(") || value.includes("radial-gradient(")) {
              this.resolveVariableType(varName, VAR_TYPE_BGIMG);
            }
          };
          VariablesStore2.prototype.resolveVariableType = function(varName, typeNum) {
            var initialType = this.initialVarTypes.get(varName) || 0;
            var currentType = this.varTypes.get(varName) || 0;
            var newType = currentType | typeNum;
            this.varTypes.set(varName, newType);
            if (newType !== initialType || this.undefinedVars.has(varName)) {
              this.changedTypeVars.add(varName);
              this.undefinedVars.delete(varName);
            }
            this.unknownColorVars.delete(varName);
            this.unknownBgVars.delete(varName);
          };
          VariablesStore2.prototype.collectRootVarDependants = function() {
            var _this = this;
            iterateCSSDeclarations(document.documentElement.style, function(property, value) {
              if (isVarDependant(value)) {
                _this.inspectVarDependant(property, value);
              }
            });
          };
          VariablesStore2.prototype.inspectVarDependant = function(property, value) {
            var _this = this;
            if (isVariable(property)) {
              this.iterateVarDeps(value, function(ref) {
                if (!_this.varRefs.has(property)) {
                  _this.varRefs.set(property, /* @__PURE__ */ new Set());
                }
                _this.varRefs.get(property).add(ref);
              });
            } else if (property === "background-color" || property === "box-shadow") {
              this.iterateVarDeps(value, function(v) {
                return _this.resolveVariableType(v, VAR_TYPE_BGCOLOR);
              });
            } else if (property === "color" || property === "caret-color") {
              this.iterateVarDeps(value, function(v) {
                return _this.resolveVariableType(v, VAR_TYPE_TEXTCOLOR);
              });
            } else if (property.startsWith("border") || property.startsWith("outline")) {
              this.iterateVarDeps(value, function(v) {
                return _this.resolveVariableType(v, VAR_TYPE_BORDERCOLOR);
              });
            } else if (property === "background" || property === "background-image") {
              this.iterateVarDeps(value, function(v) {
                if (_this.isVarType(v, VAR_TYPE_BGCOLOR | VAR_TYPE_BGIMG)) {
                  return;
                }
                var isBgColor = _this.findVarRef(v, function(ref) {
                  return _this.unknownColorVars.has(ref) || _this.isVarType(ref, VAR_TYPE_TEXTCOLOR | VAR_TYPE_BORDERCOLOR);
                }) != null;
                _this.itarateVarRefs(v, function(ref) {
                  if (isBgColor) {
                    _this.resolveVariableType(ref, VAR_TYPE_BGCOLOR);
                  } else {
                    _this.unknownBgVars.add(ref);
                  }
                });
              });
            }
          };
          VariablesStore2.prototype.iterateVarDeps = function(value, iterator) {
            var varDeps = /* @__PURE__ */ new Set();
            iterateVarDependencies(value, function(v) {
              return varDeps.add(v);
            });
            varDeps.forEach(function(v) {
              return iterator(v);
            });
          };
          VariablesStore2.prototype.findVarRef = function(varName, iterator, stack) {
            var e_1, _a;
            if (stack === void 0) {
              stack = /* @__PURE__ */ new Set();
            }
            if (stack.has(varName)) {
              return null;
            }
            stack.add(varName);
            var result = iterator(varName);
            if (result) {
              return varName;
            }
            var refs = this.varRefs.get(varName);
            if (!refs || refs.size === 0) {
              return null;
            }
            try {
              for (var refs_1 = __values(refs), refs_1_1 = refs_1.next(); !refs_1_1.done; refs_1_1 = refs_1.next()) {
                var ref = refs_1_1.value;
                var found = this.findVarRef(ref, iterator, stack);
                if (found) {
                  return found;
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (refs_1_1 && !refs_1_1.done && (_a = refs_1.return))
                  _a.call(refs_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            return null;
          };
          VariablesStore2.prototype.itarateVarRefs = function(varName, iterator) {
            this.findVarRef(varName, function(ref) {
              iterator(ref);
              return false;
            });
          };
          VariablesStore2.prototype.setOnRootVariableChange = function(callback) {
            this.onRootVariableDefined = callback;
          };
          VariablesStore2.prototype.putRootVars = function(styleElement, theme) {
            var e_2, _a;
            var _this = this;
            var sheet = styleElement.sheet;
            if (sheet.cssRules.length > 0) {
              sheet.deleteRule(0);
            }
            var declarations = /* @__PURE__ */ new Map();
            iterateCSSDeclarations(document.documentElement.style, function(property2, value2) {
              if (isVariable(property2)) {
                if (_this.isVarType(property2, VAR_TYPE_BGCOLOR)) {
                  declarations.set(wrapBgColorVariableName(property2), tryModifyBgColor(value2, theme));
                }
                if (_this.isVarType(property2, VAR_TYPE_TEXTCOLOR)) {
                  declarations.set(wrapTextColorVariableName(property2), tryModifyTextColor(value2, theme));
                }
                if (_this.isVarType(property2, VAR_TYPE_BORDERCOLOR)) {
                  declarations.set(wrapBorderColorVariableName(property2), tryModifyBorderColor(value2, theme));
                }
                _this.subscribeForVarTypeChange(property2, _this.onRootVariableDefined);
              }
            });
            var cssLines = [];
            cssLines.push(":root {");
            try {
              for (var declarations_1 = __values(declarations), declarations_1_1 = declarations_1.next(); !declarations_1_1.done; declarations_1_1 = declarations_1.next()) {
                var _b = __read(declarations_1_1.value, 2), property = _b[0], value = _b[1];
                cssLines.push("    ".concat(property, ": ").concat(value, ";"));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (declarations_1_1 && !declarations_1_1.done && (_a = declarations_1.return))
                  _a.call(declarations_1);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
            cssLines.push("}");
            var cssText = cssLines.join("\n");
            sheet.insertRule(cssText);
          };
          return VariablesStore2;
        }();
        var variablesStore = new VariablesStore();
        function getVariableRange(input, searchStart) {
          if (searchStart === void 0) {
            searchStart = 0;
          }
          var start = input.indexOf("var(", searchStart);
          if (start >= 0) {
            var range = getParenthesesRange(input, start + 3);
            if (range) {
              return { start, end: range.end };
            }
            return null;
          }
        }
        function getVariablesMatches(input) {
          var ranges = [];
          var i = 0;
          var range;
          while (range = getVariableRange(input, i)) {
            var start = range.start, end = range.end;
            ranges.push({ start, end, value: input.substring(start, end) });
            i = range.end + 1;
          }
          return ranges;
        }
        function replaceVariablesMatches(input, replacer) {
          var matches = getVariablesMatches(input);
          var matchesCount = matches.length;
          if (matchesCount === 0) {
            return input;
          }
          var inputLength = input.length;
          var replacements = matches.map(function(m) {
            return replacer(m.value);
          });
          var parts = [];
          parts.push(input.substring(0, matches[0].start));
          for (var i = 0; i < matchesCount; i++) {
            parts.push(replacements[i]);
            var start = matches[i].end;
            var end = i < matchesCount - 1 ? matches[i + 1].start : inputLength;
            parts.push(input.substring(start, end));
          }
          return parts.join("");
        }
        function getVariableNameAndFallback(match) {
          var commaIndex = match.indexOf(",");
          var name5;
          var fallback;
          if (commaIndex >= 0) {
            name5 = match.substring(4, commaIndex).trim();
            fallback = match.substring(commaIndex + 1, match.length - 1).trim();
          } else {
            name5 = match.substring(4, match.length - 1).trim();
            fallback = "";
          }
          return { name: name5, fallback };
        }
        function replaceCSSVariablesNames(value, nameReplacer, fallbackReplacer) {
          var matchReplacer = function(match) {
            var _a = getVariableNameAndFallback(match), name5 = _a.name, fallback = _a.fallback;
            var newName = nameReplacer(name5);
            if (!fallback) {
              return "var(".concat(newName, ")");
            }
            var newFallback;
            if (isVarDependant(fallback)) {
              newFallback = replaceCSSVariablesNames(fallback, nameReplacer, fallbackReplacer);
            } else if (fallbackReplacer) {
              newFallback = fallbackReplacer(fallback);
            } else {
              newFallback = fallback;
            }
            return "var(".concat(newName, ", ").concat(newFallback, ")");
          };
          return replaceVariablesMatches(value, matchReplacer);
        }
        function iterateVarDependencies(value, iterator) {
          replaceCSSVariablesNames(value, function(varName) {
            iterator(varName);
            return varName;
          });
        }
        function wrapBgColorVariableName(name5) {
          return "--darkreader-bg".concat(name5);
        }
        function wrapTextColorVariableName(name5) {
          return "--darkreader-text".concat(name5);
        }
        function wrapBorderColorVariableName(name5) {
          return "--darkreader-border".concat(name5);
        }
        function wrapBgImgVariableName(name5) {
          return "--darkreader-bgimg".concat(name5);
        }
        function isVariable(property) {
          return property.startsWith("--");
        }
        function isVarDependant(value) {
          return value.includes("var(");
        }
        function isConstructedColorVar(value) {
          return value.match(/^\s*(rgb|hsl)a?\(/);
        }
        var rawValueRegex = /^\d{1,3}, ?\d{1,3}, ?\d{1,3}$/;
        function parseRawValue(color) {
          if (rawValueRegex.test(color)) {
            var splitted = color.split(",");
            var resultInRGB_1 = "rgb(";
            splitted.forEach(function(number) {
              resultInRGB_1 += "".concat(number.trim(), ", ");
            });
            resultInRGB_1 = resultInRGB_1.substring(0, resultInRGB_1.length - 2);
            resultInRGB_1 += ")";
            return { isRaw: true, color: resultInRGB_1 };
          }
          return { isRaw: false, color };
        }
        function handleRawValue(color, theme, modifyFunction) {
          var _a = parseRawValue(color), isRaw = _a.isRaw, newColor = _a.color;
          var rgb = parseColorWithCache(newColor);
          if (rgb) {
            var outputColor = modifyFunction(rgb, theme);
            if (isRaw) {
              var outputInRGB = parseColorWithCache(outputColor);
              return outputInRGB ? "".concat(outputInRGB.r, ", ").concat(outputInRGB.g, ", ").concat(outputInRGB.b) : outputColor;
            }
            return outputColor;
          }
          return newColor;
        }
        function tryModifyBgColor(color, theme) {
          return handleRawValue(color, theme, modifyBackgroundColor);
        }
        function tryModifyTextColor(color, theme) {
          return handleRawValue(color, theme, modifyForegroundColor);
        }
        function tryModifyBorderColor(color, theme) {
          return handleRawValue(color, theme, modifyBorderColor);
        }
        function insertVarValues(source, varValues, stack) {
          if (stack === void 0) {
            stack = /* @__PURE__ */ new Set();
          }
          var containsUnresolvedVar = false;
          var matchReplacer = function(match) {
            var _a = getVariableNameAndFallback(match), name5 = _a.name, fallback = _a.fallback;
            if (stack.has(name5)) {
              containsUnresolvedVar = true;
              return null;
            }
            stack.add(name5);
            var varValue = varValues.get(name5) || fallback;
            var inserted = null;
            if (varValue) {
              if (isVarDependant(varValue)) {
                inserted = insertVarValues(varValue, varValues, stack);
              } else {
                inserted = varValue;
              }
            }
            if (!inserted) {
              containsUnresolvedVar = true;
              return null;
            }
            return inserted;
          };
          var replaced = replaceVariablesMatches(source, matchReplacer);
          if (containsUnresolvedVar) {
            return null;
          }
          return replaced;
        }
        var overrides = {
          "background-color": {
            customProp: "--darkreader-inline-bgcolor",
            cssProp: "background-color",
            dataAttr: "data-darkreader-inline-bgcolor"
          },
          "background-image": {
            customProp: "--darkreader-inline-bgimage",
            cssProp: "background-image",
            dataAttr: "data-darkreader-inline-bgimage"
          },
          "border-color": {
            customProp: "--darkreader-inline-border",
            cssProp: "border-color",
            dataAttr: "data-darkreader-inline-border"
          },
          "border-bottom-color": {
            customProp: "--darkreader-inline-border-bottom",
            cssProp: "border-bottom-color",
            dataAttr: "data-darkreader-inline-border-bottom"
          },
          "border-left-color": {
            customProp: "--darkreader-inline-border-left",
            cssProp: "border-left-color",
            dataAttr: "data-darkreader-inline-border-left"
          },
          "border-right-color": {
            customProp: "--darkreader-inline-border-right",
            cssProp: "border-right-color",
            dataAttr: "data-darkreader-inline-border-right"
          },
          "border-top-color": {
            customProp: "--darkreader-inline-border-top",
            cssProp: "border-top-color",
            dataAttr: "data-darkreader-inline-border-top"
          },
          "box-shadow": {
            customProp: "--darkreader-inline-boxshadow",
            cssProp: "box-shadow",
            dataAttr: "data-darkreader-inline-boxshadow"
          },
          "color": {
            customProp: "--darkreader-inline-color",
            cssProp: "color",
            dataAttr: "data-darkreader-inline-color"
          },
          "fill": {
            customProp: "--darkreader-inline-fill",
            cssProp: "fill",
            dataAttr: "data-darkreader-inline-fill"
          },
          "stroke": {
            customProp: "--darkreader-inline-stroke",
            cssProp: "stroke",
            dataAttr: "data-darkreader-inline-stroke"
          },
          "outline-color": {
            customProp: "--darkreader-inline-outline",
            cssProp: "outline-color",
            dataAttr: "data-darkreader-inline-outline"
          },
          "stop-color": {
            customProp: "--darkreader-inline-stopcolor",
            cssProp: "stop-color",
            dataAttr: "data-darkreader-inline-stopcolor"
          }
        };
        var overridesList = Object.values(overrides);
        var normalizedPropList = {};
        overridesList.forEach(function(_a) {
          var cssProp = _a.cssProp, customProp = _a.customProp;
          return normalizedPropList[customProp] = cssProp;
        });
        var INLINE_STYLE_ATTRS = ["style", "fill", "stop-color", "stroke", "bgcolor", "color"];
        var INLINE_STYLE_SELECTOR = INLINE_STYLE_ATTRS.map(function(attr) {
          return "[".concat(attr, "]");
        }).join(", ");
        function getInlineOverrideStyle() {
          return overridesList.map(function(_a) {
            var dataAttr = _a.dataAttr, customProp = _a.customProp, cssProp = _a.cssProp;
            return [
              "[".concat(dataAttr, "] {"),
              "  ".concat(cssProp, ": var(").concat(customProp, ") !important;"),
              "}"
            ].join("\n");
          }).join("\n");
        }
        function getInlineStyleElements(root) {
          var results = [];
          if (root instanceof Element && root.matches(INLINE_STYLE_SELECTOR)) {
            results.push(root);
          }
          if (root instanceof Element || isShadowDomSupported && root instanceof ShadowRoot || root instanceof Document) {
            push(results, root.querySelectorAll(INLINE_STYLE_SELECTOR));
          }
          return results;
        }
        var treeObservers = /* @__PURE__ */ new Map();
        var attrObservers = /* @__PURE__ */ new Map();
        function watchForInlineStyles(elementStyleDidChange, shadowRootDiscovered) {
          deepWatchForInlineStyles(document, elementStyleDidChange, shadowRootDiscovered);
          iterateShadowHosts(document.documentElement, function(host) {
            deepWatchForInlineStyles(host.shadowRoot, elementStyleDidChange, shadowRootDiscovered);
          });
        }
        function deepWatchForInlineStyles(root, elementStyleDidChange, shadowRootDiscovered) {
          if (treeObservers.has(root)) {
            treeObservers.get(root).disconnect();
            attrObservers.get(root).disconnect();
          }
          var discoveredNodes = /* @__PURE__ */ new WeakSet();
          function discoverNodes(node) {
            getInlineStyleElements(node).forEach(function(el) {
              if (discoveredNodes.has(el)) {
                return;
              }
              discoveredNodes.add(el);
              elementStyleDidChange(el);
            });
            iterateShadowHosts(node, function(n) {
              if (discoveredNodes.has(node)) {
                return;
              }
              discoveredNodes.add(node);
              shadowRootDiscovered(n.shadowRoot);
              deepWatchForInlineStyles(n.shadowRoot, elementStyleDidChange, shadowRootDiscovered);
            });
          }
          var treeObserver = createOptimizedTreeObserver(root, {
            onMinorMutations: function(_a) {
              var additions = _a.additions;
              additions.forEach(function(added) {
                return discoverNodes(added);
              });
            },
            onHugeMutations: function() {
              discoverNodes(root);
            }
          });
          treeObservers.set(root, treeObserver);
          var attemptCount = 0;
          var start = null;
          var ATTEMPTS_INTERVAL = getDuration({ seconds: 10 });
          var RETRY_TIMEOUT = getDuration({ seconds: 2 });
          var MAX_ATTEMPTS_COUNT = 50;
          var cache = [];
          var timeoutId = null;
          var handleAttributeMutations = throttle(function(mutations) {
            mutations.forEach(function(m) {
              if (INLINE_STYLE_ATTRS.includes(m.attributeName)) {
                elementStyleDidChange(m.target);
              }
            });
          });
          var attrObserver = new MutationObserver(function(mutations) {
            if (timeoutId) {
              cache.push.apply(cache, __spreadArray([], __read(mutations), false));
              return;
            }
            attemptCount++;
            var now = Date.now();
            if (start == null) {
              start = now;
            } else if (attemptCount >= MAX_ATTEMPTS_COUNT) {
              if (now - start < ATTEMPTS_INTERVAL) {
                timeoutId = setTimeout(function() {
                  start = null;
                  attemptCount = 0;
                  timeoutId = null;
                  var attributeCache = cache;
                  cache = [];
                  handleAttributeMutations(attributeCache);
                }, RETRY_TIMEOUT);
                cache.push.apply(cache, __spreadArray([], __read(mutations), false));
                return;
              }
              start = now;
              attemptCount = 1;
            }
            handleAttributeMutations(mutations);
          });
          attrObserver.observe(root, {
            attributes: true,
            attributeFilter: INLINE_STYLE_ATTRS.concat(overridesList.map(function(_a) {
              var dataAttr = _a.dataAttr;
              return dataAttr;
            })),
            subtree: true
          });
          attrObservers.set(root, attrObserver);
        }
        function stopWatchingForInlineStyles() {
          treeObservers.forEach(function(o) {
            return o.disconnect();
          });
          attrObservers.forEach(function(o) {
            return o.disconnect();
          });
          treeObservers.clear();
          attrObservers.clear();
        }
        var inlineStyleCache = /* @__PURE__ */ new WeakMap();
        var filterProps = ["brightness", "contrast", "grayscale", "sepia", "mode"];
        function getInlineStyleCacheKey(el, theme) {
          return INLINE_STYLE_ATTRS.map(function(attr) {
            return "".concat(attr, '="').concat(el.getAttribute(attr), '"');
          }).concat(filterProps.map(function(prop) {
            return "".concat(prop, '="').concat(theme[prop], '"');
          })).join(" ");
        }
        function shouldIgnoreInlineStyle(element, selectors) {
          for (var i = 0, len = selectors.length; i < len; i++) {
            var ingnoredSelector = selectors[i];
            if (element.matches(ingnoredSelector)) {
              return true;
            }
          }
          return false;
        }
        function overrideInlineStyle(element, theme, ignoreInlineSelectors, ignoreImageSelectors) {
          var cacheKey = getInlineStyleCacheKey(element, theme);
          if (cacheKey === inlineStyleCache.get(element)) {
            return;
          }
          var unsetProps = new Set(Object.keys(overrides));
          function setCustomProp(targetCSSProp, modifierCSSProp, cssVal) {
            var isPropertyVariable = targetCSSProp.startsWith("--");
            var _a = isPropertyVariable ? {} : overrides[targetCSSProp], customProp = _a.customProp, dataAttr = _a.dataAttr;
            var mod = getModifiableCSSDeclaration(modifierCSSProp, cssVal, { style: element.style }, variablesStore, ignoreImageSelectors, null);
            if (!mod) {
              return;
            }
            var value2 = mod.value;
            if (typeof value2 === "function") {
              value2 = value2(theme);
            }
            if (isPropertyVariable && typeof value2 === "object") {
              var typedValue = value2;
              typedValue.declarations.forEach(function(_a2) {
                var property = _a2.property, value3 = _a2.value;
                !(value3 instanceof Promise) && element.style.setProperty(property, value3);
              });
            } else {
              element.style.setProperty(customProp, value2);
              if (!element.hasAttribute(dataAttr)) {
                element.setAttribute(dataAttr, "");
              }
              unsetProps.delete(targetCSSProp);
            }
          }
          if (ignoreInlineSelectors.length > 0) {
            if (shouldIgnoreInlineStyle(element, ignoreInlineSelectors)) {
              unsetProps.forEach(function(cssProp) {
                element.removeAttribute(overrides[cssProp].dataAttr);
              });
              return;
            }
          }
          if (element.hasAttribute("bgcolor")) {
            var value = element.getAttribute("bgcolor");
            if (value.match(/^[0-9a-f]{3}$/i) || value.match(/^[0-9a-f]{6}$/i)) {
              value = "#".concat(value);
            }
            setCustomProp("background-color", "background-color", value);
          }
          if (element.hasAttribute("color") && element.rel !== "mask-icon") {
            var value = element.getAttribute("color");
            if (value.match(/^[0-9a-f]{3}$/i) || value.match(/^[0-9a-f]{6}$/i)) {
              value = "#".concat(value);
            }
            setCustomProp("color", "color", value);
          }
          if (element instanceof SVGElement) {
            if (element.hasAttribute("fill")) {
              var SMALL_SVG_LIMIT_1 = 32;
              var value_1 = element.getAttribute("fill");
              if (value_1 !== "none") {
                if (!(element instanceof SVGTextElement)) {
                  var handleSVGElement = function() {
                    var _a = element.getBoundingClientRect(), width = _a.width, height = _a.height;
                    var isBg = width > SMALL_SVG_LIMIT_1 || height > SMALL_SVG_LIMIT_1;
                    setCustomProp("fill", isBg ? "background-color" : "color", value_1);
                  };
                  if (isReadyStateComplete()) {
                    handleSVGElement();
                  } else {
                    addReadyStateCompleteListener(handleSVGElement);
                  }
                } else {
                  setCustomProp("fill", "color", value_1);
                }
              }
            }
            if (element.hasAttribute("stop-color")) {
              setCustomProp("stop-color", "background-color", element.getAttribute("stop-color"));
            }
          }
          if (element.hasAttribute("stroke")) {
            var value = element.getAttribute("stroke");
            setCustomProp("stroke", element instanceof SVGLineElement || element instanceof SVGTextElement ? "border-color" : "color", value);
          }
          element.style && iterateCSSDeclarations(element.style, function(property, value2) {
            if (property === "background-image" && value2.includes("url")) {
              return;
            }
            if (overrides.hasOwnProperty(property) || property.startsWith("--") && !normalizedPropList[property]) {
              setCustomProp(property, property, value2);
            } else {
              var overridenProp = normalizedPropList[property];
              if (overridenProp && (!element.style.getPropertyValue(overridenProp) && !element.hasAttribute(overridenProp))) {
                if (overridenProp === "background-color" && element.hasAttribute("bgcolor")) {
                  return;
                }
                element.style.setProperty(property, "");
              }
            }
          });
          if (element.style && element instanceof SVGTextElement && element.style.fill) {
            setCustomProp("fill", "color", element.style.getPropertyValue("fill"));
          }
          forEach(unsetProps, function(cssProp) {
            element.removeAttribute(overrides[cssProp].dataAttr);
          });
          inlineStyleCache.set(element, getInlineStyleCacheKey(element, theme));
        }
        var metaThemeColorName = "theme-color";
        var metaThemeColorSelector = 'meta[name="'.concat(metaThemeColorName, '"]');
        var srcMetaThemeColor = null;
        var observer = null;
        function changeMetaThemeColor(meta, theme) {
          srcMetaThemeColor = srcMetaThemeColor || meta.content;
          var color = parseColorWithCache(srcMetaThemeColor);
          if (!color) {
            return;
          }
          meta.content = modifyBackgroundColor(color, theme);
        }
        function changeMetaThemeColorWhenAvailable(theme) {
          var meta = document.querySelector(metaThemeColorSelector);
          if (meta) {
            changeMetaThemeColor(meta, theme);
          } else {
            if (observer) {
              observer.disconnect();
            }
            observer = new MutationObserver(function(mutations) {
              loop:
                for (var i = 0; i < mutations.length; i++) {
                  var addedNodes = mutations[i].addedNodes;
                  for (var j = 0; j < addedNodes.length; j++) {
                    var node = addedNodes[j];
                    if (node instanceof HTMLMetaElement && node.name === metaThemeColorName) {
                      observer.disconnect();
                      observer = null;
                      changeMetaThemeColor(node, theme);
                      break loop;
                    }
                  }
                }
            });
            observer.observe(document.head, { childList: true });
          }
        }
        function restoreMetaThemeColor() {
          if (observer) {
            observer.disconnect();
            observer = null;
          }
          var meta = document.querySelector(metaThemeColorSelector);
          if (meta && srcMetaThemeColor) {
            meta.content = srcMetaThemeColor;
          }
        }
        var themeCacheKeys = [
          "mode",
          "brightness",
          "contrast",
          "grayscale",
          "sepia",
          "darkSchemeBackgroundColor",
          "darkSchemeTextColor",
          "lightSchemeBackgroundColor",
          "lightSchemeTextColor"
        ];
        function getThemeKey(theme) {
          var resultKey = "";
          themeCacheKeys.forEach(function(key) {
            resultKey += "".concat(key, ":").concat(theme[key], ";");
          });
          return resultKey;
        }
        var asyncQueue = createAsyncTasksQueue();
        function createStyleSheetModifier() {
          var renderId = 0;
          var rulesTextCache = /* @__PURE__ */ new Set();
          var rulesModCache = /* @__PURE__ */ new Map();
          var varTypeChangeCleaners = /* @__PURE__ */ new Set();
          var prevFilterKey = null;
          var hasNonLoadedLink = false;
          var wasRebuilt = false;
          function shouldRebuildStyle() {
            return hasNonLoadedLink && !wasRebuilt;
          }
          function modifySheet(options) {
            var rules = options.sourceCSSRules;
            var theme = options.theme, ignoreImageAnalysis = options.ignoreImageAnalysis, force = options.force, prepareSheet = options.prepareSheet, isAsyncCancelled = options.isAsyncCancelled;
            var rulesChanged = rulesModCache.size === 0;
            var notFoundCacheKeys = new Set(rulesModCache.keys());
            var themeKey = getThemeKey(theme);
            var themeChanged = themeKey !== prevFilterKey;
            if (hasNonLoadedLink) {
              wasRebuilt = true;
            }
            var modRules = [];
            iterateCSSRules(rules, function(rule) {
              var cssText = rule.cssText;
              var textDiffersFromPrev = false;
              notFoundCacheKeys.delete(cssText);
              if (rule.parentRule instanceof CSSMediaRule) {
                cssText += ";".concat(rule.parentRule.media.mediaText);
              }
              if (!rulesTextCache.has(cssText)) {
                rulesTextCache.add(cssText);
                textDiffersFromPrev = true;
              }
              if (textDiffersFromPrev) {
                rulesChanged = true;
              } else {
                modRules.push(rulesModCache.get(cssText));
                return;
              }
              var modDecs = [];
              rule.style && iterateCSSDeclarations(rule.style, function(property, value) {
                var mod = getModifiableCSSDeclaration(property, value, rule, variablesStore, ignoreImageAnalysis, isAsyncCancelled);
                if (mod) {
                  modDecs.push(mod);
                }
              });
              var modRule = null;
              if (modDecs.length > 0) {
                var parentRule = rule.parentRule;
                modRule = { selector: rule.selectorText, declarations: modDecs, parentRule };
                modRules.push(modRule);
              }
              rulesModCache.set(cssText, modRule);
            }, function() {
              hasNonLoadedLink = true;
            });
            notFoundCacheKeys.forEach(function(key) {
              rulesTextCache.delete(key);
              rulesModCache.delete(key);
            });
            prevFilterKey = themeKey;
            if (!force && !rulesChanged && !themeChanged) {
              return;
            }
            renderId++;
            function setRule(target, index, rule) {
              var selector = rule.selector, declarations = rule.declarations;
              var getDeclarationText = function(dec) {
                var property = dec.property, value = dec.value, important = dec.important, sourceValue = dec.sourceValue;
                return "".concat(property, ": ").concat(value == null ? sourceValue : value).concat(important ? " !important" : "", ";");
              };
              var cssRulesText = "";
              declarations.forEach(function(declarations2) {
                cssRulesText += "".concat(getDeclarationText(declarations2), " ");
              });
              var ruleText = "".concat(selector, " { ").concat(cssRulesText, " }");
              target.insertRule(ruleText, index);
            }
            var asyncDeclarations = /* @__PURE__ */ new Map();
            var varDeclarations = /* @__PURE__ */ new Map();
            var asyncDeclarationCounter = 0;
            var varDeclarationCounter = 0;
            var rootReadyGroup = { rule: null, rules: [], isGroup: true };
            var groupRefs = /* @__PURE__ */ new WeakMap();
            function getGroup(rule) {
              if (rule == null) {
                return rootReadyGroup;
              }
              if (groupRefs.has(rule)) {
                return groupRefs.get(rule);
              }
              var group = { rule, rules: [], isGroup: true };
              groupRefs.set(rule, group);
              var parentGroup = getGroup(rule.parentRule);
              parentGroup.rules.push(group);
              return group;
            }
            varTypeChangeCleaners.forEach(function(clear) {
              return clear();
            });
            varTypeChangeCleaners.clear();
            modRules.filter(function(r) {
              return r;
            }).forEach(function(_a) {
              var selector = _a.selector, declarations = _a.declarations, parentRule = _a.parentRule;
              var group = getGroup(parentRule);
              var readyStyleRule = { selector, declarations: [], isGroup: false };
              var readyDeclarations = readyStyleRule.declarations;
              group.rules.push(readyStyleRule);
              function handleAsyncDeclaration(property, modified, important, sourceValue) {
                var asyncKey = ++asyncDeclarationCounter;
                var asyncDeclaration = { property, value: null, important, asyncKey, sourceValue };
                readyDeclarations.push(asyncDeclaration);
                var currentRenderId = renderId;
                modified.then(function(asyncValue) {
                  if (!asyncValue || isAsyncCancelled() || currentRenderId !== renderId) {
                    return;
                  }
                  asyncDeclaration.value = asyncValue;
                  asyncQueue.add(function() {
                    if (isAsyncCancelled() || currentRenderId !== renderId) {
                      return;
                    }
                    rebuildAsyncRule(asyncKey);
                  });
                });
              }
              function handleVarDeclarations(property, modified, important, sourceValue) {
                var _a2 = modified, varDecs = _a2.declarations, onTypeChange = _a2.onTypeChange;
                var varKey = ++varDeclarationCounter;
                var currentRenderId = renderId;
                var initialIndex = readyDeclarations.length;
                var oldDecs = [];
                if (varDecs.length === 0) {
                  var tempDec = { property, value: sourceValue, important, sourceValue, varKey };
                  readyDeclarations.push(tempDec);
                  oldDecs = [tempDec];
                }
                varDecs.forEach(function(mod) {
                  if (mod.value instanceof Promise) {
                    handleAsyncDeclaration(mod.property, mod.value, important, sourceValue);
                  } else {
                    var readyDec = { property: mod.property, value: mod.value, important, sourceValue, varKey };
                    readyDeclarations.push(readyDec);
                    oldDecs.push(readyDec);
                  }
                });
                onTypeChange.addListener(function(newDecs) {
                  if (isAsyncCancelled() || currentRenderId !== renderId) {
                    return;
                  }
                  var readyVarDecs = newDecs.map(function(mod) {
                    return { property: mod.property, value: mod.value, important, sourceValue, varKey };
                  });
                  var index = readyDeclarations.indexOf(oldDecs[0], initialIndex);
                  readyDeclarations.splice.apply(readyDeclarations, __spreadArray([index, oldDecs.length], __read(readyVarDecs), false));
                  oldDecs = readyVarDecs;
                  rebuildVarRule(varKey);
                });
                varTypeChangeCleaners.add(function() {
                  return onTypeChange.removeListeners();
                });
              }
              declarations.forEach(function(_a2) {
                var property = _a2.property, value = _a2.value, important = _a2.important, sourceValue = _a2.sourceValue;
                if (typeof value === "function") {
                  var modified = value(theme);
                  if (modified instanceof Promise) {
                    handleAsyncDeclaration(property, modified, important, sourceValue);
                  } else if (property.startsWith("--")) {
                    handleVarDeclarations(property, modified, important, sourceValue);
                  } else {
                    readyDeclarations.push({ property, value: modified, important, sourceValue });
                  }
                } else {
                  readyDeclarations.push({ property, value, important, sourceValue });
                }
              });
            });
            var sheet = prepareSheet();
            function buildStyleSheet() {
              function createTarget(group, parent) {
                var rule = group.rule;
                if (rule instanceof CSSMediaRule) {
                  var media = rule.media;
                  var index = parent.cssRules.length;
                  parent.insertRule("@media ".concat(media.mediaText, " {}"), index);
                  return parent.cssRules[index];
                }
                return parent;
              }
              function iterateReadyRules(group, target, styleIterator) {
                group.rules.forEach(function(r) {
                  if (r.isGroup) {
                    var t = createTarget(r, target);
                    iterateReadyRules(r, t, styleIterator);
                  } else {
                    styleIterator(r, target);
                  }
                });
              }
              iterateReadyRules(rootReadyGroup, sheet, function(rule, target) {
                var index = target.cssRules.length;
                rule.declarations.forEach(function(_a) {
                  var asyncKey = _a.asyncKey, varKey = _a.varKey;
                  if (asyncKey != null) {
                    asyncDeclarations.set(asyncKey, { rule, target, index });
                  }
                  if (varKey != null) {
                    varDeclarations.set(varKey, { rule, target, index });
                  }
                });
                setRule(target, index, rule);
              });
            }
            function rebuildAsyncRule(key) {
              var _a = asyncDeclarations.get(key), rule = _a.rule, target = _a.target, index = _a.index;
              target.deleteRule(index);
              setRule(target, index, rule);
              asyncDeclarations.delete(key);
            }
            function rebuildVarRule(key) {
              var _a = varDeclarations.get(key), rule = _a.rule, target = _a.target, index = _a.index;
              target.deleteRule(index);
              setRule(target, index, rule);
            }
            buildStyleSheet();
          }
          return { modifySheet, shouldRebuildStyle };
        }
        var STYLE_SELECTOR = 'style, link[rel*="stylesheet" i]:not([disabled])';
        function isFontsGoogleApiStyle(element) {
          if (!element.href) {
            return false;
          }
          try {
            var elementURL = new URL(element.href);
            return elementURL.hostname === "fonts.googleapis.com";
          } catch (err) {
            logInfo("Couldn't construct ".concat(element.href, " as URL"));
            return false;
          }
        }
        function shouldManageStyle(element) {
          return (element instanceof HTMLStyleElement || element instanceof SVGStyleElement || element instanceof HTMLLinkElement && element.rel && element.rel.toLowerCase().includes("stylesheet") && element.href && !element.disabled && (isFirefox ? !element.href.startsWith("moz-extension://") : true) && !isFontsGoogleApiStyle(element)) && !element.classList.contains("darkreader") && element.media.toLowerCase() !== "print" && !element.classList.contains("stylus");
        }
        function getManageableStyles(node, results, deep) {
          if (results === void 0) {
            results = [];
          }
          if (deep === void 0) {
            deep = true;
          }
          if (shouldManageStyle(node)) {
            results.push(node);
          } else if (node instanceof Element || isShadowDomSupported && node instanceof ShadowRoot || node === document) {
            forEach(node.querySelectorAll(STYLE_SELECTOR), function(style) {
              return getManageableStyles(style, results, false);
            });
            if (deep) {
              iterateShadowHosts(node, function(host) {
                return getManageableStyles(host.shadowRoot, results, false);
              });
            }
          }
          return results;
        }
        var syncStyleSet = /* @__PURE__ */ new WeakSet();
        var corsStyleSet = /* @__PURE__ */ new WeakSet();
        var canOptimizeUsingProxy$1 = false;
        document.addEventListener("__darkreader__inlineScriptsAllowed", function() {
          canOptimizeUsingProxy$1 = true;
        });
        var loadingLinkCounter = 0;
        var rejectorsForLoadingLinks = /* @__PURE__ */ new Map();
        function cleanLoadingLinks() {
          rejectorsForLoadingLinks.clear();
        }
        function manageStyle(element, _a) {
          var update2 = _a.update, loadingStart = _a.loadingStart, loadingEnd = _a.loadingEnd;
          var prevStyles = [];
          var next = element;
          while ((next = next.nextElementSibling) && next.matches(".darkreader")) {
            prevStyles.push(next);
          }
          var corsCopy = prevStyles.find(function(el) {
            return el.matches(".darkreader--cors") && !corsStyleSet.has(el);
          }) || null;
          var syncStyle = prevStyles.find(function(el) {
            return el.matches(".darkreader--sync") && !syncStyleSet.has(el);
          }) || null;
          var corsCopyPositionWatcher = null;
          var syncStylePositionWatcher = null;
          var cancelAsyncOperations = false;
          var isOverrideEmpty = true;
          var sheetModifier = createStyleSheetModifier();
          var observer2 = new MutationObserver(function() {
            update2();
          });
          var observerOptions = { attributes: true, childList: true, subtree: true, characterData: true };
          function containsCSSImport() {
            return element instanceof HTMLStyleElement && element.textContent.trim().match(cssImportRegex);
          }
          function hasImports(cssRules, checkCrossOrigin) {
            var result = false;
            if (cssRules) {
              var rule = void 0;
              cssRulesLoop:
                for (var i = 0, len = cssRules.length; i < len; i++) {
                  rule = cssRules[i];
                  if (rule.href) {
                    if (checkCrossOrigin) {
                      if (rule.href.startsWith("http") && !rule.href.startsWith(location.origin)) {
                        result = true;
                        break cssRulesLoop;
                      }
                    } else {
                      result = true;
                      break cssRulesLoop;
                    }
                  }
                }
            }
            return result;
          }
          function getRulesSync() {
            if (corsCopy) {
              return corsCopy.sheet.cssRules;
            }
            if (containsCSSImport()) {
              return null;
            }
            var cssRules = safeGetSheetRules();
            if (element instanceof HTMLLinkElement && !isRelativeHrefOnAbsolutePath(element.href) && hasImports(cssRules, false)) {
              return null;
            }
            if (hasImports(cssRules, true)) {
              return null;
            }
            return cssRules;
          }
          function insertStyle() {
            if (corsCopy) {
              if (element.nextSibling !== corsCopy) {
                element.parentNode.insertBefore(corsCopy, element.nextSibling);
              }
              if (corsCopy.nextSibling !== syncStyle) {
                element.parentNode.insertBefore(syncStyle, corsCopy.nextSibling);
              }
            } else if (element.nextSibling !== syncStyle) {
              element.parentNode.insertBefore(syncStyle, element.nextSibling);
            }
          }
          function createSyncStyle() {
            syncStyle = element instanceof SVGStyleElement ? document.createElementNS("http://www.w3.org/2000/svg", "style") : document.createElement("style");
            syncStyle.classList.add("darkreader");
            syncStyle.classList.add("darkreader--sync");
            syncStyle.media = "screen";
            if (element.title) {
              syncStyle.title = element.title;
            }
            syncStyleSet.add(syncStyle);
          }
          var isLoadingRules = false;
          var wasLoadingError = false;
          var loadingLinkId = ++loadingLinkCounter;
          function getRulesAsync() {
            return __awaiter(this, void 0, void 0, function() {
              var cssText, cssBasePath, _a2, cssRules, accessError, fullCSSText;
              var _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    if (!(element instanceof HTMLLinkElement))
                      return [3, 7];
                    _a2 = __read(getRulesOrError(), 2), cssRules = _a2[0], accessError = _a2[1];
                    if (!(!cssRules && !accessError && !isSafari || isSafari && !element.sheet || isStillLoadingError(accessError)))
                      return [3, 5];
                    _c.label = 1;
                  case 1:
                    _c.trys.push([1, 3, , 4]);
                    return [4, linkLoading(element, loadingLinkId)];
                  case 2:
                    _c.sent();
                    return [3, 4];
                  case 3:
                    _c.sent();
                    wasLoadingError = true;
                    return [3, 4];
                  case 4:
                    if (cancelAsyncOperations) {
                      return [2, null];
                    }
                    _b = __read(getRulesOrError(), 2), cssRules = _b[0], accessError = _b[1];
                    _c.label = 5;
                  case 5:
                    if (cssRules) {
                      if (!hasImports(cssRules, false)) {
                        return [2, cssRules];
                      }
                    }
                    return [4, loadText(element.href)];
                  case 6:
                    cssText = _c.sent();
                    cssBasePath = getCSSBaseBath(element.href);
                    if (cancelAsyncOperations) {
                      return [2, null];
                    }
                    return [3, 8];
                  case 7:
                    if (containsCSSImport()) {
                      cssText = element.textContent.trim();
                      cssBasePath = getCSSBaseBath(location.href);
                    } else {
                      return [2, null];
                    }
                    _c.label = 8;
                  case 8:
                    if (!cssText)
                      return [3, 13];
                    _c.label = 9;
                  case 9:
                    _c.trys.push([9, 11, , 12]);
                    return [4, replaceCSSImports(cssText, cssBasePath)];
                  case 10:
                    fullCSSText = _c.sent();
                    corsCopy = createCORSCopy(element, fullCSSText);
                    return [3, 12];
                  case 11:
                    _c.sent();
                    return [3, 12];
                  case 12:
                    if (corsCopy) {
                      corsCopyPositionWatcher = watchForNodePosition(corsCopy, "prev-sibling");
                      return [2, corsCopy.sheet.cssRules];
                    }
                    _c.label = 13;
                  case 13:
                    return [2, null];
                }
              });
            });
          }
          function details(options) {
            var rules = getRulesSync();
            if (!rules) {
              if (options.secondRound) {
                return null;
              }
              if (isLoadingRules || wasLoadingError) {
                return null;
              }
              isLoadingRules = true;
              loadingStart();
              getRulesAsync().then(function(results) {
                isLoadingRules = false;
                loadingEnd();
                if (results) {
                  update2();
                }
              }).catch(function(err) {
                isLoadingRules = false;
                loadingEnd();
              });
              return null;
            }
            return { rules };
          }
          var forceRenderStyle = false;
          function render(theme, ignoreImageAnalysis) {
            var rules = getRulesSync();
            if (!rules) {
              return;
            }
            cancelAsyncOperations = false;
            function removeCSSRulesFromSheet(sheet) {
              for (var i = sheet.cssRules.length - 1; i >= 0; i--) {
                sheet.deleteRule(i);
              }
            }
            function prepareOverridesSheet() {
              if (!syncStyle) {
                createSyncStyle();
              }
              syncStylePositionWatcher && syncStylePositionWatcher.stop();
              insertStyle();
              if (syncStyle.sheet == null) {
                syncStyle.textContent = "";
              }
              var sheet = syncStyle.sheet;
              removeCSSRulesFromSheet(sheet);
              if (syncStylePositionWatcher) {
                syncStylePositionWatcher.run();
              } else {
                syncStylePositionWatcher = watchForNodePosition(syncStyle, "prev-sibling", function() {
                  forceRenderStyle = true;
                  buildOverrides();
                });
              }
              return syncStyle.sheet;
            }
            function buildOverrides() {
              var force = forceRenderStyle;
              forceRenderStyle = false;
              sheetModifier.modifySheet({
                prepareSheet: prepareOverridesSheet,
                sourceCSSRules: rules,
                theme,
                ignoreImageAnalysis,
                force,
                isAsyncCancelled: function() {
                  return cancelAsyncOperations;
                }
              });
              isOverrideEmpty = syncStyle.sheet.cssRules.length === 0;
              if (sheetModifier.shouldRebuildStyle()) {
                addReadyStateCompleteListener(function() {
                  return update2();
                });
              }
            }
            buildOverrides();
          }
          function getRulesOrError() {
            try {
              if (element.sheet == null) {
                return [null, null];
              }
              return [element.sheet.cssRules, null];
            } catch (err) {
              return [null, err];
            }
          }
          function isStillLoadingError(error) {
            return error && error.message && error.message.includes("loading");
          }
          function safeGetSheetRules() {
            var _a2 = __read(getRulesOrError(), 2), cssRules = _a2[0], err = _a2[1];
            if (err) {
              return null;
            }
            return cssRules;
          }
          function watchForSheetChanges() {
            watchForSheetChangesUsingProxy();
            if (!isThunderbird && !(canOptimizeUsingProxy$1 && element.sheet)) {
              watchForSheetChangesUsingRAF();
            }
          }
          var rulesChangeKey = null;
          var rulesCheckFrameId = null;
          function getRulesChangeKey() {
            var rules = safeGetSheetRules();
            return rules ? rules.length : null;
          }
          function didRulesKeyChange() {
            return getRulesChangeKey() !== rulesChangeKey;
          }
          function watchForSheetChangesUsingRAF() {
            rulesChangeKey = getRulesChangeKey();
            stopWatchingForSheetChangesUsingRAF();
            var checkForUpdate = function() {
              if (didRulesKeyChange()) {
                rulesChangeKey = getRulesChangeKey();
                update2();
              }
              if (canOptimizeUsingProxy$1 && element.sheet) {
                stopWatchingForSheetChangesUsingRAF();
                return;
              }
              rulesCheckFrameId = requestAnimationFrame(checkForUpdate);
            };
            checkForUpdate();
          }
          function stopWatchingForSheetChangesUsingRAF() {
            cancelAnimationFrame(rulesCheckFrameId);
          }
          var areSheetChangesPending = false;
          function onSheetChange() {
            canOptimizeUsingProxy$1 = true;
            stopWatchingForSheetChangesUsingRAF();
            if (areSheetChangesPending) {
              return;
            }
            function handleSheetChanges() {
              areSheetChangesPending = false;
              if (cancelAsyncOperations) {
                return;
              }
              update2();
            }
            areSheetChangesPending = true;
            if (typeof queueMicrotask === "function") {
              queueMicrotask(handleSheetChanges);
            } else {
              requestAnimationFrame(handleSheetChanges);
            }
          }
          function watchForSheetChangesUsingProxy() {
            element.addEventListener("__darkreader__updateSheet", onSheetChange);
          }
          function stopWatchingForSheetChangesUsingProxy() {
            element.removeEventListener("__darkreader__updateSheet", onSheetChange);
          }
          function stopWatchingForSheetChanges() {
            stopWatchingForSheetChangesUsingProxy();
            stopWatchingForSheetChangesUsingRAF();
          }
          function pause() {
            observer2.disconnect();
            cancelAsyncOperations = true;
            corsCopyPositionWatcher && corsCopyPositionWatcher.stop();
            syncStylePositionWatcher && syncStylePositionWatcher.stop();
            stopWatchingForSheetChanges();
          }
          function destroy() {
            pause();
            removeNode(corsCopy);
            removeNode(syncStyle);
            loadingEnd();
            if (rejectorsForLoadingLinks.has(loadingLinkId)) {
              var reject = rejectorsForLoadingLinks.get(loadingLinkId);
              rejectorsForLoadingLinks.delete(loadingLinkId);
              reject && reject();
            }
          }
          function watch() {
            observer2.observe(element, observerOptions);
            if (element instanceof HTMLStyleElement) {
              watchForSheetChanges();
            }
          }
          var maxMoveCount = 10;
          var moveCount = 0;
          function restore() {
            if (!syncStyle) {
              return;
            }
            moveCount++;
            if (moveCount > maxMoveCount) {
              return;
            }
            insertStyle();
            corsCopyPositionWatcher && corsCopyPositionWatcher.skip();
            syncStylePositionWatcher && syncStylePositionWatcher.skip();
            if (!isOverrideEmpty) {
              forceRenderStyle = true;
              update2();
            }
          }
          return {
            details,
            render,
            pause,
            destroy,
            watch,
            restore
          };
        }
        function linkLoading(link, loadingId) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, new Promise(function(resolve, reject) {
                var cleanUp = function() {
                  link.removeEventListener("load", onLoad);
                  link.removeEventListener("error", onError);
                  rejectorsForLoadingLinks.delete(loadingId);
                };
                var onLoad = function() {
                  cleanUp();
                  resolve();
                };
                var onError = function() {
                  cleanUp();
                  reject("Linkelement ".concat(loadingId, " couldn't be loaded. ").concat(link.href));
                };
                rejectorsForLoadingLinks.set(loadingId, function() {
                  cleanUp();
                  reject();
                });
                link.addEventListener("load", onLoad);
                link.addEventListener("error", onError);
                if (!link.href) {
                  onError();
                }
              })];
            });
          });
        }
        function getCSSImportURL(importDeclaration) {
          return getCSSURLValue(importDeclaration.substring(7).trim().replace(/;$/, "").replace(/screen$/, ""));
        }
        function loadText(url) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!url.startsWith("data:"))
                    return [3, 3];
                  return [4, fetch(url)];
                case 1:
                  return [4, _a.sent().text()];
                case 2:
                  return [2, _a.sent()];
                case 3:
                  return [4, bgFetch({ url, responseType: "text", mimeType: "text/css", origin: window.location.origin })];
                case 4:
                  return [2, _a.sent()];
              }
            });
          });
        }
        function replaceCSSImports(cssText, basePath, cache) {
          if (cache === void 0) {
            cache = /* @__PURE__ */ new Map();
          }
          return __awaiter(this, void 0, void 0, function() {
            var importMatches, importMatches_1, importMatches_1_1, match, importURL, absoluteURL, importedCSS, e_1_1;
            var e_1, _a;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  cssText = removeCSSComments(cssText);
                  cssText = replaceCSSFontFace(cssText);
                  cssText = replaceCSSRelativeURLsWithAbsolute(cssText, basePath);
                  importMatches = getMatches(cssImportRegex, cssText);
                  _b.label = 1;
                case 1:
                  _b.trys.push([1, 10, 11, 12]);
                  importMatches_1 = __values(importMatches), importMatches_1_1 = importMatches_1.next();
                  _b.label = 2;
                case 2:
                  if (!!importMatches_1_1.done)
                    return [3, 9];
                  match = importMatches_1_1.value;
                  importURL = getCSSImportURL(match);
                  absoluteURL = getAbsoluteURL(basePath, importURL);
                  importedCSS = void 0;
                  if (!cache.has(absoluteURL))
                    return [3, 3];
                  importedCSS = cache.get(absoluteURL);
                  return [3, 7];
                case 3:
                  _b.trys.push([3, 6, , 7]);
                  return [4, loadText(absoluteURL)];
                case 4:
                  importedCSS = _b.sent();
                  cache.set(absoluteURL, importedCSS);
                  return [4, replaceCSSImports(importedCSS, getCSSBaseBath(absoluteURL), cache)];
                case 5:
                  importedCSS = _b.sent();
                  return [3, 7];
                case 6:
                  _b.sent();
                  importedCSS = "";
                  return [3, 7];
                case 7:
                  cssText = cssText.split(match).join(importedCSS);
                  _b.label = 8;
                case 8:
                  importMatches_1_1 = importMatches_1.next();
                  return [3, 2];
                case 9:
                  return [3, 12];
                case 10:
                  e_1_1 = _b.sent();
                  e_1 = { error: e_1_1 };
                  return [3, 12];
                case 11:
                  try {
                    if (importMatches_1_1 && !importMatches_1_1.done && (_a = importMatches_1.return))
                      _a.call(importMatches_1);
                  } finally {
                    if (e_1)
                      throw e_1.error;
                  }
                  return [7];
                case 12:
                  cssText = cssText.trim();
                  return [2, cssText];
              }
            });
          });
        }
        function createCORSCopy(srcElement, cssText) {
          if (!cssText) {
            return null;
          }
          var cors = document.createElement("style");
          cors.classList.add("darkreader");
          cors.classList.add("darkreader--cors");
          cors.media = "screen";
          cors.textContent = cssText;
          srcElement.parentNode.insertBefore(cors, srcElement.nextSibling);
          cors.sheet.disabled = true;
          corsStyleSet.add(cors);
          return cors;
        }
        var observers = [];
        var observedRoots;
        var undefinedGroups = /* @__PURE__ */ new Map();
        var elementsDefinitionCallback;
        function collectUndefinedElements(root) {
          if (!isDefinedSelectorSupported) {
            return;
          }
          forEach(root.querySelectorAll(":not(:defined)"), function(el) {
            var tag = el.tagName.toLowerCase();
            if (!tag.includes("-")) {
              var extendedTag = el.getAttribute("is");
              if (extendedTag) {
                tag = extendedTag;
              } else {
                return;
              }
            }
            if (!undefinedGroups.has(tag)) {
              undefinedGroups.set(tag, /* @__PURE__ */ new Set());
              customElementsWhenDefined(tag).then(function() {
                if (elementsDefinitionCallback) {
                  var elements = undefinedGroups.get(tag);
                  undefinedGroups.delete(tag);
                  elementsDefinitionCallback(Array.from(elements));
                }
              });
            }
            undefinedGroups.get(tag).add(el);
          });
        }
        var canOptimizeUsingProxy = false;
        document.addEventListener("__darkreader__inlineScriptsAllowed", function() {
          canOptimizeUsingProxy = true;
        });
        var resolvers = /* @__PURE__ */ new Map();
        function handleIsDefined(e) {
          canOptimizeUsingProxy = true;
          if (resolvers.has(e.detail.tag)) {
            var resolve = resolvers.get(e.detail.tag);
            resolve();
          }
        }
        function customElementsWhenDefined(tag) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, new Promise(function(resolve) {
                if (window.customElements && typeof customElements.whenDefined === "function") {
                  customElements.whenDefined(tag).then(function() {
                    return resolve();
                  });
                } else if (canOptimizeUsingProxy) {
                  resolvers.set(tag, resolve);
                  document.dispatchEvent(new CustomEvent("__darkreader__addUndefinedResolver", { detail: { tag } }));
                } else {
                  var checkIfDefined_1 = function() {
                    var elements = undefinedGroups.get(tag);
                    if (elements && elements.size > 0) {
                      if (elements.values().next().value.matches(":defined")) {
                        resolve();
                      } else {
                        requestAnimationFrame(checkIfDefined_1);
                      }
                    }
                  };
                  requestAnimationFrame(checkIfDefined_1);
                }
              })];
            });
          });
        }
        function watchWhenCustomElementsDefined(callback) {
          elementsDefinitionCallback = callback;
        }
        function unsubscribeFromDefineCustomElements() {
          elementsDefinitionCallback = null;
          undefinedGroups.clear();
          document.removeEventListener("__darkreader__isDefined", handleIsDefined);
        }
        function watchForStyleChanges(currentStyles, update2, shadowRootDiscovered) {
          stopWatchingForStyleChanges();
          var prevStyles = new Set(currentStyles);
          var prevStyleSiblings = /* @__PURE__ */ new WeakMap();
          var nextStyleSiblings = /* @__PURE__ */ new WeakMap();
          function saveStylePosition(style) {
            prevStyleSiblings.set(style, style.previousElementSibling);
            nextStyleSiblings.set(style, style.nextElementSibling);
          }
          function forgetStylePosition(style) {
            prevStyleSiblings.delete(style);
            nextStyleSiblings.delete(style);
          }
          function didStylePositionChange(style) {
            return style.previousElementSibling !== prevStyleSiblings.get(style) || style.nextElementSibling !== nextStyleSiblings.get(style);
          }
          currentStyles.forEach(saveStylePosition);
          function handleStyleOperations(operations) {
            var createdStyles = operations.createdStyles, removedStyles = operations.removedStyles, movedStyles = operations.movedStyles;
            createdStyles.forEach(function(s) {
              return saveStylePosition(s);
            });
            movedStyles.forEach(function(s) {
              return saveStylePosition(s);
            });
            removedStyles.forEach(function(s) {
              return forgetStylePosition(s);
            });
            createdStyles.forEach(function(s) {
              return prevStyles.add(s);
            });
            removedStyles.forEach(function(s) {
              return prevStyles.delete(s);
            });
            if (createdStyles.size + removedStyles.size + movedStyles.size > 0) {
              update2({
                created: Array.from(createdStyles),
                removed: Array.from(removedStyles),
                moved: Array.from(movedStyles),
                updated: []
              });
            }
          }
          function handleMinorTreeMutations(_a) {
            var additions = _a.additions, moves = _a.moves, deletions = _a.deletions;
            var createdStyles = /* @__PURE__ */ new Set();
            var removedStyles = /* @__PURE__ */ new Set();
            var movedStyles = /* @__PURE__ */ new Set();
            additions.forEach(function(node) {
              return getManageableStyles(node).forEach(function(style) {
                return createdStyles.add(style);
              });
            });
            deletions.forEach(function(node) {
              return getManageableStyles(node).forEach(function(style) {
                return removedStyles.add(style);
              });
            });
            moves.forEach(function(node) {
              return getManageableStyles(node).forEach(function(style) {
                return movedStyles.add(style);
              });
            });
            handleStyleOperations({ createdStyles, removedStyles, movedStyles });
            additions.forEach(function(n) {
              iterateShadowHosts(n, subscribeForShadowRootChanges);
              collectUndefinedElements(n);
            });
          }
          function handleHugeTreeMutations(root) {
            var styles = new Set(getManageableStyles(root));
            var createdStyles = /* @__PURE__ */ new Set();
            var removedStyles = /* @__PURE__ */ new Set();
            var movedStyles = /* @__PURE__ */ new Set();
            styles.forEach(function(s) {
              if (!prevStyles.has(s)) {
                createdStyles.add(s);
              }
            });
            prevStyles.forEach(function(s) {
              if (!styles.has(s)) {
                removedStyles.add(s);
              }
            });
            styles.forEach(function(s) {
              if (!createdStyles.has(s) && !removedStyles.has(s) && didStylePositionChange(s)) {
                movedStyles.add(s);
              }
            });
            handleStyleOperations({ createdStyles, removedStyles, movedStyles });
            iterateShadowHosts(root, subscribeForShadowRootChanges);
            collectUndefinedElements(root);
          }
          function handleAttributeMutations(mutations) {
            var updatedStyles = /* @__PURE__ */ new Set();
            var removedStyles = /* @__PURE__ */ new Set();
            mutations.forEach(function(m) {
              var target = m.target;
              if (target.isConnected) {
                if (shouldManageStyle(target)) {
                  updatedStyles.add(target);
                } else if (target instanceof HTMLLinkElement && target.disabled) {
                  removedStyles.add(target);
                }
              }
            });
            if (updatedStyles.size + removedStyles.size > 0) {
              update2({
                updated: Array.from(updatedStyles),
                created: [],
                removed: Array.from(removedStyles),
                moved: []
              });
            }
          }
          function observe(root) {
            var treeObserver = createOptimizedTreeObserver(root, {
              onMinorMutations: handleMinorTreeMutations,
              onHugeMutations: handleHugeTreeMutations
            });
            var attrObserver = new MutationObserver(handleAttributeMutations);
            attrObserver.observe(root, { attributes: true, attributeFilter: ["rel", "disabled", "media", "href"], subtree: true });
            observers.push(treeObserver, attrObserver);
            observedRoots.add(root);
          }
          function subscribeForShadowRootChanges(node) {
            var shadowRoot = node.shadowRoot;
            if (shadowRoot == null || observedRoots.has(shadowRoot)) {
              return;
            }
            observe(shadowRoot);
            shadowRootDiscovered(shadowRoot);
          }
          observe(document);
          iterateShadowHosts(document.documentElement, subscribeForShadowRootChanges);
          watchWhenCustomElementsDefined(function(hosts) {
            var newStyles = [];
            hosts.forEach(function(host) {
              return push(newStyles, getManageableStyles(host.shadowRoot));
            });
            update2({ created: newStyles, updated: [], removed: [], moved: [] });
            hosts.forEach(function(host) {
              var shadowRoot = host.shadowRoot;
              if (shadowRoot == null) {
                return;
              }
              subscribeForShadowRootChanges(host);
              iterateShadowHosts(shadowRoot, subscribeForShadowRootChanges);
              collectUndefinedElements(shadowRoot);
            });
          });
          document.addEventListener("__darkreader__isDefined", handleIsDefined);
          collectUndefinedElements(document);
        }
        function resetObservers() {
          observers.forEach(function(o) {
            return o.disconnect();
          });
          observers.splice(0, observers.length);
          observedRoots = /* @__PURE__ */ new WeakSet();
        }
        function stopWatchingForStyleChanges() {
          resetObservers();
          unsubscribeFromDefineCustomElements();
        }
        function hexify(number) {
          return (number < 16 ? "0" : "") + number.toString(16);
        }
        function generateUID() {
          if ("randomUUID" in crypto) {
            var uuid = crypto.randomUUID();
            return uuid.substring(0, 8) + uuid.substring(9, 13) + uuid.substring(14, 18) + uuid.substring(19, 23) + uuid.substring(24);
          }
          return Array.from(crypto.getRandomValues(new Uint8Array(16))).map(function(x) {
            return hexify(x);
          }).join("");
        }
        var adoptedStyleOverrides = /* @__PURE__ */ new WeakMap();
        var overrideList = /* @__PURE__ */ new WeakSet();
        function createAdoptedStyleSheetOverride(node) {
          var cancelAsyncOperations = false;
          function injectSheet(sheet, override) {
            var newSheets = __spreadArray([], __read(node.adoptedStyleSheets), false);
            var sheetIndex = newSheets.indexOf(sheet);
            var existingIndex = newSheets.indexOf(override);
            if (sheetIndex === existingIndex - 1) {
              return;
            }
            if (existingIndex >= 0) {
              newSheets.splice(existingIndex, 1);
            }
            newSheets.splice(sheetIndex + 1, 0, override);
            node.adoptedStyleSheets = newSheets;
          }
          function destroy() {
            cancelAsyncOperations = true;
            var newSheets = __spreadArray([], __read(node.adoptedStyleSheets), false);
            node.adoptedStyleSheets.forEach(function(adoptedStyleSheet) {
              if (overrideList.has(adoptedStyleSheet)) {
                var existingIndex = newSheets.indexOf(adoptedStyleSheet);
                if (existingIndex >= 0) {
                  newSheets.splice(existingIndex, 1);
                }
                adoptedStyleOverrides.delete(adoptedStyleSheet);
                overrideList.delete(adoptedStyleSheet);
              }
            });
            node.adoptedStyleSheets = newSheets;
          }
          function render(theme, ignoreImageAnalysis) {
            node.adoptedStyleSheets.forEach(function(sheet) {
              if (overrideList.has(sheet)) {
                return;
              }
              var rules = sheet.rules;
              var override = new CSSStyleSheet();
              function prepareOverridesSheet() {
                for (var i = override.cssRules.length - 1; i >= 0; i--) {
                  override.deleteRule(i);
                }
                injectSheet(sheet, override);
                adoptedStyleOverrides.set(sheet, override);
                overrideList.add(override);
                return override;
              }
              var sheetModifier = createStyleSheetModifier();
              sheetModifier.modifySheet({
                prepareSheet: prepareOverridesSheet,
                sourceCSSRules: rules,
                theme,
                ignoreImageAnalysis,
                force: false,
                isAsyncCancelled: function() {
                  return cancelAsyncOperations;
                }
              });
            });
          }
          return {
            render,
            destroy
          };
        }
        function injectProxy(enableStyleSheetsProxy) {
          document.dispatchEvent(new CustomEvent("__darkreader__inlineScriptsAllowed"));
          var addRuleDescriptor = Object.getOwnPropertyDescriptor(CSSStyleSheet.prototype, "addRule");
          var insertRuleDescriptor = Object.getOwnPropertyDescriptor(CSSStyleSheet.prototype, "insertRule");
          var deleteRuleDescriptor = Object.getOwnPropertyDescriptor(CSSStyleSheet.prototype, "deleteRule");
          var removeRuleDescriptor = Object.getOwnPropertyDescriptor(CSSStyleSheet.prototype, "removeRule");
          var documentStyleSheetsDescriptor = enableStyleSheetsProxy ? Object.getOwnPropertyDescriptor(Document.prototype, "styleSheets") : null;
          var shouldWrapHTMLElement = [
            "baidu.com",
            "baike.baidu.com",
            "ditu.baidu.com",
            "map.baidu.com",
            "maps.baidu.com",
            "haokan.baidu.com",
            "pan.baidu.com",
            "passport.baidu.com",
            "tieba.baidu.com",
            "www.baidu.com"
          ].includes(location.hostname);
          var getElementsByTagNameDescriptor = shouldWrapHTMLElement ? Object.getOwnPropertyDescriptor(Element.prototype, "getElementsByTagName") : null;
          var cleanUp = function() {
            Object.defineProperty(CSSStyleSheet.prototype, "addRule", addRuleDescriptor);
            Object.defineProperty(CSSStyleSheet.prototype, "insertRule", insertRuleDescriptor);
            Object.defineProperty(CSSStyleSheet.prototype, "deleteRule", deleteRuleDescriptor);
            Object.defineProperty(CSSStyleSheet.prototype, "removeRule", removeRuleDescriptor);
            document.removeEventListener("__darkreader__cleanUp", cleanUp);
            document.removeEventListener("__darkreader__addUndefinedResolver", addUndefinedResolver);
            if (enableStyleSheetsProxy) {
              Object.defineProperty(Document.prototype, "styleSheets", documentStyleSheetsDescriptor);
            }
            if (shouldWrapHTMLElement) {
              Object.defineProperty(Element.prototype, "getElementsByTagName", getElementsByTagNameDescriptor);
            }
          };
          var addUndefinedResolver = function(e) {
            customElements.whenDefined(e.detail.tag).then(function() {
              document.dispatchEvent(new CustomEvent("__darkreader__isDefined", { detail: { tag: e.detail.tag } }));
            });
          };
          document.addEventListener("__darkreader__cleanUp", cleanUp);
          document.addEventListener("__darkreader__addUndefinedResolver", addUndefinedResolver);
          var updateSheetEvent = new Event("__darkreader__updateSheet");
          function proxyAddRule(selector, style, index) {
            addRuleDescriptor.value.call(this, selector, style, index);
            if (this.ownerNode && !this.ownerNode.classList.contains("darkreader")) {
              this.ownerNode.dispatchEvent(updateSheetEvent);
            }
            return -1;
          }
          function proxyInsertRule(rule, index) {
            var returnValue = insertRuleDescriptor.value.call(this, rule, index);
            if (this.ownerNode && !this.ownerNode.classList.contains("darkreader")) {
              this.ownerNode.dispatchEvent(updateSheetEvent);
            }
            return returnValue;
          }
          function proxyDeleteRule(index) {
            deleteRuleDescriptor.value.call(this, index);
            if (this.ownerNode && !this.ownerNode.classList.contains("darkreader")) {
              this.ownerNode.dispatchEvent(updateSheetEvent);
            }
          }
          function proxyRemoveRule(index) {
            removeRuleDescriptor.value.call(this, index);
            if (this.ownerNode && !this.ownerNode.classList.contains("darkreader")) {
              this.ownerNode.dispatchEvent(updateSheetEvent);
            }
          }
          function proxyDocumentStyleSheets() {
            var _this = this;
            var getCurrentValue = function() {
              var docSheets = documentStyleSheetsDescriptor.get.call(_this);
              var filteredSheets = __spreadArray([], __read(docSheets), false).filter(function(styleSheet) {
                return !styleSheet.ownerNode.classList.contains("darkreader");
              });
              filteredSheets.item = function(item) {
                return filteredSheets[item];
              };
              return Object.setPrototypeOf(filteredSheets, StyleSheetList.prototype);
            };
            var elements = getCurrentValue();
            var styleSheetListBehavior = {
              get: function(_, property) {
                return getCurrentValue()[property];
              }
            };
            elements = new Proxy(elements, styleSheetListBehavior);
            return elements;
          }
          function proxyGetElementsByTagName(tagName) {
            var _this = this;
            if (tagName !== "style") {
              return getElementsByTagNameDescriptor.value.call(this, tagName);
            }
            var getCurrentElementValue = function() {
              var elements2 = getElementsByTagNameDescriptor.value.call(_this, tagName);
              return Object.setPrototypeOf(__spreadArray([], __read(elements2), false).filter(function(element) {
                return !element.classList.contains("darkreader");
              }), NodeList.prototype);
            };
            var elements = getCurrentElementValue();
            var nodeListBehavior = {
              get: function(_, property) {
                return getCurrentElementValue()[Number(property) || property];
              }
            };
            elements = new Proxy(elements, nodeListBehavior);
            return elements;
          }
          Object.defineProperty(CSSStyleSheet.prototype, "addRule", Object.assign({}, addRuleDescriptor, { value: proxyAddRule }));
          Object.defineProperty(CSSStyleSheet.prototype, "insertRule", Object.assign({}, insertRuleDescriptor, { value: proxyInsertRule }));
          Object.defineProperty(CSSStyleSheet.prototype, "deleteRule", Object.assign({}, deleteRuleDescriptor, { value: proxyDeleteRule }));
          Object.defineProperty(CSSStyleSheet.prototype, "removeRule", Object.assign({}, removeRuleDescriptor, { value: proxyRemoveRule }));
          if (enableStyleSheetsProxy) {
            Object.defineProperty(Document.prototype, "styleSheets", Object.assign({}, documentStyleSheetsDescriptor, { get: proxyDocumentStyleSheets }));
          }
          if (shouldWrapHTMLElement) {
            Object.defineProperty(Element.prototype, "getElementsByTagName", Object.assign({}, getElementsByTagNameDescriptor, { value: proxyGetElementsByTagName }));
          }
        }
        var INSTANCE_ID = generateUID();
        var styleManagers = /* @__PURE__ */ new Map();
        var adoptedStyleManagers = [];
        var filter = null;
        var fixes = null;
        var isIFrame$1 = null;
        var ignoredImageAnalysisSelectors = null;
        var ignoredInlineSelectors = null;
        function createOrUpdateStyle(className, root) {
          if (root === void 0) {
            root = document.head || document;
          }
          var element = root.querySelector(".".concat(className));
          if (!element) {
            element = document.createElement("style");
            element.classList.add("darkreader");
            element.classList.add(className);
            element.media = "screen";
            element.textContent = "";
          }
          return element;
        }
        function createOrUpdateScript(className, root) {
          if (root === void 0) {
            root = document.head || document;
          }
          var element = root.querySelector(".".concat(className));
          if (!element) {
            element = document.createElement("script");
            element.classList.add("darkreader");
            element.classList.add(className);
          }
          return element;
        }
        var nodePositionWatchers = /* @__PURE__ */ new Map();
        function setupNodePositionWatcher(node, alias) {
          nodePositionWatchers.has(alias) && nodePositionWatchers.get(alias).stop();
          nodePositionWatchers.set(alias, watchForNodePosition(node, "parent"));
        }
        function stopStylePositionWatchers() {
          forEach(nodePositionWatchers.values(), function(watcher) {
            return watcher.stop();
          });
          nodePositionWatchers.clear();
        }
        function createStaticStyleOverrides() {
          var fallbackStyle = createOrUpdateStyle("darkreader--fallback", document);
          fallbackStyle.textContent = getModifiedFallbackStyle(filter, { strict: true });
          document.head.insertBefore(fallbackStyle, document.head.firstChild);
          setupNodePositionWatcher(fallbackStyle, "fallback");
          var userAgentStyle = createOrUpdateStyle("darkreader--user-agent");
          userAgentStyle.textContent = getModifiedUserAgentStyle(filter, isIFrame$1, filter.styleSystemControls);
          document.head.insertBefore(userAgentStyle, fallbackStyle.nextSibling);
          setupNodePositionWatcher(userAgentStyle, "user-agent");
          var textStyle = createOrUpdateStyle("darkreader--text");
          if (filter.useFont || filter.textStroke > 0) {
            textStyle.textContent = createTextStyle(filter);
          } else {
            textStyle.textContent = "";
          }
          document.head.insertBefore(textStyle, fallbackStyle.nextSibling);
          setupNodePositionWatcher(textStyle, "text");
          var invertStyle = createOrUpdateStyle("darkreader--invert");
          if (fixes && Array.isArray(fixes.invert) && fixes.invert.length > 0) {
            invertStyle.textContent = [
              "".concat(fixes.invert.join(", "), " {"),
              "    filter: ".concat(getCSSFilterValue(__assign(__assign({}, filter), { contrast: filter.mode === 0 ? filter.contrast : clamp(filter.contrast - 10, 0, 100) })), " !important;"),
              "}"
            ].join("\n");
          } else {
            invertStyle.textContent = "";
          }
          document.head.insertBefore(invertStyle, textStyle.nextSibling);
          setupNodePositionWatcher(invertStyle, "invert");
          var inlineStyle = createOrUpdateStyle("darkreader--inline");
          inlineStyle.textContent = getInlineOverrideStyle();
          document.head.insertBefore(inlineStyle, invertStyle.nextSibling);
          setupNodePositionWatcher(inlineStyle, "inline");
          var overrideStyle = createOrUpdateStyle("darkreader--override");
          overrideStyle.textContent = fixes && fixes.css ? replaceCSSTemplates(fixes.css) : "";
          document.head.appendChild(overrideStyle);
          setupNodePositionWatcher(overrideStyle, "override");
          var variableStyle = createOrUpdateStyle("darkreader--variables");
          var selectionColors = getSelectionColor(filter);
          var darkSchemeBackgroundColor = filter.darkSchemeBackgroundColor, darkSchemeTextColor = filter.darkSchemeTextColor, lightSchemeBackgroundColor = filter.lightSchemeBackgroundColor, lightSchemeTextColor = filter.lightSchemeTextColor, mode = filter.mode;
          var schemeBackgroundColor = mode === 0 ? lightSchemeBackgroundColor : darkSchemeBackgroundColor;
          var schemeTextColor = mode === 0 ? lightSchemeTextColor : darkSchemeTextColor;
          schemeBackgroundColor = modifyBackgroundColor(parseColorWithCache(schemeBackgroundColor), filter);
          schemeTextColor = modifyForegroundColor(parseColorWithCache(schemeTextColor), filter);
          variableStyle.textContent = [
            ":root {",
            "   --darkreader-neutral-background: ".concat(schemeBackgroundColor, ";"),
            "   --darkreader-neutral-text: ".concat(schemeTextColor, ";"),
            "   --darkreader-selection-background: ".concat(selectionColors.backgroundColorSelection, ";"),
            "   --darkreader-selection-text: ".concat(selectionColors.foregroundColorSelection, ";"),
            "}"
          ].join("\n");
          document.head.insertBefore(variableStyle, inlineStyle.nextSibling);
          setupNodePositionWatcher(variableStyle, "variables");
          var rootVarsStyle = createOrUpdateStyle("darkreader--root-vars");
          document.head.insertBefore(rootVarsStyle, variableStyle.nextSibling);
          var injectProxyArg = !(fixes && fixes.disableStyleSheetsProxy);
          {
            var proxyScript = createOrUpdateScript("darkreader--proxy");
            proxyScript.append("(".concat(injectProxy, ")(").concat(injectProxyArg, ")"));
            document.head.insertBefore(proxyScript, rootVarsStyle.nextSibling);
            proxyScript.remove();
          }
        }
        var shadowRootsWithOverrides = /* @__PURE__ */ new Set();
        function createShadowStaticStyleOverrides(root) {
          var inlineStyle = createOrUpdateStyle("darkreader--inline", root);
          inlineStyle.textContent = getInlineOverrideStyle();
          root.insertBefore(inlineStyle, root.firstChild);
          var overrideStyle = createOrUpdateStyle("darkreader--override", root);
          overrideStyle.textContent = fixes && fixes.css ? replaceCSSTemplates(fixes.css) : "";
          root.insertBefore(overrideStyle, inlineStyle.nextSibling);
          var invertStyle = createOrUpdateStyle("darkreader--invert", root);
          if (fixes && Array.isArray(fixes.invert) && fixes.invert.length > 0) {
            invertStyle.textContent = [
              "".concat(fixes.invert.join(", "), " {"),
              "    filter: ".concat(getCSSFilterValue(__assign(__assign({}, filter), { contrast: filter.mode === 0 ? filter.contrast : clamp(filter.contrast - 10, 0, 100) })), " !important;"),
              "}"
            ].join("\n");
          } else {
            invertStyle.textContent = "";
          }
          root.insertBefore(invertStyle, overrideStyle.nextSibling);
          shadowRootsWithOverrides.add(root);
        }
        function replaceCSSTemplates($cssText) {
          return $cssText.replace(/\${(.+?)}/g, function(_, $color) {
            var color = parseColorWithCache($color);
            if (color) {
              return modifyColor(color, filter);
            }
            return $color;
          });
        }
        function cleanFallbackStyle() {
          var fallback = document.querySelector(".darkreader--fallback");
          if (fallback) {
            fallback.textContent = "";
          }
        }
        function createDynamicStyleOverrides() {
          cancelRendering();
          var allStyles = getManageableStyles(document);
          var newManagers = allStyles.filter(function(style) {
            return !styleManagers.has(style);
          }).map(function(style) {
            return createManager(style);
          });
          newManagers.map(function(manager) {
            return manager.details({ secondRound: false });
          }).filter(function(detail) {
            return detail && detail.rules.length > 0;
          }).forEach(function(detail) {
            variablesStore.addRulesForMatching(detail.rules);
          });
          variablesStore.matchVariablesAndDependants();
          variablesStore.setOnRootVariableChange(function() {
            variablesStore.putRootVars(document.head.querySelector(".darkreader--root-vars"), filter);
          });
          variablesStore.putRootVars(document.head.querySelector(".darkreader--root-vars"), filter);
          styleManagers.forEach(function(manager) {
            return manager.render(filter, ignoredImageAnalysisSelectors);
          });
          if (loadingStyles.size === 0) {
            cleanFallbackStyle();
          }
          newManagers.forEach(function(manager) {
            return manager.watch();
          });
          var inlineStyleElements = toArray(document.querySelectorAll(INLINE_STYLE_SELECTOR));
          iterateShadowHosts(document.documentElement, function(host) {
            createShadowStaticStyleOverrides(host.shadowRoot);
            var elements = host.shadowRoot.querySelectorAll(INLINE_STYLE_SELECTOR);
            if (elements.length > 0) {
              push(inlineStyleElements, elements);
            }
          });
          inlineStyleElements.forEach(function(el) {
            return overrideInlineStyle(el, filter, ignoredInlineSelectors, ignoredImageAnalysisSelectors);
          });
          handleAdoptedStyleSheets(document);
        }
        var loadingStylesCounter = 0;
        var loadingStyles = /* @__PURE__ */ new Set();
        function createManager(element) {
          var loadingStyleId = ++loadingStylesCounter;
          function loadingStart() {
            if (!isDOMReady() || !didDocumentShowUp) {
              loadingStyles.add(loadingStyleId);
              logInfo("Current amount of styles loading: ".concat(loadingStyles.size));
              var fallbackStyle = document.querySelector(".darkreader--fallback");
              if (!fallbackStyle.textContent) {
                fallbackStyle.textContent = getModifiedFallbackStyle(filter, { strict: false });
              }
            }
          }
          function loadingEnd() {
            loadingStyles.delete(loadingStyleId);
            logInfo("Removed loadingStyle ".concat(loadingStyleId, ", now awaiting: ").concat(loadingStyles.size));
            if (loadingStyles.size === 0 && isDOMReady()) {
              cleanFallbackStyle();
            }
          }
          function update2() {
            var details = manager.details({ secondRound: true });
            if (!details) {
              return;
            }
            variablesStore.addRulesForMatching(details.rules);
            variablesStore.matchVariablesAndDependants();
            manager.render(filter, ignoredImageAnalysisSelectors);
          }
          var manager = manageStyle(element, { update: update2, loadingStart, loadingEnd });
          styleManagers.set(element, manager);
          return manager;
        }
        function removeManager(element) {
          var manager = styleManagers.get(element);
          if (manager) {
            manager.destroy();
            styleManagers.delete(element);
          }
        }
        var throttledRenderAllStyles = throttle(function(callback) {
          styleManagers.forEach(function(manager) {
            return manager.render(filter, ignoredImageAnalysisSelectors);
          });
          adoptedStyleManagers.forEach(function(manager) {
            return manager.render(filter, ignoredImageAnalysisSelectors);
          });
          callback && callback();
        });
        var cancelRendering = function() {
          throttledRenderAllStyles.cancel();
        };
        function onDOMReady() {
          if (loadingStyles.size === 0) {
            cleanFallbackStyle();
            return;
          }
        }
        var documentVisibilityListener = null;
        var didDocumentShowUp = !document.hidden;
        function watchForDocumentVisibility(callback) {
          var alreadyWatching = Boolean(documentVisibilityListener);
          documentVisibilityListener = function() {
            if (!document.hidden) {
              stopWatchingForDocumentVisibility();
              callback();
              didDocumentShowUp = true;
            }
          };
          if (!alreadyWatching) {
            document.addEventListener("visibilitychange", documentVisibilityListener);
          }
        }
        function stopWatchingForDocumentVisibility() {
          document.removeEventListener("visibilitychange", documentVisibilityListener);
          documentVisibilityListener = null;
        }
        function createThemeAndWatchForUpdates() {
          createStaticStyleOverrides();
          function runDynamicStyle() {
            createDynamicStyleOverrides();
            watchForUpdates();
          }
          if (document.hidden && !filter.immediateModify) {
            watchForDocumentVisibility(runDynamicStyle);
          } else {
            runDynamicStyle();
          }
          changeMetaThemeColorWhenAvailable(filter);
        }
        function handleAdoptedStyleSheets(node) {
          try {
            if (Array.isArray(node.adoptedStyleSheets)) {
              if (node.adoptedStyleSheets.length > 0) {
                var newManger = createAdoptedStyleSheetOverride(node);
                adoptedStyleManagers.push(newManger);
                newManger.render(filter, ignoredImageAnalysisSelectors);
              }
            }
          } catch (err) {
          }
        }
        function watchForUpdates() {
          var managedStyles = Array.from(styleManagers.keys());
          watchForStyleChanges(managedStyles, function(_a) {
            var created = _a.created, updated = _a.updated, removed = _a.removed, moved = _a.moved;
            var stylesToRemove = removed;
            var stylesToManage = created.concat(updated).concat(moved).filter(function(style) {
              return !styleManagers.has(style);
            });
            var stylesToRestore = moved.filter(function(style) {
              return styleManagers.has(style);
            });
            stylesToRemove.forEach(function(style) {
              return removeManager(style);
            });
            var newManagers = stylesToManage.map(function(style) {
              return createManager(style);
            });
            newManagers.map(function(manager) {
              return manager.details({ secondRound: false });
            }).filter(function(detail) {
              return detail && detail.rules.length > 0;
            }).forEach(function(detail) {
              variablesStore.addRulesForMatching(detail.rules);
            });
            variablesStore.matchVariablesAndDependants();
            newManagers.forEach(function(manager) {
              return manager.render(filter, ignoredImageAnalysisSelectors);
            });
            newManagers.forEach(function(manager) {
              return manager.watch();
            });
            stylesToRestore.forEach(function(style) {
              return styleManagers.get(style).restore();
            });
          }, function(shadowRoot) {
            createShadowStaticStyleOverrides(shadowRoot);
            handleAdoptedStyleSheets(shadowRoot);
          });
          watchForInlineStyles(function(element) {
            overrideInlineStyle(element, filter, ignoredInlineSelectors, ignoredImageAnalysisSelectors);
            if (element === document.documentElement) {
              var styleAttr = element.getAttribute("style") || "";
              if (styleAttr.includes("--")) {
                variablesStore.matchVariablesAndDependants();
                variablesStore.putRootVars(document.head.querySelector(".darkreader--root-vars"), filter);
              }
            }
          }, function(root) {
            createShadowStaticStyleOverrides(root);
            var inlineStyleElements = root.querySelectorAll(INLINE_STYLE_SELECTOR);
            if (inlineStyleElements.length > 0) {
              forEach(inlineStyleElements, function(el) {
                return overrideInlineStyle(el, filter, ignoredInlineSelectors, ignoredImageAnalysisSelectors);
              });
            }
          });
          addDOMReadyListener(onDOMReady);
        }
        function stopWatchingForUpdates() {
          styleManagers.forEach(function(manager) {
            return manager.pause();
          });
          stopStylePositionWatchers();
          stopWatchingForStyleChanges();
          stopWatchingForInlineStyles();
          removeDOMReadyListener(onDOMReady);
          cleanReadyStateCompleteListeners();
        }
        var metaObserver;
        function addMetaListener() {
          metaObserver = new MutationObserver(function() {
            if (document.querySelector('meta[name="darkreader-lock"]')) {
              metaObserver.disconnect();
              removeDynamicTheme();
            }
          });
          metaObserver.observe(document.head, { childList: true, subtree: true });
        }
        function createDarkReaderInstanceMarker() {
          var metaElement = document.createElement("meta");
          metaElement.name = "darkreader";
          metaElement.content = INSTANCE_ID;
          document.head.appendChild(metaElement);
        }
        function isAnotherDarkReaderInstanceActive() {
          if (document.querySelector('meta[name="darkreader-lock"]')) {
            return true;
          }
          var meta = document.querySelector('meta[name="darkreader"]');
          if (meta) {
            if (meta.content !== INSTANCE_ID) {
              return true;
            }
            return false;
          }
          createDarkReaderInstanceMarker();
          addMetaListener();
          return false;
        }
        function createOrUpdateDynamicTheme(filterConfig, dynamicThemeFixes, iframe) {
          filter = filterConfig;
          fixes = dynamicThemeFixes;
          if (fixes) {
            ignoredImageAnalysisSelectors = Array.isArray(fixes.ignoreImageAnalysis) ? fixes.ignoreImageAnalysis : [];
            ignoredInlineSelectors = Array.isArray(fixes.ignoreInlineStyle) ? fixes.ignoreInlineStyle : [];
          } else {
            ignoredImageAnalysisSelectors = [];
            ignoredInlineSelectors = [];
          }
          if (filter.immediateModify) {
            setIsDOMReady(function() {
              return true;
            });
          }
          isIFrame$1 = iframe;
          if (document.head) {
            if (isAnotherDarkReaderInstanceActive()) {
              return;
            }
            document.documentElement.setAttribute("data-darkreader-mode", "dynamic");
            document.documentElement.setAttribute("data-darkreader-scheme", filter.mode ? "dark" : "dimmed");
            createThemeAndWatchForUpdates();
          } else {
            if (!isFirefox) {
              var fallbackStyle = createOrUpdateStyle("darkreader--fallback");
              document.documentElement.appendChild(fallbackStyle);
              fallbackStyle.textContent = getModifiedFallbackStyle(filter, { strict: true });
            }
            var headObserver_1 = new MutationObserver(function() {
              if (document.head) {
                headObserver_1.disconnect();
                if (isAnotherDarkReaderInstanceActive()) {
                  removeDynamicTheme();
                  return;
                }
                createThemeAndWatchForUpdates();
              }
            });
            headObserver_1.observe(document, { childList: true, subtree: true });
          }
        }
        function removeProxy() {
          document.dispatchEvent(new CustomEvent("__darkreader__cleanUp"));
          removeNode(document.head.querySelector(".darkreader--proxy"));
        }
        function removeDynamicTheme() {
          document.documentElement.removeAttribute("data-darkreader-mode");
          document.documentElement.removeAttribute("data-darkreader-scheme");
          cleanDynamicThemeCache();
          removeNode(document.querySelector(".darkreader--fallback"));
          if (document.head) {
            restoreMetaThemeColor();
            removeNode(document.head.querySelector(".darkreader--user-agent"));
            removeNode(document.head.querySelector(".darkreader--text"));
            removeNode(document.head.querySelector(".darkreader--invert"));
            removeNode(document.head.querySelector(".darkreader--inline"));
            removeNode(document.head.querySelector(".darkreader--override"));
            removeNode(document.head.querySelector(".darkreader--variables"));
            removeNode(document.head.querySelector(".darkreader--root-vars"));
            removeNode(document.head.querySelector('meta[name="darkreader"]'));
            removeProxy();
          }
          shadowRootsWithOverrides.forEach(function(root) {
            removeNode(root.querySelector(".darkreader--inline"));
            removeNode(root.querySelector(".darkreader--override"));
          });
          shadowRootsWithOverrides.clear();
          forEach(styleManagers.keys(), function(el) {
            return removeManager(el);
          });
          loadingStyles.clear();
          cleanLoadingLinks();
          forEach(document.querySelectorAll(".darkreader"), removeNode);
          adoptedStyleManagers.forEach(function(manager) {
            manager.destroy();
          });
          adoptedStyleManagers.splice(0);
          metaObserver && metaObserver.disconnect();
        }
        function cleanDynamicThemeCache() {
          variablesStore.clear();
          parsedURLCache.clear();
          stopWatchingForDocumentVisibility();
          cancelRendering();
          stopWatchingForUpdates();
          cleanModificationCache();
          clearColorCache();
        }
        var blobRegex = /url\(\"(blob\:.*?)\"\)/g;
        function replaceBlobs(text) {
          return __awaiter(this, void 0, void 0, function() {
            var promises, data;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  promises = [];
                  getMatches(blobRegex, text, 1).forEach(function(url) {
                    var promise = loadAsDataURL(url);
                    promises.push(promise);
                  });
                  return [4, Promise.all(promises)];
                case 1:
                  data = _a.sent();
                  return [2, text.replace(blobRegex, function() {
                    return 'url("'.concat(data.shift(), '")');
                  })];
              }
            });
          });
        }
        var banner = '/*\n                        _______\n                       /       \\\n                      .==.    .==.\n                     ((  ))==((  ))\n                    / "=="    "=="\\\n                   /____|| || ||___\\\n       ________     ____    ________  ___    ___\n       |  ___  \\   /    \\   |  ___  \\ |  |  /  /\n       |  |  \\  \\ /  /\\  \\  |  |  \\  \\|  |_/  /\n       |  |   )  /  /__\\  \\ |  |__/  /|  ___  \\\n       |  |__/  /  ______  \\|  ____  \\|  |  \\  \\\n_______|_______/__/ ____ \\__\\__|___\\__\\__|___\\__\\____\n|  ___  \\ |  ____/ /    \\   |  ___  \\ |  ____|  ___  \\\n|  |  \\  \\|  |___ /  /\\  \\  |  |  \\  \\|  |___|  |  \\  \\\n|  |__/  /|  ____/  /__\\  \\ |  |   )  |  ____|  |__/  /\n|  ____  \\|  |__/  ______  \\|  |__/  /|  |___|  ____  \\\n|__|   \\__\\____/__/      \\__\\_______/ |______|__|   \\__\\\n                https://darkreader.org\n*/\n\n/*! Dark reader generated CSS | Licensed under MIT https://github.com/darkreader/darkreader/blob/main/LICENSE */\n';
        function collectCSS() {
          return __awaiter(this, void 0, void 0, function() {
            function addStaticCSS(selector, comment) {
              var staticStyle = document.querySelector(selector);
              if (staticStyle && staticStyle.textContent) {
                css.push("/* ".concat(comment, " */"));
                css.push(staticStyle.textContent);
                css.push("");
              }
            }
            var css, modifiedCSS, formattedCSS, _a, _b;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  css = [banner];
                  addStaticCSS(".darkreader--fallback", "Fallback Style");
                  addStaticCSS(".darkreader--user-agent", "User-Agent Style");
                  addStaticCSS(".darkreader--text", "Text Style");
                  addStaticCSS(".darkreader--invert", "Invert Style");
                  addStaticCSS(".darkreader--variables", "Variables Style");
                  modifiedCSS = [];
                  document.querySelectorAll(".darkreader--sync").forEach(function(element) {
                    forEach(element.sheet.cssRules, function(rule) {
                      rule && rule.cssText && modifiedCSS.push(rule.cssText);
                    });
                  });
                  if (!modifiedCSS.length)
                    return [3, 2];
                  formattedCSS = formatCSS(modifiedCSS.join("\n"));
                  css.push("/* Modified CSS */");
                  _b = (_a = css).push;
                  return [4, replaceBlobs(formattedCSS)];
                case 1:
                  _b.apply(_a, [_c.sent()]);
                  css.push("");
                  _c.label = 2;
                case 2:
                  addStaticCSS(".darkreader--override", "Override Style");
                  return [2, css.join("\n")];
              }
            });
          });
        }
        var isDarkReaderEnabled = false;
        var isIFrame = function() {
          try {
            return window.self !== window.top;
          } catch (err) {
            console.warn(err);
            return true;
          }
        }();
        function enable(themeOptions, fixes2) {
          if (themeOptions === void 0) {
            themeOptions = {};
          }
          if (fixes2 === void 0) {
            fixes2 = null;
          }
          var theme = __assign(__assign({}, DEFAULT_THEME), themeOptions);
          if (theme.engine !== ThemeEngines.dynamicTheme) {
            throw new Error("Theme engine is not supported.");
          }
          createOrUpdateDynamicTheme(theme, fixes2, isIFrame);
          isDarkReaderEnabled = true;
        }
        function isEnabled() {
          return isDarkReaderEnabled;
        }
        function disable() {
          removeDynamicTheme();
          isDarkReaderEnabled = false;
        }
        var darkScheme = matchMedia("(prefers-color-scheme: dark)");
        var store = {
          themeOptions: null,
          fixes: null
        };
        function handleColorScheme() {
          if (darkScheme.matches) {
            enable(store.themeOptions, store.fixes);
          } else {
            disable();
          }
        }
        function auto(themeOptions, fixes2) {
          if (themeOptions === void 0) {
            themeOptions = {};
          }
          if (fixes2 === void 0) {
            fixes2 = null;
          }
          if (themeOptions) {
            store = { themeOptions, fixes: fixes2 };
            handleColorScheme();
            if (isMatchMediaChangeEventListenerSupported) {
              darkScheme.addEventListener("change", handleColorScheme);
            } else {
              darkScheme.addListener(handleColorScheme);
            }
          } else {
            if (isMatchMediaChangeEventListenerSupported) {
              darkScheme.removeEventListener("change", handleColorScheme);
            } else {
              darkScheme.removeListener(handleColorScheme);
            }
            disable();
          }
        }
        function exportGeneratedCSS() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, collectCSS()];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        }
        var setFetchMethod = setFetchMethod$1;
        exports2.auto = auto;
        exports2.disable = disable;
        exports2.enable = enable;
        exports2.exportGeneratedCSS = exportGeneratedCSS;
        exports2.isEnabled = isEnabled;
        exports2.setFetchMethod = setFetchMethod;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // public/node_modules/@firebase/util/dist/index.esm2017.js
  var stringToByteArray$1 = function(str) {
    const out = [];
    let p = 0;
    for (let i = 0; i < str.length; i++) {
      let c = str.charCodeAt(i);
      if (c < 128) {
        out[p++] = c;
      } else if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
        c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
        out[p++] = c >> 18 | 240;
        out[p++] = c >> 12 & 63 | 128;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      } else {
        out[p++] = c >> 12 | 224;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      }
    }
    return out;
  };
  var byteArrayToString = function(bytes) {
    const out = [];
    let pos = 0, c = 0;
    while (pos < bytes.length) {
      const c1 = bytes[pos++];
      if (c1 < 128) {
        out[c++] = String.fromCharCode(c1);
      } else if (c1 > 191 && c1 < 224) {
        const c2 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
      } else if (c1 > 239 && c1 < 365) {
        const c2 = bytes[pos++];
        const c3 = bytes[pos++];
        const c4 = bytes[pos++];
        const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
        out[c++] = String.fromCharCode(55296 + (u >> 10));
        out[c++] = String.fromCharCode(56320 + (u & 1023));
      } else {
        const c2 = bytes[pos++];
        const c3 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
      }
    }
    return out.join("");
  };
  var base64 = {
    /**
     * Maps bytes to characters.
     */
    byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */
    charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */
    byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */
    charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */
    ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */
    get ENCODED_VALS() {
      return this.ENCODED_VALS_BASE + "+/=";
    },
    /**
     * Our websafe alphabet.
     */
    get ENCODED_VALS_WEBSAFE() {
      return this.ENCODED_VALS_BASE + "-_.";
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */
    HAS_NATIVE_SUPPORT: typeof atob === "function",
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */
    encodeByteArray(input, webSafe) {
      if (!Array.isArray(input)) {
        throw Error("encodeByteArray takes an array as a parameter");
      }
      this.init_();
      const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
      const output = [];
      for (let i = 0; i < input.length; i += 3) {
        const byte1 = input[i];
        const haveByte2 = i + 1 < input.length;
        const byte2 = haveByte2 ? input[i + 1] : 0;
        const haveByte3 = i + 2 < input.length;
        const byte3 = haveByte3 ? input[i + 2] : 0;
        const outByte1 = byte1 >> 2;
        const outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
        let outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
        let outByte4 = byte3 & 63;
        if (!haveByte3) {
          outByte4 = 64;
          if (!haveByte2) {
            outByte3 = 64;
          }
        }
        output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
      }
      return output.join("");
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */
    encodeString(input, webSafe) {
      if (this.HAS_NATIVE_SUPPORT && !webSafe) {
        return btoa(input);
      }
      return this.encodeByteArray(stringToByteArray$1(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */
    decodeString(input, webSafe) {
      if (this.HAS_NATIVE_SUPPORT && !webSafe) {
        return atob(input);
      }
      return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */
    decodeStringToByteArray(input, webSafe) {
      this.init_();
      const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
      const output = [];
      for (let i = 0; i < input.length; ) {
        const byte1 = charToByteMap[input.charAt(i++)];
        const haveByte2 = i < input.length;
        const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
        ++i;
        const haveByte3 = i < input.length;
        const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
        ++i;
        const haveByte4 = i < input.length;
        const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
        ++i;
        if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
          throw Error();
        }
        const outByte1 = byte1 << 2 | byte2 >> 4;
        output.push(outByte1);
        if (byte3 !== 64) {
          const outByte2 = byte2 << 4 & 240 | byte3 >> 2;
          output.push(outByte2);
          if (byte4 !== 64) {
            const outByte3 = byte3 << 6 & 192 | byte4;
            output.push(outByte3);
          }
        }
      }
      return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */
    init_() {
      if (!this.byteToCharMap_) {
        this.byteToCharMap_ = {};
        this.charToByteMap_ = {};
        this.byteToCharMapWebSafe_ = {};
        this.charToByteMapWebSafe_ = {};
        for (let i = 0; i < this.ENCODED_VALS.length; i++) {
          this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
          this.charToByteMap_[this.byteToCharMap_[i]] = i;
          this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
          this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
          if (i >= this.ENCODED_VALS_BASE.length) {
            this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
            this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
          }
        }
      }
    }
  };
  var base64Encode = function(str) {
    const utf8Bytes = stringToByteArray$1(str);
    return base64.encodeByteArray(utf8Bytes, true);
  };
  var base64urlEncodeWithoutPadding = function(str) {
    return base64Encode(str).replace(/\./g, "");
  };
  var base64Decode = function(str) {
    try {
      return base64.decodeString(str, true);
    } catch (e) {
      console.error("base64Decode failed: ", e);
    }
    return null;
  };
  function isIndexedDBAvailable() {
    try {
      return typeof indexedDB === "object";
    } catch (e) {
      return false;
    }
  }
  function validateIndexedDBOpenable() {
    return new Promise((resolve, reject) => {
      try {
        let preExist = true;
        const DB_CHECK_NAME = "validate-browser-context-for-indexeddb-analytics-module";
        const request = self.indexedDB.open(DB_CHECK_NAME);
        request.onsuccess = () => {
          request.result.close();
          if (!preExist) {
            self.indexedDB.deleteDatabase(DB_CHECK_NAME);
          }
          resolve(true);
        };
        request.onupgradeneeded = () => {
          preExist = false;
        };
        request.onerror = () => {
          var _a;
          reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || "");
        };
      } catch (error) {
        reject(error);
      }
    });
  }
  function areCookiesEnabled() {
    if (typeof navigator === "undefined" || !navigator.cookieEnabled) {
      return false;
    }
    return true;
  }
  function getGlobal() {
    if (typeof self !== "undefined") {
      return self;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof global !== "undefined") {
      return global;
    }
    throw new Error("Unable to locate global object.");
  }
  var getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
  var getDefaultsFromEnvVariable = () => {
    if (typeof process === "undefined" || typeof process.env === "undefined") {
      return;
    }
    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
    if (defaultsJsonString) {
      return JSON.parse(defaultsJsonString);
    }
  };
  var getDefaultsFromCookie = () => {
    if (typeof document === "undefined") {
      return;
    }
    let match;
    try {
      match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
    } catch (e) {
      return;
    }
    const decoded = match && base64Decode(match[1]);
    return decoded && JSON.parse(decoded);
  };
  var getDefaults = () => {
    try {
      return getDefaultsFromGlobal() || getDefaultsFromEnvVariable() || getDefaultsFromCookie();
    } catch (e) {
      console.info("Unable to get __FIREBASE_DEFAULTS__ due to: ".concat(e));
      return;
    }
  };
  var getDefaultAppConfig = () => {
    var _a;
    return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config;
  };
  var Deferred = class {
    constructor() {
      this.reject = () => {
      };
      this.resolve = () => {
      };
      this.promise = new Promise((resolve, reject) => {
        this.resolve = resolve;
        this.reject = reject;
      });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */
    wrapCallback(callback) {
      return (error, value) => {
        if (error) {
          this.reject(error);
        } else {
          this.resolve(value);
        }
        if (typeof callback === "function") {
          this.promise.catch(() => {
          });
          if (callback.length === 1) {
            callback(error);
          } else {
            callback(error, value);
          }
        }
      };
    }
  };
  var ERROR_NAME = "FirebaseError";
  var FirebaseError = class _FirebaseError extends Error {
    constructor(code, message, customData) {
      super(message);
      this.code = code;
      this.customData = customData;
      this.name = ERROR_NAME;
      Object.setPrototypeOf(this, _FirebaseError.prototype);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, ErrorFactory.prototype.create);
      }
    }
  };
  var ErrorFactory = class {
    constructor(service, serviceName, errors) {
      this.service = service;
      this.serviceName = serviceName;
      this.errors = errors;
    }
    create(code, ...data) {
      const customData = data[0] || {};
      const fullCode = "".concat(this.service, "/").concat(code);
      const template = this.errors[code];
      const message = template ? replaceTemplate(template, customData) : "Error";
      const fullMessage = "".concat(this.serviceName, ": ").concat(message, " (").concat(fullCode, ").");
      const error = new FirebaseError(fullCode, fullMessage, customData);
      return error;
    }
  };
  function replaceTemplate(template, data) {
    return template.replace(PATTERN, (_, key) => {
      const value = data[key];
      return value != null ? String(value) : "<".concat(key, "?>");
    });
  }
  var PATTERN = /\{\$([^}]+)}/g;
  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }
    const aKeys = Object.keys(a);
    const bKeys = Object.keys(b);
    for (const k of aKeys) {
      if (!bKeys.includes(k)) {
        return false;
      }
      const aProp = a[k];
      const bProp = b[k];
      if (isObject(aProp) && isObject(bProp)) {
        if (!deepEqual(aProp, bProp)) {
          return false;
        }
      } else if (aProp !== bProp) {
        return false;
      }
    }
    for (const k of bKeys) {
      if (!aKeys.includes(k)) {
        return false;
      }
    }
    return true;
  }
  function isObject(thing) {
    return thing !== null && typeof thing === "object";
  }
  var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1e3;
  function getModularInstance(service) {
    if (service && service._delegate) {
      return service._delegate;
    } else {
      return service;
    }
  }

  // public/node_modules/@firebase/component/dist/esm/index.esm2017.js
  var Component = class {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */
    constructor(name5, instanceFactory, type) {
      this.name = name5;
      this.instanceFactory = instanceFactory;
      this.type = type;
      this.multipleInstances = false;
      this.serviceProps = {};
      this.instantiationMode = "LAZY";
      this.onInstanceCreated = null;
    }
    setInstantiationMode(mode) {
      this.instantiationMode = mode;
      return this;
    }
    setMultipleInstances(multipleInstances) {
      this.multipleInstances = multipleInstances;
      return this;
    }
    setServiceProps(props) {
      this.serviceProps = props;
      return this;
    }
    setInstanceCreatedCallback(callback) {
      this.onInstanceCreated = callback;
      return this;
    }
  };
  var DEFAULT_ENTRY_NAME = "[DEFAULT]";
  var Provider = class {
    constructor(name5, container) {
      this.name = name5;
      this.container = container;
      this.component = null;
      this.instances = /* @__PURE__ */ new Map();
      this.instancesDeferred = /* @__PURE__ */ new Map();
      this.instancesOptions = /* @__PURE__ */ new Map();
      this.onInitCallbacks = /* @__PURE__ */ new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */
    get(identifier) {
      const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
      if (!this.instancesDeferred.has(normalizedIdentifier)) {
        const deferred = new Deferred();
        this.instancesDeferred.set(normalizedIdentifier, deferred);
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
          try {
            const instance = this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });
            if (instance) {
              deferred.resolve(instance);
            }
          } catch (e) {
          }
        }
      }
      return this.instancesDeferred.get(normalizedIdentifier).promise;
    }
    getImmediate(options) {
      var _a;
      const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
      const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
        try {
          return this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier
          });
        } catch (e) {
          if (optional) {
            return null;
          } else {
            throw e;
          }
        }
      } else {
        if (optional) {
          return null;
        } else {
          throw Error("Service ".concat(this.name, " is not available"));
        }
      }
    }
    getComponent() {
      return this.component;
    }
    setComponent(component) {
      if (component.name !== this.name) {
        throw Error("Mismatching Component ".concat(component.name, " for Provider ").concat(this.name, "."));
      }
      if (this.component) {
        throw Error("Component for ".concat(this.name, " has already been provided"));
      }
      this.component = component;
      if (!this.shouldAutoInitialize()) {
        return;
      }
      if (isComponentEager(component)) {
        try {
          this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });
        } catch (e) {
        }
      }
      for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
        const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
        try {
          const instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier
          });
          instanceDeferred.resolve(instance);
        } catch (e) {
        }
      }
    }
    clearInstance(identifier = DEFAULT_ENTRY_NAME) {
      this.instancesDeferred.delete(identifier);
      this.instancesOptions.delete(identifier);
      this.instances.delete(identifier);
    }
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    async delete() {
      const services = Array.from(this.instances.values());
      await Promise.all([
        ...services.filter((service) => "INTERNAL" in service).map((service) => service.INTERNAL.delete()),
        ...services.filter((service) => "_delete" in service).map((service) => service._delete())
      ]);
    }
    isComponentSet() {
      return this.component != null;
    }
    isInitialized(identifier = DEFAULT_ENTRY_NAME) {
      return this.instances.has(identifier);
    }
    getOptions(identifier = DEFAULT_ENTRY_NAME) {
      return this.instancesOptions.get(identifier) || {};
    }
    initialize(opts = {}) {
      const { options = {} } = opts;
      const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
      if (this.isInitialized(normalizedIdentifier)) {
        throw Error("".concat(this.name, "(").concat(normalizedIdentifier, ") has already been initialized"));
      }
      if (!this.isComponentSet()) {
        throw Error("Component ".concat(this.name, " has not been registered yet"));
      }
      const instance = this.getOrInitializeService({
        instanceIdentifier: normalizedIdentifier,
        options
      });
      for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
        const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
        if (normalizedIdentifier === normalizedDeferredIdentifier) {
          instanceDeferred.resolve(instance);
        }
      }
      return instance;
    }
    /**
     *
     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
     *
     * @param identifier An optional instance identifier
     * @returns a function to unregister the callback
     */
    onInit(callback, identifier) {
      var _a;
      const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
      const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : /* @__PURE__ */ new Set();
      existingCallbacks.add(callback);
      this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
      const existingInstance = this.instances.get(normalizedIdentifier);
      if (existingInstance) {
        callback(existingInstance, normalizedIdentifier);
      }
      return () => {
        existingCallbacks.delete(callback);
      };
    }
    /**
     * Invoke onInit callbacks synchronously
     * @param instance the service instance`
     */
    invokeOnInitCallbacks(instance, identifier) {
      const callbacks = this.onInitCallbacks.get(identifier);
      if (!callbacks) {
        return;
      }
      for (const callback of callbacks) {
        try {
          callback(instance, identifier);
        } catch (_a) {
        }
      }
    }
    getOrInitializeService({ instanceIdentifier, options = {} }) {
      let instance = this.instances.get(instanceIdentifier);
      if (!instance && this.component) {
        instance = this.component.instanceFactory(this.container, {
          instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
          options
        });
        this.instances.set(instanceIdentifier, instance);
        this.instancesOptions.set(instanceIdentifier, options);
        this.invokeOnInitCallbacks(instance, instanceIdentifier);
        if (this.component.onInstanceCreated) {
          try {
            this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
          } catch (_a) {
          }
        }
      }
      return instance || null;
    }
    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {
      if (this.component) {
        return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
      } else {
        return identifier;
      }
    }
    shouldAutoInitialize() {
      return !!this.component && this.component.instantiationMode !== "EXPLICIT";
    }
  };
  function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? void 0 : identifier;
  }
  function isComponentEager(component) {
    return component.instantiationMode === "EAGER";
  }
  var ComponentContainer = class {
    constructor(name5) {
      this.name = name5;
      this.providers = /* @__PURE__ */ new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */
    addComponent(component) {
      const provider = this.getProvider(component.name);
      if (provider.isComponentSet()) {
        throw new Error("Component ".concat(component.name, " has already been registered with ").concat(this.name));
      }
      provider.setComponent(component);
    }
    addOrOverwriteComponent(component) {
      const provider = this.getProvider(component.name);
      if (provider.isComponentSet()) {
        this.providers.delete(component.name);
      }
      this.addComponent(component);
    }
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */
    getProvider(name5) {
      if (this.providers.has(name5)) {
        return this.providers.get(name5);
      }
      const provider = new Provider(name5, this);
      this.providers.set(name5, provider);
      return provider;
    }
    getProviders() {
      return Array.from(this.providers.values());
    }
  };

  // public/node_modules/@firebase/logger/dist/esm/index.esm2017.js
  var instances = [];
  var LogLevel;
  (function(LogLevel2) {
    LogLevel2[LogLevel2["DEBUG"] = 0] = "DEBUG";
    LogLevel2[LogLevel2["VERBOSE"] = 1] = "VERBOSE";
    LogLevel2[LogLevel2["INFO"] = 2] = "INFO";
    LogLevel2[LogLevel2["WARN"] = 3] = "WARN";
    LogLevel2[LogLevel2["ERROR"] = 4] = "ERROR";
    LogLevel2[LogLevel2["SILENT"] = 5] = "SILENT";
  })(LogLevel || (LogLevel = {}));
  var levelStringToEnum = {
    "debug": LogLevel.DEBUG,
    "verbose": LogLevel.VERBOSE,
    "info": LogLevel.INFO,
    "warn": LogLevel.WARN,
    "error": LogLevel.ERROR,
    "silent": LogLevel.SILENT
  };
  var defaultLogLevel = LogLevel.INFO;
  var ConsoleMethod = {
    [LogLevel.DEBUG]: "log",
    [LogLevel.VERBOSE]: "log",
    [LogLevel.INFO]: "info",
    [LogLevel.WARN]: "warn",
    [LogLevel.ERROR]: "error"
  };
  var defaultLogHandler = (instance, logType, ...args) => {
    if (logType < instance.logLevel) {
      return;
    }
    const now = (/* @__PURE__ */ new Date()).toISOString();
    const method = ConsoleMethod[logType];
    if (method) {
      console[method]("[".concat(now, "]  ").concat(instance.name, ":"), ...args);
    } else {
      throw new Error("Attempted to log a message with an invalid logType (value: ".concat(logType, ")"));
    }
  };
  var Logger = class {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */
    constructor(name5) {
      this.name = name5;
      this._logLevel = defaultLogLevel;
      this._logHandler = defaultLogHandler;
      this._userLogHandler = null;
      instances.push(this);
    }
    get logLevel() {
      return this._logLevel;
    }
    set logLevel(val) {
      if (!(val in LogLevel)) {
        throw new TypeError('Invalid value "'.concat(val, '" assigned to `logLevel`'));
      }
      this._logLevel = val;
    }
    // Workaround for setter/getter having to be the same type.
    setLogLevel(val) {
      this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
    }
    get logHandler() {
      return this._logHandler;
    }
    set logHandler(val) {
      if (typeof val !== "function") {
        throw new TypeError("Value assigned to `logHandler` must be a function");
      }
      this._logHandler = val;
    }
    get userLogHandler() {
      return this._userLogHandler;
    }
    set userLogHandler(val) {
      this._userLogHandler = val;
    }
    /**
     * The functions below are all based on the `console` interface
     */
    debug(...args) {
      this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
      this._logHandler(this, LogLevel.DEBUG, ...args);
    }
    log(...args) {
      this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);
      this._logHandler(this, LogLevel.VERBOSE, ...args);
    }
    info(...args) {
      this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
      this._logHandler(this, LogLevel.INFO, ...args);
    }
    warn(...args) {
      this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
      this._logHandler(this, LogLevel.WARN, ...args);
    }
    error(...args) {
      this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
      this._logHandler(this, LogLevel.ERROR, ...args);
    }
  };

  // public/node_modules/idb/build/wrap-idb-value.js
  var instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);
  var idbProxyableTypes;
  var cursorAdvanceMethods;
  function getIdbProxyableTypes() {
    return idbProxyableTypes || (idbProxyableTypes = [
      IDBDatabase,
      IDBObjectStore,
      IDBIndex,
      IDBCursor,
      IDBTransaction
    ]);
  }
  function getCursorAdvanceMethods() {
    return cursorAdvanceMethods || (cursorAdvanceMethods = [
      IDBCursor.prototype.advance,
      IDBCursor.prototype.continue,
      IDBCursor.prototype.continuePrimaryKey
    ]);
  }
  var cursorRequestMap = /* @__PURE__ */ new WeakMap();
  var transactionDoneMap = /* @__PURE__ */ new WeakMap();
  var transactionStoreNamesMap = /* @__PURE__ */ new WeakMap();
  var transformCache = /* @__PURE__ */ new WeakMap();
  var reverseTransformCache = /* @__PURE__ */ new WeakMap();
  function promisifyRequest(request) {
    const promise = new Promise((resolve, reject) => {
      const unlisten = () => {
        request.removeEventListener("success", success);
        request.removeEventListener("error", error);
      };
      const success = () => {
        resolve(wrap(request.result));
        unlisten();
      };
      const error = () => {
        reject(request.error);
        unlisten();
      };
      request.addEventListener("success", success);
      request.addEventListener("error", error);
    });
    promise.then((value) => {
      if (value instanceof IDBCursor) {
        cursorRequestMap.set(value, request);
      }
    }).catch(() => {
    });
    reverseTransformCache.set(promise, request);
    return promise;
  }
  function cacheDonePromiseForTransaction(tx) {
    if (transactionDoneMap.has(tx))
      return;
    const done = new Promise((resolve, reject) => {
      const unlisten = () => {
        tx.removeEventListener("complete", complete);
        tx.removeEventListener("error", error);
        tx.removeEventListener("abort", error);
      };
      const complete = () => {
        resolve();
        unlisten();
      };
      const error = () => {
        reject(tx.error || new DOMException("AbortError", "AbortError"));
        unlisten();
      };
      tx.addEventListener("complete", complete);
      tx.addEventListener("error", error);
      tx.addEventListener("abort", error);
    });
    transactionDoneMap.set(tx, done);
  }
  var idbProxyTraps = {
    get(target, prop, receiver) {
      if (target instanceof IDBTransaction) {
        if (prop === "done")
          return transactionDoneMap.get(target);
        if (prop === "objectStoreNames") {
          return target.objectStoreNames || transactionStoreNamesMap.get(target);
        }
        if (prop === "store") {
          return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
        }
      }
      return wrap(target[prop]);
    },
    set(target, prop, value) {
      target[prop] = value;
      return true;
    },
    has(target, prop) {
      if (target instanceof IDBTransaction && (prop === "done" || prop === "store")) {
        return true;
      }
      return prop in target;
    }
  };
  function replaceTraps(callback) {
    idbProxyTraps = callback(idbProxyTraps);
  }
  function wrapFunction(func) {
    if (func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype)) {
      return function(storeNames, ...args) {
        const tx = func.call(unwrap(this), storeNames, ...args);
        transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
        return wrap(tx);
      };
    }
    if (getCursorAdvanceMethods().includes(func)) {
      return function(...args) {
        func.apply(unwrap(this), args);
        return wrap(cursorRequestMap.get(this));
      };
    }
    return function(...args) {
      return wrap(func.apply(unwrap(this), args));
    };
  }
  function transformCachableValue(value) {
    if (typeof value === "function")
      return wrapFunction(value);
    if (value instanceof IDBTransaction)
      cacheDonePromiseForTransaction(value);
    if (instanceOfAny(value, getIdbProxyableTypes()))
      return new Proxy(value, idbProxyTraps);
    return value;
  }
  function wrap(value) {
    if (value instanceof IDBRequest)
      return promisifyRequest(value);
    if (transformCache.has(value))
      return transformCache.get(value);
    const newValue = transformCachableValue(value);
    if (newValue !== value) {
      transformCache.set(value, newValue);
      reverseTransformCache.set(newValue, value);
    }
    return newValue;
  }
  var unwrap = (value) => reverseTransformCache.get(value);

  // public/node_modules/idb/build/index.js
  function openDB(name5, version4, { blocked, upgrade, blocking, terminated } = {}) {
    const request = indexedDB.open(name5, version4);
    const openPromise = wrap(request);
    if (upgrade) {
      request.addEventListener("upgradeneeded", (event) => {
        upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));
      });
    }
    if (blocked)
      request.addEventListener("blocked", () => blocked());
    openPromise.then((db) => {
      if (terminated)
        db.addEventListener("close", () => terminated());
      if (blocking)
        db.addEventListener("versionchange", () => blocking());
    }).catch(() => {
    });
    return openPromise;
  }
  var readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"];
  var writeMethods = ["put", "add", "delete", "clear"];
  var cachedMethods = /* @__PURE__ */ new Map();
  function getMethod(target, prop) {
    if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === "string")) {
      return;
    }
    if (cachedMethods.get(prop))
      return cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, "");
    const useIndex = prop !== targetFuncName;
    const isWrite = writeMethods.includes(targetFuncName);
    if (
      // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
      !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))
    ) {
      return;
    }
    const method = async function(storeName, ...args) {
      const tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly");
      let target2 = tx.store;
      if (useIndex)
        target2 = target2.index(args.shift());
      return (await Promise.all([
        target2[targetFuncName](...args),
        isWrite && tx.done
      ]))[0];
    };
    cachedMethods.set(prop, method);
    return method;
  }
  replaceTraps((oldTraps) => __spreadProps(__spreadValues({}, oldTraps), {
    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
  }));

  // public/node_modules/@firebase/app/dist/esm/index.esm2017.js
  var PlatformLoggerServiceImpl = class {
    constructor(container) {
      this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    getPlatformInfoString() {
      const providers = this.container.getProviders();
      return providers.map((provider) => {
        if (isVersionServiceProvider(provider)) {
          const service = provider.getImmediate();
          return "".concat(service.library, "/").concat(service.version);
        } else {
          return null;
        }
      }).filter((logString) => logString).join(" ");
    }
  };
  function isVersionServiceProvider(provider) {
    const component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION";
  }
  var name$o = "@firebase/app";
  var version$1 = "0.9.0";
  var logger = new Logger("@firebase/app");
  var name$n = "@firebase/app-compat";
  var name$m = "@firebase/analytics-compat";
  var name$l = "@firebase/analytics";
  var name$k = "@firebase/app-check-compat";
  var name$j = "@firebase/app-check";
  var name$i = "@firebase/auth";
  var name$h = "@firebase/auth-compat";
  var name$g = "@firebase/database";
  var name$f = "@firebase/database-compat";
  var name$e = "@firebase/functions";
  var name$d = "@firebase/functions-compat";
  var name$c = "@firebase/installations";
  var name$b = "@firebase/installations-compat";
  var name$a = "@firebase/messaging";
  var name$9 = "@firebase/messaging-compat";
  var name$8 = "@firebase/performance";
  var name$7 = "@firebase/performance-compat";
  var name$6 = "@firebase/remote-config";
  var name$5 = "@firebase/remote-config-compat";
  var name$4 = "@firebase/storage";
  var name$3 = "@firebase/storage-compat";
  var name$2 = "@firebase/firestore";
  var name$1 = "@firebase/firestore-compat";
  var name = "firebase";
  var DEFAULT_ENTRY_NAME2 = "[DEFAULT]";
  var PLATFORM_LOG_STRING = {
    [name$o]: "fire-core",
    [name$n]: "fire-core-compat",
    [name$l]: "fire-analytics",
    [name$m]: "fire-analytics-compat",
    [name$j]: "fire-app-check",
    [name$k]: "fire-app-check-compat",
    [name$i]: "fire-auth",
    [name$h]: "fire-auth-compat",
    [name$g]: "fire-rtdb",
    [name$f]: "fire-rtdb-compat",
    [name$e]: "fire-fn",
    [name$d]: "fire-fn-compat",
    [name$c]: "fire-iid",
    [name$b]: "fire-iid-compat",
    [name$a]: "fire-fcm",
    [name$9]: "fire-fcm-compat",
    [name$8]: "fire-perf",
    [name$7]: "fire-perf-compat",
    [name$6]: "fire-rc",
    [name$5]: "fire-rc-compat",
    [name$4]: "fire-gcs",
    [name$3]: "fire-gcs-compat",
    [name$2]: "fire-fst",
    [name$1]: "fire-fst-compat",
    "fire-js": "fire-js",
    [name]: "fire-js-all"
  };
  var _apps = /* @__PURE__ */ new Map();
  var _components = /* @__PURE__ */ new Map();
  function _addComponent(app, component) {
    try {
      app.container.addComponent(component);
    } catch (e) {
      logger.debug("Component ".concat(component.name, " failed to register with FirebaseApp ").concat(app.name), e);
    }
  }
  function _registerComponent(component) {
    const componentName = component.name;
    if (_components.has(componentName)) {
      logger.debug("There were multiple attempts to register component ".concat(componentName, "."));
      return false;
    }
    _components.set(componentName, component);
    for (const app of _apps.values()) {
      _addComponent(app, component);
    }
    return true;
  }
  function _getProvider(app, name5) {
    const heartbeatController = app.container.getProvider("heartbeat").getImmediate({ optional: true });
    if (heartbeatController) {
      void heartbeatController.triggerHeartbeat();
    }
    return app.container.getProvider(name5);
  }
  var ERRORS = {
    [
      "no-app"
      /* AppError.NO_APP */
    ]: "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",
    [
      "bad-app-name"
      /* AppError.BAD_APP_NAME */
    ]: "Illegal App name: '{$appName}",
    [
      "duplicate-app"
      /* AppError.DUPLICATE_APP */
    ]: "Firebase App named '{$appName}' already exists with different options or config",
    [
      "app-deleted"
      /* AppError.APP_DELETED */
    ]: "Firebase App named '{$appName}' already deleted",
    [
      "no-options"
      /* AppError.NO_OPTIONS */
    ]: "Need to provide options, when not being deployed to hosting via source.",
    [
      "invalid-app-argument"
      /* AppError.INVALID_APP_ARGUMENT */
    ]: "firebase.{$appName}() takes either no argument or a Firebase App instance.",
    [
      "invalid-log-argument"
      /* AppError.INVALID_LOG_ARGUMENT */
    ]: "First argument to `onLog` must be null or a function.",
    [
      "idb-open"
      /* AppError.IDB_OPEN */
    ]: "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",
    [
      "idb-get"
      /* AppError.IDB_GET */
    ]: "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",
    [
      "idb-set"
      /* AppError.IDB_WRITE */
    ]: "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",
    [
      "idb-delete"
      /* AppError.IDB_DELETE */
    ]: "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."
  };
  var ERROR_FACTORY = new ErrorFactory("app", "Firebase", ERRORS);
  var FirebaseAppImpl = class {
    constructor(options, config, container) {
      this._isDeleted = false;
      this._options = Object.assign({}, options);
      this._config = Object.assign({}, config);
      this._name = config.name;
      this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
      this._container = container;
      this.container.addComponent(new Component(
        "app",
        () => this,
        "PUBLIC"
        /* ComponentType.PUBLIC */
      ));
    }
    get automaticDataCollectionEnabled() {
      this.checkDestroyed();
      return this._automaticDataCollectionEnabled;
    }
    set automaticDataCollectionEnabled(val) {
      this.checkDestroyed();
      this._automaticDataCollectionEnabled = val;
    }
    get name() {
      this.checkDestroyed();
      return this._name;
    }
    get options() {
      this.checkDestroyed();
      return this._options;
    }
    get config() {
      this.checkDestroyed();
      return this._config;
    }
    get container() {
      return this._container;
    }
    get isDeleted() {
      return this._isDeleted;
    }
    set isDeleted(val) {
      this._isDeleted = val;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */
    checkDestroyed() {
      if (this.isDeleted) {
        throw ERROR_FACTORY.create("app-deleted", { appName: this._name });
      }
    }
  };
  function initializeApp(_options, rawConfig = {}) {
    let options = _options;
    if (typeof rawConfig !== "object") {
      const name6 = rawConfig;
      rawConfig = { name: name6 };
    }
    const config = Object.assign({ name: DEFAULT_ENTRY_NAME2, automaticDataCollectionEnabled: false }, rawConfig);
    const name5 = config.name;
    if (typeof name5 !== "string" || !name5) {
      throw ERROR_FACTORY.create("bad-app-name", {
        appName: String(name5)
      });
    }
    options || (options = getDefaultAppConfig());
    if (!options) {
      throw ERROR_FACTORY.create(
        "no-options"
        /* AppError.NO_OPTIONS */
      );
    }
    const existingApp = _apps.get(name5);
    if (existingApp) {
      if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {
        return existingApp;
      } else {
        throw ERROR_FACTORY.create("duplicate-app", { appName: name5 });
      }
    }
    const container = new ComponentContainer(name5);
    for (const component of _components.values()) {
      container.addComponent(component);
    }
    const newApp = new FirebaseAppImpl(options, config, container);
    _apps.set(name5, newApp);
    return newApp;
  }
  function getApp(name5 = DEFAULT_ENTRY_NAME2) {
    const app = _apps.get(name5);
    if (!app && name5 === DEFAULT_ENTRY_NAME2) {
      return initializeApp();
    }
    if (!app) {
      throw ERROR_FACTORY.create("no-app", { appName: name5 });
    }
    return app;
  }
  function registerVersion(libraryKeyOrName, version4, variant) {
    var _a;
    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
    if (variant) {
      library += "-".concat(variant);
    }
    const libraryMismatch = library.match(/\s|\//);
    const versionMismatch = version4.match(/\s|\//);
    if (libraryMismatch || versionMismatch) {
      const warning = [
        'Unable to register library "'.concat(library, '" with version "').concat(version4, '":')
      ];
      if (libraryMismatch) {
        warning.push('library name "'.concat(library, '" contains illegal characters (whitespace or "/")'));
      }
      if (libraryMismatch && versionMismatch) {
        warning.push("and");
      }
      if (versionMismatch) {
        warning.push('version name "'.concat(version4, '" contains illegal characters (whitespace or "/")'));
      }
      logger.warn(warning.join(" "));
      return;
    }
    _registerComponent(new Component(
      "".concat(library, "-version"),
      () => ({ library, version: version4 }),
      "VERSION"
      /* ComponentType.VERSION */
    ));
  }
  var DB_NAME = "firebase-heartbeat-database";
  var DB_VERSION = 1;
  var STORE_NAME = "firebase-heartbeat-store";
  var dbPromise = null;
  function getDbPromise() {
    if (!dbPromise) {
      dbPromise = openDB(DB_NAME, DB_VERSION, {
        upgrade: (db, oldVersion) => {
          switch (oldVersion) {
            case 0:
              db.createObjectStore(STORE_NAME);
          }
        }
      }).catch((e) => {
        throw ERROR_FACTORY.create("idb-open", {
          originalErrorMessage: e.message
        });
      });
    }
    return dbPromise;
  }
  async function readHeartbeatsFromIndexedDB(app) {
    try {
      const db = await getDbPromise();
      return db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app));
    } catch (e) {
      if (e instanceof FirebaseError) {
        logger.warn(e.message);
      } else {
        const idbGetError = ERROR_FACTORY.create("idb-get", {
          originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
        });
        logger.warn(idbGetError.message);
      }
    }
  }
  async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
    try {
      const db = await getDbPromise();
      const tx = db.transaction(STORE_NAME, "readwrite");
      const objectStore = tx.objectStore(STORE_NAME);
      await objectStore.put(heartbeatObject, computeKey(app));
      return tx.done;
    } catch (e) {
      if (e instanceof FirebaseError) {
        logger.warn(e.message);
      } else {
        const idbGetError = ERROR_FACTORY.create("idb-set", {
          originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
        });
        logger.warn(idbGetError.message);
      }
    }
  }
  function computeKey(app) {
    return "".concat(app.name, "!").concat(app.options.appId);
  }
  var MAX_HEADER_BYTES = 1024;
  var STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1e3;
  var HeartbeatServiceImpl = class {
    constructor(container) {
      this.container = container;
      this._heartbeatsCache = null;
      const app = this.container.getProvider("app").getImmediate();
      this._storage = new HeartbeatStorageImpl(app);
      this._heartbeatsCachePromise = this._storage.read().then((result) => {
        this._heartbeatsCache = result;
        return result;
      });
    }
    /**
     * Called to report a heartbeat. The function will generate
     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
     * to IndexedDB.
     * Note that we only store one heartbeat per day. So if a heartbeat for today is
     * already logged, subsequent calls to this function in the same day will be ignored.
     */
    async triggerHeartbeat() {
      const platformLogger = this.container.getProvider("platform-logger").getImmediate();
      const agent = platformLogger.getPlatformInfoString();
      const date = getUTCDateString();
      if (this._heartbeatsCache === null) {
        this._heartbeatsCache = await this._heartbeatsCachePromise;
      }
      if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some((singleDateHeartbeat) => singleDateHeartbeat.date === date)) {
        return;
      } else {
        this._heartbeatsCache.heartbeats.push({ date, agent });
      }
      this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter((singleDateHeartbeat) => {
        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
        const now = Date.now();
        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
      });
      return this._storage.overwrite(this._heartbeatsCache);
    }
    /**
     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
     * It also clears all heartbeats from memory as well as in IndexedDB.
     *
     * NOTE: Consuming product SDKs should not send the header if this method
     * returns an empty string.
     */
    async getHeartbeatsHeader() {
      if (this._heartbeatsCache === null) {
        await this._heartbeatsCachePromise;
      }
      if (this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0) {
        return "";
      }
      const date = getUTCDateString();
      const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
      const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
      this._heartbeatsCache.lastSentHeartbeatDate = date;
      if (unsentEntries.length > 0) {
        this._heartbeatsCache.heartbeats = unsentEntries;
        await this._storage.overwrite(this._heartbeatsCache);
      } else {
        this._heartbeatsCache.heartbeats = [];
        void this._storage.overwrite(this._heartbeatsCache);
      }
      return headerString;
    }
  };
  function getUTCDateString() {
    const today = /* @__PURE__ */ new Date();
    return today.toISOString().substring(0, 10);
  }
  function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
    const heartbeatsToSend = [];
    let unsentEntries = heartbeatsCache.slice();
    for (const singleDateHeartbeat of heartbeatsCache) {
      const heartbeatEntry = heartbeatsToSend.find((hb) => hb.agent === singleDateHeartbeat.agent);
      if (!heartbeatEntry) {
        heartbeatsToSend.push({
          agent: singleDateHeartbeat.agent,
          dates: [singleDateHeartbeat.date]
        });
        if (countBytes(heartbeatsToSend) > maxSize) {
          heartbeatsToSend.pop();
          break;
        }
      } else {
        heartbeatEntry.dates.push(singleDateHeartbeat.date);
        if (countBytes(heartbeatsToSend) > maxSize) {
          heartbeatEntry.dates.pop();
          break;
        }
      }
      unsentEntries = unsentEntries.slice(1);
    }
    return {
      heartbeatsToSend,
      unsentEntries
    };
  }
  var HeartbeatStorageImpl = class {
    constructor(app) {
      this.app = app;
      this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
    }
    async runIndexedDBEnvironmentCheck() {
      if (!isIndexedDBAvailable()) {
        return false;
      } else {
        return validateIndexedDBOpenable().then(() => true).catch(() => false);
      }
    }
    /**
     * Read all heartbeats.
     */
    async read() {
      const canUseIndexedDB = await this._canUseIndexedDBPromise;
      if (!canUseIndexedDB) {
        return { heartbeats: [] };
      } else {
        const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
        return idbHeartbeatObject || { heartbeats: [] };
      }
    }
    // overwrite the storage with the provided heartbeats
    async overwrite(heartbeatsObject) {
      var _a;
      const canUseIndexedDB = await this._canUseIndexedDBPromise;
      if (!canUseIndexedDB) {
        return;
      } else {
        const existingHeartbeatsObject = await this.read();
        return writeHeartbeatsToIndexedDB(this.app, {
          lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
          heartbeats: heartbeatsObject.heartbeats
        });
      }
    }
    // add heartbeats
    async add(heartbeatsObject) {
      var _a;
      const canUseIndexedDB = await this._canUseIndexedDBPromise;
      if (!canUseIndexedDB) {
        return;
      } else {
        const existingHeartbeatsObject = await this.read();
        return writeHeartbeatsToIndexedDB(this.app, {
          lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
          heartbeats: [
            ...existingHeartbeatsObject.heartbeats,
            ...heartbeatsObject.heartbeats
          ]
        });
      }
    }
  };
  function countBytes(heartbeatsCache) {
    return base64urlEncodeWithoutPadding(
      // heartbeatsCache wrapper properties
      JSON.stringify({ version: 2, heartbeats: heartbeatsCache })
    ).length;
  }
  function registerCoreComponents(variant) {
    _registerComponent(new Component(
      "platform-logger",
      (container) => new PlatformLoggerServiceImpl(container),
      "PRIVATE"
      /* ComponentType.PRIVATE */
    ));
    _registerComponent(new Component(
      "heartbeat",
      (container) => new HeartbeatServiceImpl(container),
      "PRIVATE"
      /* ComponentType.PRIVATE */
    ));
    registerVersion(name$o, version$1, variant);
    registerVersion(name$o, version$1, "esm2017");
    registerVersion("fire-js", "");
  }
  registerCoreComponents("");

  // public/node_modules/firebase/app/dist/esm/index.esm.js
  var name2 = "firebase";
  var version = "9.15.0";
  registerVersion(name2, version, "app");

  // public/node_modules/@firebase/installations/dist/esm/index.esm2017.js
  var name3 = "@firebase/installations";
  var version2 = "0.6.0";
  var PENDING_TIMEOUT_MS = 1e4;
  var PACKAGE_VERSION = "w:".concat(version2);
  var INTERNAL_AUTH_VERSION = "FIS_v2";
  var INSTALLATIONS_API_URL = "https://firebaseinstallations.googleapis.com/v1";
  var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1e3;
  var SERVICE = "installations";
  var SERVICE_NAME = "Installations";
  var ERROR_DESCRIPTION_MAP = {
    [
      "missing-app-config-values"
      /* ErrorCode.MISSING_APP_CONFIG_VALUES */
    ]: 'Missing App configuration value: "{$valueName}"',
    [
      "not-registered"
      /* ErrorCode.NOT_REGISTERED */
    ]: "Firebase Installation is not registered.",
    [
      "installation-not-found"
      /* ErrorCode.INSTALLATION_NOT_FOUND */
    ]: "Firebase Installation not found.",
    [
      "request-failed"
      /* ErrorCode.REQUEST_FAILED */
    ]: '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
    [
      "app-offline"
      /* ErrorCode.APP_OFFLINE */
    ]: "Could not process request. Application offline.",
    [
      "delete-pending-registration"
      /* ErrorCode.DELETE_PENDING_REGISTRATION */
    ]: "Can't delete installation while there is a pending registration request."
  };
  var ERROR_FACTORY2 = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
  function isServerError(error) {
    return error instanceof FirebaseError && error.code.includes(
      "request-failed"
      /* ErrorCode.REQUEST_FAILED */
    );
  }
  function getInstallationsEndpoint({ projectId }) {
    return "".concat(INSTALLATIONS_API_URL, "/projects/").concat(projectId, "/installations");
  }
  function extractAuthTokenInfoFromResponse(response) {
    return {
      token: response.token,
      requestStatus: 2,
      expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
      creationTime: Date.now()
    };
  }
  async function getErrorFromResponse(requestName, response) {
    const responseJson = await response.json();
    const errorData = responseJson.error;
    return ERROR_FACTORY2.create("request-failed", {
      requestName,
      serverCode: errorData.code,
      serverMessage: errorData.message,
      serverStatus: errorData.status
    });
  }
  function getHeaders({ apiKey }) {
    return new Headers({
      "Content-Type": "application/json",
      Accept: "application/json",
      "x-goog-api-key": apiKey
    });
  }
  function getHeadersWithAuth(appConfig, { refreshToken }) {
    const headers = getHeaders(appConfig);
    headers.append("Authorization", getAuthorizationHeader(refreshToken));
    return headers;
  }
  async function retryIfServerError(fn) {
    const result = await fn();
    if (result.status >= 500 && result.status < 600) {
      return fn();
    }
    return result;
  }
  function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
    return Number(responseExpiresIn.replace("s", "000"));
  }
  function getAuthorizationHeader(refreshToken) {
    return "".concat(INTERNAL_AUTH_VERSION, " ").concat(refreshToken);
  }
  async function createInstallationRequest({ appConfig, heartbeatServiceProvider }, { fid }) {
    const endpoint = getInstallationsEndpoint(appConfig);
    const headers = getHeaders(appConfig);
    const heartbeatService = heartbeatServiceProvider.getImmediate({
      optional: true
    });
    if (heartbeatService) {
      const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();
      if (heartbeatsHeader) {
        headers.append("x-firebase-client", heartbeatsHeader);
      }
    }
    const body = {
      fid,
      authVersion: INTERNAL_AUTH_VERSION,
      appId: appConfig.appId,
      sdkVersion: PACKAGE_VERSION
    };
    const request = {
      method: "POST",
      headers,
      body: JSON.stringify(body)
    };
    const response = await retryIfServerError(() => fetch(endpoint, request));
    if (response.ok) {
      const responseValue = await response.json();
      const registeredInstallationEntry = {
        fid: responseValue.fid || fid,
        registrationStatus: 2,
        refreshToken: responseValue.refreshToken,
        authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
      };
      return registeredInstallationEntry;
    } else {
      throw await getErrorFromResponse("Create Installation", response);
    }
  }
  function sleep(ms) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms);
    });
  }
  function bufferToBase64UrlSafe(array) {
    const b64 = btoa(String.fromCharCode(...array));
    return b64.replace(/\+/g, "-").replace(/\//g, "_");
  }
  var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
  var INVALID_FID = "";
  function generateFid() {
    try {
      const fidByteArray = new Uint8Array(17);
      const crypto2 = self.crypto || self.msCrypto;
      crypto2.getRandomValues(fidByteArray);
      fidByteArray[0] = 112 + fidByteArray[0] % 16;
      const fid = encode(fidByteArray);
      return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
    } catch (_a) {
      return INVALID_FID;
    }
  }
  function encode(fidByteArray) {
    const b64String = bufferToBase64UrlSafe(fidByteArray);
    return b64String.substr(0, 22);
  }
  function getKey(appConfig) {
    return "".concat(appConfig.appName, "!").concat(appConfig.appId);
  }
  var fidChangeCallbacks = /* @__PURE__ */ new Map();
  function fidChanged(appConfig, fid) {
    const key = getKey(appConfig);
    callFidChangeCallbacks(key, fid);
    broadcastFidChange(key, fid);
  }
  function callFidChangeCallbacks(key, fid) {
    const callbacks = fidChangeCallbacks.get(key);
    if (!callbacks) {
      return;
    }
    for (const callback of callbacks) {
      callback(fid);
    }
  }
  function broadcastFidChange(key, fid) {
    const channel = getBroadcastChannel();
    if (channel) {
      channel.postMessage({ key, fid });
    }
    closeBroadcastChannel();
  }
  var broadcastChannel = null;
  function getBroadcastChannel() {
    if (!broadcastChannel && "BroadcastChannel" in self) {
      broadcastChannel = new BroadcastChannel("[Firebase] FID Change");
      broadcastChannel.onmessage = (e) => {
        callFidChangeCallbacks(e.data.key, e.data.fid);
      };
    }
    return broadcastChannel;
  }
  function closeBroadcastChannel() {
    if (fidChangeCallbacks.size === 0 && broadcastChannel) {
      broadcastChannel.close();
      broadcastChannel = null;
    }
  }
  var DATABASE_NAME = "firebase-installations-database";
  var DATABASE_VERSION = 1;
  var OBJECT_STORE_NAME = "firebase-installations-store";
  var dbPromise2 = null;
  function getDbPromise2() {
    if (!dbPromise2) {
      dbPromise2 = openDB(DATABASE_NAME, DATABASE_VERSION, {
        upgrade: (db, oldVersion) => {
          switch (oldVersion) {
            case 0:
              db.createObjectStore(OBJECT_STORE_NAME);
          }
        }
      });
    }
    return dbPromise2;
  }
  async function set(appConfig, value) {
    const key = getKey(appConfig);
    const db = await getDbPromise2();
    const tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
    const objectStore = tx.objectStore(OBJECT_STORE_NAME);
    const oldValue = await objectStore.get(key);
    await objectStore.put(value, key);
    await tx.done;
    if (!oldValue || oldValue.fid !== value.fid) {
      fidChanged(appConfig, value.fid);
    }
    return value;
  }
  async function remove(appConfig) {
    const key = getKey(appConfig);
    const db = await getDbPromise2();
    const tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
    await tx.objectStore(OBJECT_STORE_NAME).delete(key);
    await tx.done;
  }
  async function update(appConfig, updateFn) {
    const key = getKey(appConfig);
    const db = await getDbPromise2();
    const tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
    const store = tx.objectStore(OBJECT_STORE_NAME);
    const oldValue = await store.get(key);
    const newValue = updateFn(oldValue);
    if (newValue === void 0) {
      await store.delete(key);
    } else {
      await store.put(newValue, key);
    }
    await tx.done;
    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
      fidChanged(appConfig, newValue.fid);
    }
    return newValue;
  }
  async function getInstallationEntry(installations) {
    let registrationPromise;
    const installationEntry = await update(installations.appConfig, (oldEntry) => {
      const installationEntry2 = updateOrCreateInstallationEntry(oldEntry);
      const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry2);
      registrationPromise = entryWithPromise.registrationPromise;
      return entryWithPromise.installationEntry;
    });
    if (installationEntry.fid === INVALID_FID) {
      return { installationEntry: await registrationPromise };
    }
    return {
      installationEntry,
      registrationPromise
    };
  }
  function updateOrCreateInstallationEntry(oldEntry) {
    const entry = oldEntry || {
      fid: generateFid(),
      registrationStatus: 0
      /* RequestStatus.NOT_STARTED */
    };
    return clearTimedOutRequest(entry);
  }
  function triggerRegistrationIfNecessary(installations, installationEntry) {
    if (installationEntry.registrationStatus === 0) {
      if (!navigator.onLine) {
        const registrationPromiseWithError = Promise.reject(ERROR_FACTORY2.create(
          "app-offline"
          /* ErrorCode.APP_OFFLINE */
        ));
        return {
          installationEntry,
          registrationPromise: registrationPromiseWithError
        };
      }
      const inProgressEntry = {
        fid: installationEntry.fid,
        registrationStatus: 1,
        registrationTime: Date.now()
      };
      const registrationPromise = registerInstallation(installations, inProgressEntry);
      return { installationEntry: inProgressEntry, registrationPromise };
    } else if (installationEntry.registrationStatus === 1) {
      return {
        installationEntry,
        registrationPromise: waitUntilFidRegistration(installations)
      };
    } else {
      return { installationEntry };
    }
  }
  async function registerInstallation(installations, installationEntry) {
    try {
      const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);
      return set(installations.appConfig, registeredInstallationEntry);
    } catch (e) {
      if (isServerError(e) && e.customData.serverCode === 409) {
        await remove(installations.appConfig);
      } else {
        await set(installations.appConfig, {
          fid: installationEntry.fid,
          registrationStatus: 0
          /* RequestStatus.NOT_STARTED */
        });
      }
      throw e;
    }
  }
  async function waitUntilFidRegistration(installations) {
    let entry = await updateInstallationRequest(installations.appConfig);
    while (entry.registrationStatus === 1) {
      await sleep(100);
      entry = await updateInstallationRequest(installations.appConfig);
    }
    if (entry.registrationStatus === 0) {
      const { installationEntry, registrationPromise } = await getInstallationEntry(installations);
      if (registrationPromise) {
        return registrationPromise;
      } else {
        return installationEntry;
      }
    }
    return entry;
  }
  function updateInstallationRequest(appConfig) {
    return update(appConfig, (oldEntry) => {
      if (!oldEntry) {
        throw ERROR_FACTORY2.create(
          "installation-not-found"
          /* ErrorCode.INSTALLATION_NOT_FOUND */
        );
      }
      return clearTimedOutRequest(oldEntry);
    });
  }
  function clearTimedOutRequest(entry) {
    if (hasInstallationRequestTimedOut(entry)) {
      return {
        fid: entry.fid,
        registrationStatus: 0
        /* RequestStatus.NOT_STARTED */
      };
    }
    return entry;
  }
  function hasInstallationRequestTimedOut(installationEntry) {
    return installationEntry.registrationStatus === 1 && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();
  }
  async function generateAuthTokenRequest({ appConfig, heartbeatServiceProvider }, installationEntry) {
    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
    const headers = getHeadersWithAuth(appConfig, installationEntry);
    const heartbeatService = heartbeatServiceProvider.getImmediate({
      optional: true
    });
    if (heartbeatService) {
      const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();
      if (heartbeatsHeader) {
        headers.append("x-firebase-client", heartbeatsHeader);
      }
    }
    const body = {
      installation: {
        sdkVersion: PACKAGE_VERSION,
        appId: appConfig.appId
      }
    };
    const request = {
      method: "POST",
      headers,
      body: JSON.stringify(body)
    };
    const response = await retryIfServerError(() => fetch(endpoint, request));
    if (response.ok) {
      const responseValue = await response.json();
      const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
      return completedAuthToken;
    } else {
      throw await getErrorFromResponse("Generate Auth Token", response);
    }
  }
  function getGenerateAuthTokenEndpoint(appConfig, { fid }) {
    return "".concat(getInstallationsEndpoint(appConfig), "/").concat(fid, "/authTokens:generate");
  }
  async function refreshAuthToken(installations, forceRefresh = false) {
    let tokenPromise;
    const entry = await update(installations.appConfig, (oldEntry) => {
      if (!isEntryRegistered(oldEntry)) {
        throw ERROR_FACTORY2.create(
          "not-registered"
          /* ErrorCode.NOT_REGISTERED */
        );
      }
      const oldAuthToken = oldEntry.authToken;
      if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
        return oldEntry;
      } else if (oldAuthToken.requestStatus === 1) {
        tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);
        return oldEntry;
      } else {
        if (!navigator.onLine) {
          throw ERROR_FACTORY2.create(
            "app-offline"
            /* ErrorCode.APP_OFFLINE */
          );
        }
        const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
        tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);
        return inProgressEntry;
      }
    });
    const authToken = tokenPromise ? await tokenPromise : entry.authToken;
    return authToken;
  }
  async function waitUntilAuthTokenRequest(installations, forceRefresh) {
    let entry = await updateAuthTokenRequest(installations.appConfig);
    while (entry.authToken.requestStatus === 1) {
      await sleep(100);
      entry = await updateAuthTokenRequest(installations.appConfig);
    }
    const authToken = entry.authToken;
    if (authToken.requestStatus === 0) {
      return refreshAuthToken(installations, forceRefresh);
    } else {
      return authToken;
    }
  }
  function updateAuthTokenRequest(appConfig) {
    return update(appConfig, (oldEntry) => {
      if (!isEntryRegistered(oldEntry)) {
        throw ERROR_FACTORY2.create(
          "not-registered"
          /* ErrorCode.NOT_REGISTERED */
        );
      }
      const oldAuthToken = oldEntry.authToken;
      if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
        return Object.assign(Object.assign({}, oldEntry), { authToken: {
          requestStatus: 0
          /* RequestStatus.NOT_STARTED */
        } });
      }
      return oldEntry;
    });
  }
  async function fetchAuthTokenFromServer(installations, installationEntry) {
    try {
      const authToken = await generateAuthTokenRequest(installations, installationEntry);
      const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken });
      await set(installations.appConfig, updatedInstallationEntry);
      return authToken;
    } catch (e) {
      if (isServerError(e) && (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {
        await remove(installations.appConfig);
      } else {
        const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken: {
          requestStatus: 0
          /* RequestStatus.NOT_STARTED */
        } });
        await set(installations.appConfig, updatedInstallationEntry);
      }
      throw e;
    }
  }
  function isEntryRegistered(installationEntry) {
    return installationEntry !== void 0 && installationEntry.registrationStatus === 2;
  }
  function isAuthTokenValid(authToken) {
    return authToken.requestStatus === 2 && !isAuthTokenExpired(authToken);
  }
  function isAuthTokenExpired(authToken) {
    const now = Date.now();
    return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;
  }
  function makeAuthTokenRequestInProgressEntry(oldEntry) {
    const inProgressAuthToken = {
      requestStatus: 1,
      requestTime: Date.now()
    };
    return Object.assign(Object.assign({}, oldEntry), { authToken: inProgressAuthToken });
  }
  function hasAuthTokenRequestTimedOut(authToken) {
    return authToken.requestStatus === 1 && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();
  }
  async function getId(installations) {
    const installationsImpl = installations;
    const { installationEntry, registrationPromise } = await getInstallationEntry(installationsImpl);
    if (registrationPromise) {
      registrationPromise.catch(console.error);
    } else {
      refreshAuthToken(installationsImpl).catch(console.error);
    }
    return installationEntry.fid;
  }
  async function getToken(installations, forceRefresh = false) {
    const installationsImpl = installations;
    await completeInstallationRegistration(installationsImpl);
    const authToken = await refreshAuthToken(installationsImpl, forceRefresh);
    return authToken.token;
  }
  async function completeInstallationRegistration(installations) {
    const { registrationPromise } = await getInstallationEntry(installations);
    if (registrationPromise) {
      await registrationPromise;
    }
  }
  function extractAppConfig(app) {
    if (!app || !app.options) {
      throw getMissingValueError("App Configuration");
    }
    if (!app.name) {
      throw getMissingValueError("App Name");
    }
    const configKeys = [
      "projectId",
      "apiKey",
      "appId"
    ];
    for (const keyName of configKeys) {
      if (!app.options[keyName]) {
        throw getMissingValueError(keyName);
      }
    }
    return {
      appName: app.name,
      projectId: app.options.projectId,
      apiKey: app.options.apiKey,
      appId: app.options.appId
    };
  }
  function getMissingValueError(valueName) {
    return ERROR_FACTORY2.create("missing-app-config-values", {
      valueName
    });
  }
  var INSTALLATIONS_NAME = "installations";
  var INSTALLATIONS_NAME_INTERNAL = "installations-internal";
  var publicFactory = (container) => {
    const app = container.getProvider("app").getImmediate();
    const appConfig = extractAppConfig(app);
    const heartbeatServiceProvider = _getProvider(app, "heartbeat");
    const installationsImpl = {
      app,
      appConfig,
      heartbeatServiceProvider,
      _delete: () => Promise.resolve()
    };
    return installationsImpl;
  };
  var internalFactory = (container) => {
    const app = container.getProvider("app").getImmediate();
    const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();
    const installationsInternal = {
      getId: () => getId(installations),
      getToken: (forceRefresh) => getToken(installations, forceRefresh)
    };
    return installationsInternal;
  };
  function registerInstallations() {
    _registerComponent(new Component(
      INSTALLATIONS_NAME,
      publicFactory,
      "PUBLIC"
      /* ComponentType.PUBLIC */
    ));
    _registerComponent(new Component(
      INSTALLATIONS_NAME_INTERNAL,
      internalFactory,
      "PRIVATE"
      /* ComponentType.PRIVATE */
    ));
  }
  registerInstallations();
  registerVersion(name3, version2);
  registerVersion(name3, version2, "esm2017");

  // public/node_modules/@firebase/performance/dist/esm/index.esm2017.js
  var name4 = "@firebase/performance";
  var version3 = "0.6.0";
  var SDK_VERSION = version3;
  var TRACE_START_MARK_PREFIX = "FB-PERF-TRACE-START";
  var TRACE_STOP_MARK_PREFIX = "FB-PERF-TRACE-STOP";
  var TRACE_MEASURE_PREFIX = "FB-PERF-TRACE-MEASURE";
  var OOB_TRACE_PAGE_LOAD_PREFIX = "_wt_";
  var FIRST_PAINT_COUNTER_NAME = "_fp";
  var FIRST_CONTENTFUL_PAINT_COUNTER_NAME = "_fcp";
  var FIRST_INPUT_DELAY_COUNTER_NAME = "_fid";
  var CONFIG_LOCAL_STORAGE_KEY = "@firebase/performance/config";
  var CONFIG_EXPIRY_LOCAL_STORAGE_KEY = "@firebase/performance/configexpire";
  var SERVICE2 = "performance";
  var SERVICE_NAME2 = "Performance";
  var ERROR_DESCRIPTION_MAP2 = {
    [
      "trace started"
      /* ErrorCode.TRACE_STARTED_BEFORE */
    ]: "Trace {$traceName} was started before.",
    [
      "trace stopped"
      /* ErrorCode.TRACE_STOPPED_BEFORE */
    ]: "Trace {$traceName} is not running.",
    [
      "nonpositive trace startTime"
      /* ErrorCode.NONPOSITIVE_TRACE_START_TIME */
    ]: "Trace {$traceName} startTime should be positive.",
    [
      "nonpositive trace duration"
      /* ErrorCode.NONPOSITIVE_TRACE_DURATION */
    ]: "Trace {$traceName} duration should be positive.",
    [
      "no window"
      /* ErrorCode.NO_WINDOW */
    ]: "Window is not available.",
    [
      "no app id"
      /* ErrorCode.NO_APP_ID */
    ]: "App id is not available.",
    [
      "no project id"
      /* ErrorCode.NO_PROJECT_ID */
    ]: "Project id is not available.",
    [
      "no api key"
      /* ErrorCode.NO_API_KEY */
    ]: "Api key is not available.",
    [
      "invalid cc log"
      /* ErrorCode.INVALID_CC_LOG */
    ]: "Attempted to queue invalid cc event",
    [
      "FB not default"
      /* ErrorCode.FB_NOT_DEFAULT */
    ]: "Performance can only start when Firebase app instance is the default one.",
    [
      "RC response not ok"
      /* ErrorCode.RC_NOT_OK */
    ]: "RC response is not ok",
    [
      "invalid attribute name"
      /* ErrorCode.INVALID_ATTRIBUTE_NAME */
    ]: "Attribute name {$attributeName} is invalid.",
    [
      "invalid attribute value"
      /* ErrorCode.INVALID_ATTRIBUTE_VALUE */
    ]: "Attribute value {$attributeValue} is invalid.",
    [
      "invalid custom metric name"
      /* ErrorCode.INVALID_CUSTOM_METRIC_NAME */
    ]: "Custom metric name {$customMetricName} is invalid",
    [
      "invalid String merger input"
      /* ErrorCode.INVALID_STRING_MERGER_PARAMETER */
    ]: "Input for String merger is invalid, contact support team to resolve.",
    [
      "already initialized"
      /* ErrorCode.ALREADY_INITIALIZED */
    ]: "initializePerformance() has already been called with different options. To avoid this error, call initializePerformance() with the same options as when it was originally called, or call getPerformance() to return the already initialized instance."
  };
  var ERROR_FACTORY3 = new ErrorFactory(SERVICE2, SERVICE_NAME2, ERROR_DESCRIPTION_MAP2);
  var consoleLogger = new Logger(SERVICE_NAME2);
  consoleLogger.logLevel = LogLevel.INFO;
  var apiInstance;
  var windowInstance;
  var Api = class _Api {
    constructor(window2) {
      this.window = window2;
      if (!window2) {
        throw ERROR_FACTORY3.create(
          "no window"
          /* ErrorCode.NO_WINDOW */
        );
      }
      this.performance = window2.performance;
      this.PerformanceObserver = window2.PerformanceObserver;
      this.windowLocation = window2.location;
      this.navigator = window2.navigator;
      this.document = window2.document;
      if (this.navigator && this.navigator.cookieEnabled) {
        this.localStorage = window2.localStorage;
      }
      if (window2.perfMetrics && window2.perfMetrics.onFirstInputDelay) {
        this.onFirstInputDelay = window2.perfMetrics.onFirstInputDelay;
      }
    }
    getUrl() {
      return this.windowLocation.href.split("?")[0];
    }
    mark(name5) {
      if (!this.performance || !this.performance.mark) {
        return;
      }
      this.performance.mark(name5);
    }
    measure(measureName, mark1, mark2) {
      if (!this.performance || !this.performance.measure) {
        return;
      }
      this.performance.measure(measureName, mark1, mark2);
    }
    getEntriesByType(type) {
      if (!this.performance || !this.performance.getEntriesByType) {
        return [];
      }
      return this.performance.getEntriesByType(type);
    }
    getEntriesByName(name5) {
      if (!this.performance || !this.performance.getEntriesByName) {
        return [];
      }
      return this.performance.getEntriesByName(name5);
    }
    getTimeOrigin() {
      return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);
    }
    requiredApisAvailable() {
      if (!fetch || !Promise || !areCookiesEnabled()) {
        consoleLogger.info("Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.");
        return false;
      }
      if (!isIndexedDBAvailable()) {
        consoleLogger.info("IndexedDB is not supported by current browswer");
        return false;
      }
      return true;
    }
    setupObserver(entryType, callback) {
      if (!this.PerformanceObserver) {
        return;
      }
      const observer = new this.PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          callback(entry);
        }
      });
      observer.observe({ entryTypes: [entryType] });
    }
    static getInstance() {
      if (apiInstance === void 0) {
        apiInstance = new _Api(windowInstance);
      }
      return apiInstance;
    }
  };
  function setupApi(window2) {
    windowInstance = window2;
  }
  var iid;
  function getIidPromise(installationsService) {
    const iidPromise = installationsService.getId();
    iidPromise.then((iidVal) => {
      iid = iidVal;
    });
    return iidPromise;
  }
  function getIid() {
    return iid;
  }
  function getAuthTokenPromise(installationsService) {
    const authTokenPromise = installationsService.getToken();
    authTokenPromise.then((authTokenVal) => {
    });
    return authTokenPromise;
  }
  function mergeStrings(part1, part2) {
    const sizeDiff = part1.length - part2.length;
    if (sizeDiff < 0 || sizeDiff > 1) {
      throw ERROR_FACTORY3.create(
        "invalid String merger input"
        /* ErrorCode.INVALID_STRING_MERGER_PARAMETER */
      );
    }
    const resultArray = [];
    for (let i = 0; i < part1.length; i++) {
      resultArray.push(part1.charAt(i));
      if (part2.length > i) {
        resultArray.push(part2.charAt(i));
      }
    }
    return resultArray.join("");
  }
  var settingsServiceInstance;
  var SettingsService = class _SettingsService {
    constructor() {
      this.instrumentationEnabled = true;
      this.dataCollectionEnabled = true;
      this.loggingEnabled = false;
      this.tracesSamplingRate = 1;
      this.networkRequestsSamplingRate = 1;
      this.logEndPointUrl = "https://firebaselogging.googleapis.com/v0cc/log?format=json_proto";
      this.flTransportEndpointUrl = mergeStrings("hts/frbslgigp.ogepscmv/ieo/eaylg", "tp:/ieaeogn-agolai.o/1frlglgc/o");
      this.transportKey = mergeStrings("AzSC8r6ReiGqFMyfvgow", "Iayx0u-XT3vksVM-pIV");
      this.logSource = 462;
      this.logTraceAfterSampling = false;
      this.logNetworkAfterSampling = false;
      this.configTimeToLive = 12;
    }
    getFlTransportFullUrl() {
      return this.flTransportEndpointUrl.concat("?key=", this.transportKey);
    }
    static getInstance() {
      if (settingsServiceInstance === void 0) {
        settingsServiceInstance = new _SettingsService();
      }
      return settingsServiceInstance;
    }
  };
  var VisibilityState;
  (function(VisibilityState2) {
    VisibilityState2[VisibilityState2["UNKNOWN"] = 0] = "UNKNOWN";
    VisibilityState2[VisibilityState2["VISIBLE"] = 1] = "VISIBLE";
    VisibilityState2[VisibilityState2["HIDDEN"] = 2] = "HIDDEN";
  })(VisibilityState || (VisibilityState = {}));
  var RESERVED_ATTRIBUTE_PREFIXES = ["firebase_", "google_", "ga_"];
  var ATTRIBUTE_FORMAT_REGEX = new RegExp("^[a-zA-Z]\\w*$");
  var MAX_ATTRIBUTE_NAME_LENGTH = 40;
  var MAX_ATTRIBUTE_VALUE_LENGTH = 100;
  function getServiceWorkerStatus() {
    const navigator2 = Api.getInstance().navigator;
    if (navigator2 === null || navigator2 === void 0 ? void 0 : navigator2.serviceWorker) {
      if (navigator2.serviceWorker.controller) {
        return 2;
      } else {
        return 3;
      }
    } else {
      return 1;
    }
  }
  function getVisibilityState() {
    const document2 = Api.getInstance().document;
    const visibilityState = document2.visibilityState;
    switch (visibilityState) {
      case "visible":
        return VisibilityState.VISIBLE;
      case "hidden":
        return VisibilityState.HIDDEN;
      default:
        return VisibilityState.UNKNOWN;
    }
  }
  function getEffectiveConnectionType() {
    const navigator2 = Api.getInstance().navigator;
    const navigatorConnection = navigator2.connection;
    const effectiveType = navigatorConnection && navigatorConnection.effectiveType;
    switch (effectiveType) {
      case "slow-2g":
        return 1;
      case "2g":
        return 2;
      case "3g":
        return 3;
      case "4g":
        return 4;
      default:
        return 0;
    }
  }
  function isValidCustomAttributeName(name5) {
    if (name5.length === 0 || name5.length > MAX_ATTRIBUTE_NAME_LENGTH) {
      return false;
    }
    const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some((prefix) => name5.startsWith(prefix));
    return !matchesReservedPrefix && !!name5.match(ATTRIBUTE_FORMAT_REGEX);
  }
  function isValidCustomAttributeValue(value) {
    return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;
  }
  function getAppId(firebaseApp) {
    var _a;
    const appId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.appId;
    if (!appId) {
      throw ERROR_FACTORY3.create(
        "no app id"
        /* ErrorCode.NO_APP_ID */
      );
    }
    return appId;
  }
  function getProjectId(firebaseApp) {
    var _a;
    const projectId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.projectId;
    if (!projectId) {
      throw ERROR_FACTORY3.create(
        "no project id"
        /* ErrorCode.NO_PROJECT_ID */
      );
    }
    return projectId;
  }
  function getApiKey(firebaseApp) {
    var _a;
    const apiKey = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.apiKey;
    if (!apiKey) {
      throw ERROR_FACTORY3.create(
        "no api key"
        /* ErrorCode.NO_API_KEY */
      );
    }
    return apiKey;
  }
  var REMOTE_CONFIG_SDK_VERSION = "0.0.1";
  var DEFAULT_CONFIGS = {
    loggingEnabled: true
  };
  var FIS_AUTH_PREFIX = "FIREBASE_INSTALLATIONS_AUTH";
  function getConfig(performanceController, iid2) {
    const config = getStoredConfig();
    if (config) {
      processConfig(config);
      return Promise.resolve();
    }
    return getRemoteConfig(performanceController, iid2).then(processConfig).then(
      (config2) => storeConfig(config2),
      /** Do nothing for error, use defaults set in settings service. */
      () => {
      }
    );
  }
  function getStoredConfig() {
    const localStorage = Api.getInstance().localStorage;
    if (!localStorage) {
      return;
    }
    const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);
    if (!expiryString || !configValid(expiryString)) {
      return;
    }
    const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);
    if (!configStringified) {
      return;
    }
    try {
      const configResponse = JSON.parse(configStringified);
      return configResponse;
    } catch (_a) {
      return;
    }
  }
  function storeConfig(config) {
    const localStorage = Api.getInstance().localStorage;
    if (!config || !localStorage) {
      return;
    }
    localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));
    localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1e3));
  }
  var COULD_NOT_GET_CONFIG_MSG = "Could not fetch config, will use default configs";
  function getRemoteConfig(performanceController, iid2) {
    return getAuthTokenPromise(performanceController.installations).then((authToken) => {
      const projectId = getProjectId(performanceController.app);
      const apiKey = getApiKey(performanceController.app);
      const configEndPoint = "https://firebaseremoteconfig.googleapis.com/v1/projects/".concat(projectId, "/namespaces/fireperf:fetch?key=").concat(apiKey);
      const request = new Request(configEndPoint, {
        method: "POST",
        headers: { Authorization: "".concat(FIS_AUTH_PREFIX, " ").concat(authToken) },
        /* eslint-disable camelcase */
        body: JSON.stringify({
          app_instance_id: iid2,
          app_instance_id_token: authToken,
          app_id: getAppId(performanceController.app),
          app_version: SDK_VERSION,
          sdk_version: REMOTE_CONFIG_SDK_VERSION
        })
        /* eslint-enable camelcase */
      });
      return fetch(request).then((response) => {
        if (response.ok) {
          return response.json();
        }
        throw ERROR_FACTORY3.create(
          "RC response not ok"
          /* ErrorCode.RC_NOT_OK */
        );
      });
    }).catch(() => {
      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);
      return void 0;
    });
  }
  function processConfig(config) {
    if (!config) {
      return config;
    }
    const settingsServiceInstance2 = SettingsService.getInstance();
    const entries = config.entries || {};
    if (entries.fpr_enabled !== void 0) {
      settingsServiceInstance2.loggingEnabled = String(entries.fpr_enabled) === "true";
    } else {
      settingsServiceInstance2.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;
    }
    if (entries.fpr_log_source) {
      settingsServiceInstance2.logSource = Number(entries.fpr_log_source);
    } else if (DEFAULT_CONFIGS.logSource) {
      settingsServiceInstance2.logSource = DEFAULT_CONFIGS.logSource;
    }
    if (entries.fpr_log_endpoint_url) {
      settingsServiceInstance2.logEndPointUrl = entries.fpr_log_endpoint_url;
    } else if (DEFAULT_CONFIGS.logEndPointUrl) {
      settingsServiceInstance2.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;
    }
    if (entries.fpr_log_transport_key) {
      settingsServiceInstance2.transportKey = entries.fpr_log_transport_key;
    } else if (DEFAULT_CONFIGS.transportKey) {
      settingsServiceInstance2.transportKey = DEFAULT_CONFIGS.transportKey;
    }
    if (entries.fpr_vc_network_request_sampling_rate !== void 0) {
      settingsServiceInstance2.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);
    } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== void 0) {
      settingsServiceInstance2.networkRequestsSamplingRate = DEFAULT_CONFIGS.networkRequestsSamplingRate;
    }
    if (entries.fpr_vc_trace_sampling_rate !== void 0) {
      settingsServiceInstance2.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);
    } else if (DEFAULT_CONFIGS.tracesSamplingRate !== void 0) {
      settingsServiceInstance2.tracesSamplingRate = DEFAULT_CONFIGS.tracesSamplingRate;
    }
    settingsServiceInstance2.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance2.tracesSamplingRate);
    settingsServiceInstance2.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance2.networkRequestsSamplingRate);
    return config;
  }
  function configValid(expiry) {
    return Number(expiry) > Date.now();
  }
  function shouldLogAfterSampling(samplingRate) {
    return Math.random() <= samplingRate;
  }
  var initializationStatus = 1;
  var initializationPromise;
  function getInitializationPromise(performanceController) {
    initializationStatus = 2;
    initializationPromise = initializationPromise || initializePerf(performanceController);
    return initializationPromise;
  }
  function isPerfInitialized() {
    return initializationStatus === 3;
  }
  function initializePerf(performanceController) {
    return getDocumentReadyComplete().then(() => getIidPromise(performanceController.installations)).then((iid2) => getConfig(performanceController, iid2)).then(() => changeInitializationStatus(), () => changeInitializationStatus());
  }
  function getDocumentReadyComplete() {
    const document2 = Api.getInstance().document;
    return new Promise((resolve) => {
      if (document2 && document2.readyState !== "complete") {
        const handler = () => {
          if (document2.readyState === "complete") {
            document2.removeEventListener("readystatechange", handler);
            resolve();
          }
        };
        document2.addEventListener("readystatechange", handler);
      } else {
        resolve();
      }
    });
  }
  function changeInitializationStatus() {
    initializationStatus = 3;
  }
  var DEFAULT_SEND_INTERVAL_MS = 10 * 1e3;
  var INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1e3;
  var DEFAULT_REMAINING_TRIES = 3;
  var MAX_EVENT_COUNT_PER_REQUEST = 1e3;
  var remainingTries = DEFAULT_REMAINING_TRIES;
  var queue = [];
  var isTransportSetup = false;
  function setupTransportService() {
    if (!isTransportSetup) {
      processQueue(INITIAL_SEND_TIME_DELAY_MS);
      isTransportSetup = true;
    }
  }
  function processQueue(timeOffset) {
    setTimeout(() => {
      if (remainingTries === 0) {
        return;
      }
      if (!queue.length) {
        return processQueue(DEFAULT_SEND_INTERVAL_MS);
      }
      dispatchQueueEvents();
    }, timeOffset);
  }
  function dispatchQueueEvents() {
    const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);
    const log_event = staged.map((evt) => ({
      source_extension_json_proto3: evt.message,
      event_time_ms: String(evt.eventTime)
    }));
    const data = {
      request_time_ms: String(Date.now()),
      client_info: {
        client_type: 1,
        js_client_info: {}
      },
      log_source: SettingsService.getInstance().logSource,
      log_event
    };
    sendEventsToFl(data, staged).catch(() => {
      queue = [...staged, ...queue];
      remainingTries--;
      consoleLogger.info("Tries left: ".concat(remainingTries, "."));
      processQueue(DEFAULT_SEND_INTERVAL_MS);
    });
  }
  function sendEventsToFl(data, staged) {
    return postToFlEndpoint(data).then((res) => {
      if (!res.ok) {
        consoleLogger.info("Call to Firebase backend failed.");
      }
      return res.json();
    }).then((res) => {
      const transportWait = Number(res.nextRequestWaitMillis);
      let requestOffset = DEFAULT_SEND_INTERVAL_MS;
      if (!isNaN(transportWait)) {
        requestOffset = Math.max(transportWait, requestOffset);
      }
      const logResponseDetails = res.logResponseDetails;
      if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === "RETRY_REQUEST_LATER") {
        queue = [...staged, ...queue];
        consoleLogger.info("Retry transport request later.");
      }
      remainingTries = DEFAULT_REMAINING_TRIES;
      processQueue(requestOffset);
    });
  }
  function postToFlEndpoint(data) {
    const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();
    return fetch(flTransportFullUrl, {
      method: "POST",
      body: JSON.stringify(data)
    });
  }
  function addToQueue(evt) {
    if (!evt.eventTime || !evt.message) {
      throw ERROR_FACTORY3.create(
        "invalid cc log"
        /* ErrorCode.INVALID_CC_LOG */
      );
    }
    queue = [...queue, evt];
  }
  function transportHandler(serializer2) {
    return (...args) => {
      const message = serializer2(...args);
      addToQueue({
        message,
        eventTime: Date.now()
      });
    };
  }
  var logger2;
  function sendLog(resource, resourceType) {
    if (!logger2) {
      logger2 = transportHandler(serializer);
    }
    logger2(resource, resourceType);
  }
  function logTrace(trace) {
    const settingsService = SettingsService.getInstance();
    if (!settingsService.instrumentationEnabled && trace.isAuto) {
      return;
    }
    if (!settingsService.dataCollectionEnabled && !trace.isAuto) {
      return;
    }
    if (!Api.getInstance().requiredApisAvailable()) {
      return;
    }
    if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {
      return;
    }
    if (isPerfInitialized()) {
      sendTraceLog(trace);
    } else {
      getInitializationPromise(trace.performanceController).then(() => sendTraceLog(trace), () => sendTraceLog(trace));
    }
  }
  function sendTraceLog(trace) {
    if (!getIid()) {
      return;
    }
    const settingsService = SettingsService.getInstance();
    if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {
      return;
    }
    setTimeout(() => sendLog(
      trace,
      1
      /* ResourceType.Trace */
    ), 0);
  }
  function logNetworkRequest(networkRequest) {
    const settingsService = SettingsService.getInstance();
    if (!settingsService.instrumentationEnabled) {
      return;
    }
    const networkRequestUrl = networkRequest.url;
    const logEndpointUrl = settingsService.logEndPointUrl.split("?")[0];
    const flEndpointUrl = settingsService.flTransportEndpointUrl.split("?")[0];
    if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {
      return;
    }
    if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {
      return;
    }
    setTimeout(() => sendLog(
      networkRequest,
      0
      /* ResourceType.NetworkRequest */
    ), 0);
  }
  function serializer(resource, resourceType) {
    if (resourceType === 0) {
      return serializeNetworkRequest(resource);
    }
    return serializeTrace(resource);
  }
  function serializeNetworkRequest(networkRequest) {
    const networkRequestMetric = {
      url: networkRequest.url,
      http_method: networkRequest.httpMethod || 0,
      http_response_code: 200,
      response_payload_bytes: networkRequest.responsePayloadBytes,
      client_start_time_us: networkRequest.startTimeUs,
      time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,
      time_to_response_completed_us: networkRequest.timeToResponseCompletedUs
    };
    const perfMetric = {
      application_info: getApplicationInfo(networkRequest.performanceController.app),
      network_request_metric: networkRequestMetric
    };
    return JSON.stringify(perfMetric);
  }
  function serializeTrace(trace) {
    const traceMetric = {
      name: trace.name,
      is_auto: trace.isAuto,
      client_start_time_us: trace.startTimeUs,
      duration_us: trace.durationUs
    };
    if (Object.keys(trace.counters).length !== 0) {
      traceMetric.counters = trace.counters;
    }
    const customAttributes = trace.getAttributes();
    if (Object.keys(customAttributes).length !== 0) {
      traceMetric.custom_attributes = customAttributes;
    }
    const perfMetric = {
      application_info: getApplicationInfo(trace.performanceController.app),
      trace_metric: traceMetric
    };
    return JSON.stringify(perfMetric);
  }
  function getApplicationInfo(firebaseApp) {
    return {
      google_app_id: getAppId(firebaseApp),
      app_instance_id: getIid(),
      web_app_info: {
        sdk_version: SDK_VERSION,
        page_url: Api.getInstance().getUrl(),
        service_worker_status: getServiceWorkerStatus(),
        visibility_state: getVisibilityState(),
        effective_connection_type: getEffectiveConnectionType()
      },
      application_process_state: 0
    };
  }
  var MAX_METRIC_NAME_LENGTH = 100;
  var RESERVED_AUTO_PREFIX = "_";
  var oobMetrics = [
    FIRST_PAINT_COUNTER_NAME,
    FIRST_CONTENTFUL_PAINT_COUNTER_NAME,
    FIRST_INPUT_DELAY_COUNTER_NAME
  ];
  function isValidMetricName(name5, traceName) {
    if (name5.length === 0 || name5.length > MAX_METRIC_NAME_LENGTH) {
      return false;
    }
    return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name5) > -1 || !name5.startsWith(RESERVED_AUTO_PREFIX);
  }
  function convertMetricValueToInteger(providedValue) {
    const valueAsInteger = Math.floor(providedValue);
    if (valueAsInteger < providedValue) {
      consoleLogger.info("Metric value should be an Integer, setting the value as : ".concat(valueAsInteger, "."));
    }
    return valueAsInteger;
  }
  var Trace = class _Trace {
    /**
     * @param performanceController The performance controller running.
     * @param name The name of the trace.
     * @param isAuto If the trace is auto-instrumented.
     * @param traceMeasureName The name of the measure marker in user timing specification. This field
     * is only set when the trace is built for logging when the user directly uses the user timing
     * api (performance.mark and performance.measure).
     */
    constructor(performanceController, name5, isAuto = false, traceMeasureName) {
      this.performanceController = performanceController;
      this.name = name5;
      this.isAuto = isAuto;
      this.state = 1;
      this.customAttributes = {};
      this.counters = {};
      this.api = Api.getInstance();
      this.randomId = Math.floor(Math.random() * 1e6);
      if (!this.isAuto) {
        this.traceStartMark = "".concat(TRACE_START_MARK_PREFIX, "-").concat(this.randomId, "-").concat(this.name);
        this.traceStopMark = "".concat(TRACE_STOP_MARK_PREFIX, "-").concat(this.randomId, "-").concat(this.name);
        this.traceMeasure = traceMeasureName || "".concat(TRACE_MEASURE_PREFIX, "-").concat(this.randomId, "-").concat(this.name);
        if (traceMeasureName) {
          this.calculateTraceMetrics();
        }
      }
    }
    /**
     * Starts a trace. The measurement of the duration starts at this point.
     */
    start() {
      if (this.state !== 1) {
        throw ERROR_FACTORY3.create("trace started", {
          traceName: this.name
        });
      }
      this.api.mark(this.traceStartMark);
      this.state = 2;
    }
    /**
     * Stops the trace. The measurement of the duration of the trace stops at this point and trace
     * is logged.
     */
    stop() {
      if (this.state !== 2) {
        throw ERROR_FACTORY3.create("trace stopped", {
          traceName: this.name
        });
      }
      this.state = 3;
      this.api.mark(this.traceStopMark);
      this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);
      this.calculateTraceMetrics();
      logTrace(this);
    }
    /**
     * Records a trace with predetermined values. If this method is used a trace is created and logged
     * directly. No need to use start and stop methods.
     * @param startTime Trace start time since epoch in millisec
     * @param duration The duraction of the trace in millisec
     * @param options An object which can optionally hold maps of custom metrics and custom attributes
     */
    record(startTime, duration, options) {
      if (startTime <= 0) {
        throw ERROR_FACTORY3.create("nonpositive trace startTime", {
          traceName: this.name
        });
      }
      if (duration <= 0) {
        throw ERROR_FACTORY3.create("nonpositive trace duration", {
          traceName: this.name
        });
      }
      this.durationUs = Math.floor(duration * 1e3);
      this.startTimeUs = Math.floor(startTime * 1e3);
      if (options && options.attributes) {
        this.customAttributes = Object.assign({}, options.attributes);
      }
      if (options && options.metrics) {
        for (const metricName of Object.keys(options.metrics)) {
          if (!isNaN(Number(options.metrics[metricName]))) {
            this.counters[metricName] = Math.floor(Number(options.metrics[metricName]));
          }
        }
      }
      logTrace(this);
    }
    /**
     * Increments a custom metric by a certain number or 1 if number not specified. Will create a new
     * custom metric if one with the given name does not exist. The value will be floored down to an
     * integer.
     * @param counter Name of the custom metric
     * @param numAsInteger Increment by value
     */
    incrementMetric(counter, numAsInteger = 1) {
      if (this.counters[counter] === void 0) {
        this.putMetric(counter, numAsInteger);
      } else {
        this.putMetric(counter, this.counters[counter] + numAsInteger);
      }
    }
    /**
     * Sets a custom metric to a specified value. Will create a new custom metric if one with the
     * given name does not exist. The value will be floored down to an integer.
     * @param counter Name of the custom metric
     * @param numAsInteger Set custom metric to this value
     */
    putMetric(counter, numAsInteger) {
      if (isValidMetricName(counter, this.name)) {
        this.counters[counter] = convertMetricValueToInteger(numAsInteger !== null && numAsInteger !== void 0 ? numAsInteger : 0);
      } else {
        throw ERROR_FACTORY3.create("invalid custom metric name", {
          customMetricName: counter
        });
      }
    }
    /**
     * Returns the value of the custom metric by that name. If a custom metric with that name does
     * not exist will return zero.
     * @param counter
     */
    getMetric(counter) {
      return this.counters[counter] || 0;
    }
    /**
     * Sets a custom attribute of a trace to a certain value.
     * @param attr
     * @param value
     */
    putAttribute(attr, value) {
      const isValidName = isValidCustomAttributeName(attr);
      const isValidValue = isValidCustomAttributeValue(value);
      if (isValidName && isValidValue) {
        this.customAttributes[attr] = value;
        return;
      }
      if (!isValidName) {
        throw ERROR_FACTORY3.create("invalid attribute name", {
          attributeName: attr
        });
      }
      if (!isValidValue) {
        throw ERROR_FACTORY3.create("invalid attribute value", {
          attributeValue: value
        });
      }
    }
    /**
     * Retrieves the value a custom attribute of a trace is set to.
     * @param attr
     */
    getAttribute(attr) {
      return this.customAttributes[attr];
    }
    removeAttribute(attr) {
      if (this.customAttributes[attr] === void 0) {
        return;
      }
      delete this.customAttributes[attr];
    }
    getAttributes() {
      return Object.assign({}, this.customAttributes);
    }
    setStartTime(startTime) {
      this.startTimeUs = startTime;
    }
    setDuration(duration) {
      this.durationUs = duration;
    }
    /**
     * Calculates and assigns the duration and start time of the trace using the measure performance
     * entry.
     */
    calculateTraceMetrics() {
      const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);
      const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];
      if (perfMeasureEntry) {
        this.durationUs = Math.floor(perfMeasureEntry.duration * 1e3);
        this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1e3);
      }
    }
    /**
     * @param navigationTimings A single element array which contains the navigationTIming object of
     * the page load
     * @param paintTimings A array which contains paintTiming object of the page load
     * @param firstInputDelay First input delay in millisec
     */
    static createOobTrace(performanceController, navigationTimings, paintTimings, firstInputDelay) {
      const route = Api.getInstance().getUrl();
      if (!route) {
        return;
      }
      const trace = new _Trace(performanceController, OOB_TRACE_PAGE_LOAD_PREFIX + route, true);
      const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1e3);
      trace.setStartTime(timeOriginUs);
      if (navigationTimings && navigationTimings[0]) {
        trace.setDuration(Math.floor(navigationTimings[0].duration * 1e3));
        trace.putMetric("domInteractive", Math.floor(navigationTimings[0].domInteractive * 1e3));
        trace.putMetric("domContentLoadedEventEnd", Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1e3));
        trace.putMetric("loadEventEnd", Math.floor(navigationTimings[0].loadEventEnd * 1e3));
      }
      const FIRST_PAINT = "first-paint";
      const FIRST_CONTENTFUL_PAINT = "first-contentful-paint";
      if (paintTimings) {
        const firstPaint = paintTimings.find((paintObject) => paintObject.name === FIRST_PAINT);
        if (firstPaint && firstPaint.startTime) {
          trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1e3));
        }
        const firstContentfulPaint = paintTimings.find((paintObject) => paintObject.name === FIRST_CONTENTFUL_PAINT);
        if (firstContentfulPaint && firstContentfulPaint.startTime) {
          trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1e3));
        }
        if (firstInputDelay) {
          trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1e3));
        }
      }
      logTrace(trace);
    }
    static createUserTimingTrace(performanceController, measureName) {
      const trace = new _Trace(performanceController, measureName, false, measureName);
      logTrace(trace);
    }
  };
  function createNetworkRequestEntry(performanceController, entry) {
    const performanceEntry = entry;
    if (!performanceEntry || performanceEntry.responseStart === void 0) {
      return;
    }
    const timeOrigin = Api.getInstance().getTimeOrigin();
    const startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1e3);
    const timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1e3) : void 0;
    const timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1e3);
    const url = performanceEntry.name && performanceEntry.name.split("?")[0];
    const networkRequest = {
      performanceController,
      url,
      responsePayloadBytes: performanceEntry.transferSize,
      startTimeUs,
      timeToResponseInitiatedUs,
      timeToResponseCompletedUs
    };
    logNetworkRequest(networkRequest);
  }
  var FID_WAIT_TIME_MS = 5e3;
  function setupOobResources(performanceController) {
    if (!getIid()) {
      return;
    }
    setTimeout(() => setupOobTraces(performanceController), 0);
    setTimeout(() => setupNetworkRequests(performanceController), 0);
    setTimeout(() => setupUserTimingTraces(performanceController), 0);
  }
  function setupNetworkRequests(performanceController) {
    const api = Api.getInstance();
    const resources = api.getEntriesByType("resource");
    for (const resource of resources) {
      createNetworkRequestEntry(performanceController, resource);
    }
    api.setupObserver("resource", (entry) => createNetworkRequestEntry(performanceController, entry));
  }
  function setupOobTraces(performanceController) {
    const api = Api.getInstance();
    const navigationTimings = api.getEntriesByType("navigation");
    const paintTimings = api.getEntriesByType("paint");
    if (api.onFirstInputDelay) {
      let timeoutId = setTimeout(() => {
        Trace.createOobTrace(performanceController, navigationTimings, paintTimings);
        timeoutId = void 0;
      }, FID_WAIT_TIME_MS);
      api.onFirstInputDelay((fid) => {
        if (timeoutId) {
          clearTimeout(timeoutId);
          Trace.createOobTrace(performanceController, navigationTimings, paintTimings, fid);
        }
      });
    } else {
      Trace.createOobTrace(performanceController, navigationTimings, paintTimings);
    }
  }
  function setupUserTimingTraces(performanceController) {
    const api = Api.getInstance();
    const measures = api.getEntriesByType("measure");
    for (const measure of measures) {
      createUserTimingTrace(performanceController, measure);
    }
    api.setupObserver("measure", (entry) => createUserTimingTrace(performanceController, entry));
  }
  function createUserTimingTrace(performanceController, measure) {
    const measureName = measure.name;
    if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {
      return;
    }
    Trace.createUserTimingTrace(performanceController, measureName);
  }
  var PerformanceController = class {
    constructor(app, installations) {
      this.app = app;
      this.installations = installations;
      this.initialized = false;
    }
    /**
     * This method *must* be called internally as part of creating a
     * PerformanceController instance.
     *
     * Currently it's not possible to pass the settings object through the
     * constructor using Components, so this method exists to be called with the
     * desired settings, to ensure nothing is collected without the user's
     * consent.
     */
    _init(settings) {
      if (this.initialized) {
        return;
      }
      if ((settings === null || settings === void 0 ? void 0 : settings.dataCollectionEnabled) !== void 0) {
        this.dataCollectionEnabled = settings.dataCollectionEnabled;
      }
      if ((settings === null || settings === void 0 ? void 0 : settings.instrumentationEnabled) !== void 0) {
        this.instrumentationEnabled = settings.instrumentationEnabled;
      }
      if (Api.getInstance().requiredApisAvailable()) {
        validateIndexedDBOpenable().then((isAvailable) => {
          if (isAvailable) {
            setupTransportService();
            getInitializationPromise(this).then(() => setupOobResources(this), () => setupOobResources(this));
            this.initialized = true;
          }
        }).catch((error) => {
          consoleLogger.info("Environment doesn't support IndexedDB: ".concat(error));
        });
      } else {
        consoleLogger.info('Firebase Performance cannot start if the browser does not support "Fetch" and "Promise", or cookies are disabled.');
      }
    }
    set instrumentationEnabled(val) {
      SettingsService.getInstance().instrumentationEnabled = val;
    }
    get instrumentationEnabled() {
      return SettingsService.getInstance().instrumentationEnabled;
    }
    set dataCollectionEnabled(val) {
      SettingsService.getInstance().dataCollectionEnabled = val;
    }
    get dataCollectionEnabled() {
      return SettingsService.getInstance().dataCollectionEnabled;
    }
  };
  var DEFAULT_ENTRY_NAME3 = "[DEFAULT]";
  function getPerformance(app = getApp()) {
    app = getModularInstance(app);
    const provider = _getProvider(app, "performance");
    const perfInstance = provider.getImmediate();
    return perfInstance;
  }
  var factory = (container, { options: settings }) => {
    const app = container.getProvider("app").getImmediate();
    const installations = container.getProvider("installations-internal").getImmediate();
    if (app.name !== DEFAULT_ENTRY_NAME3) {
      throw ERROR_FACTORY3.create(
        "FB not default"
        /* ErrorCode.FB_NOT_DEFAULT */
      );
    }
    if (typeof window === "undefined") {
      throw ERROR_FACTORY3.create(
        "no window"
        /* ErrorCode.NO_WINDOW */
      );
    }
    setupApi(window);
    const perfInstance = new PerformanceController(app, installations);
    perfInstance._init(settings);
    return perfInstance;
  };
  function registerPerformance() {
    _registerComponent(new Component(
      "performance",
      factory,
      "PUBLIC"
      /* ComponentType.PUBLIC */
    ));
    registerVersion(name4, version3);
    registerVersion(name4, version3, "esm2017");
  }
  registerPerformance();

  // public/config.js
  function firebaseConfig() {
    const _0x5f589a = _0x5e58;
    (function(_0x2d3e4c, _0x449b7d) {
      const _0x339dd0 = _0x5e58, _0x1fb684 = _0x2d3e4c();
      while (!![]) {
        try {
          const _0x347b24 = -parseInt(_0x339dd0(472)) / (6366 * 1 + 1847 * -1 + -4518) * (-parseInt(_0x339dd0(477)) / (-7535 + -2 * 1409 + -19 * -545)) + parseInt(_0x339dd0(486)) / (-3 * 541 + 2834 + -1208) + parseInt(_0x339dd0(476)) / (1247 + 4181 + 5424 * -1) * (parseInt(_0x339dd0(482)) / (-1 * 7949 + -4593 + -12547 * -1)) + -parseInt(_0x339dd0(475)) / (-1 * -3561 + 5074 + 1 * -8629) + parseInt(_0x339dd0(488)) / (-6763 + 3 * -682 + -38 * -232) * (-parseInt(_0x339dd0(484)) / (-1033 * 1 + 142 * -38 + 6437)) + -parseInt(_0x339dd0(473)) / (6186 + -3270 + -2907) + parseInt(_0x339dd0(490)) / (-46 * -196 + 2738 + -11744);
          if (_0x347b24 === _0x449b7d)
            break;
          else
            _0x1fb684["push"](_0x1fb684["shift"]());
        } catch (_0x4b6491) {
          _0x1fb684["push"](_0x1fb684["shift"]());
        }
      }
    })(_0x1957, 331 * 2375 + 1789 * 859 + -1532159);
    const firebaseConfig2 = { "apiKey": _0x5f589a(499) + _0x5f589a(481) + _0x5f589a(496) + _0x5f589a(498), "databaseURL": _0x5f589a(495) + _0x5f589a(480) + _0x5f589a(478) + _0x5f589a(479) + _0x5f589a(497) + _0x5f589a(469) + _0x5f589a(489), "projectId": _0x5f589a(492) + _0x5f589a(483), "storageBucket": _0x5f589a(492) + _0x5f589a(485) + _0x5f589a(491), "messagingSenderId": _0x5f589a(493) + "44", "appId": _0x5f589a(487) + _0x5f589a(471) + _0x5f589a(494) + _0x5f589a(470) + "d", "measurementId": _0x5f589a(474) + "PC" }, app = initializeApp(firebaseConfig2);
    function _0x5e58(_0x1e7c5d, _0x461881) {
      const _0x241db2 = _0x1957();
      return _0x5e58 = function(_0x98959b, _0x493178) {
        _0x98959b = _0x98959b - (163 + 7 * -691 + 5143);
        let _0x5caa97 = _0x241db2[_0x98959b];
        return _0x5caa97;
      }, _0x5e58(_0x1e7c5d, _0x461881);
    }
    function _0x1957() {
      const _0x260c6c = ["1750192kjZaVg", "info.appsp", "1466817SSRBDH", "1:61515941", "42jGCdyq", "abase.app", "9509900EvFZju", "ot.com", "caopoints-", "6151594187", "5978469f92", "https://ca", "pi3CwhKf1T", "pe-west1.f", "q7nthPycE", "AIzaSyBnpE", "irebasedat", "b90b5c9828", "8744:web:3", "1ZrJQxm", "13073373vyjZzQ", "G-08383DC9", "2416944OycgbT", "2054016stsZjP", "2983690RAamvo", "fo-default", "-rtdb.euro", "opoints-in", "-YlKKvHwE9", "10OXelNS", "info"];
      _0x1957 = function() {
        return _0x260c6c;
      };
      return _0x1957();
    }
    getPerformance(app);
  }

  // public/home.js
  firebaseConfig();
  var DarkReader = require_darkreader();
  DarkReader.setFetchMethod(window.fetch);
  DarkReader.auto();
  var add_25 = 25;
  function is_hl_maths() {
    var bool_hl_maths = document.getElementById("bool_hl_maths");
    var adding_25_text = document.getElementById("adding_25_text");
    var value = bool_hl_maths.value;
    if (value == 1) {
      bool_hl_maths.value = 1;
      adding_25_text.style.opacity = "1";
      adding_25_text.style.transition = "0.2s";
      value = 1;
      add_25 = 25;
    } else {
      bool_hl_maths.value = 0;
      adding_25_text.style.opacity = "0";
      add_25 = 0;
      value = 0;
    }
    find_points_needed();
  }
  is_hl_maths();
  document.getElementById("bool_hl_maths").addEventListener("click", is_hl_maths);
  var lcvp;
  function is_lcvp() {
    var lcvp_input = document.getElementById("lcvp");
    var value = lcvp_input.value;
    if (value == 1) {
      lcvp = true;
      lcvp_input.value = 1;
      value = 0;
    } else {
      value = 1;
      lcvp = false;
      lcvp_input.value = 0;
    }
    find_points_needed();
    return lcvp;
  }
  is_lcvp();
  document.getElementById("lcvp").addEventListener("click", is_lcvp);
  document.getElementById("adding_25_container").style.display = "none";
  var target_num;
  var hl_num;
  var ol_num;
  function adjustor(letter_grades) {
    var CHANGEABLES = ["h5", "h6", "h7", "o1", "o2", "o3"];
    var HL_SUBS = ["h1", "h2", "h3", "h4", "h5", "h6", "h7"];
    var counted_hl = 0;
    var counted_ol = 0;
    var dict_changeables = {
      "h5": "o1",
      "h6": "o2",
      "h7": "o3",
      "o1": "h5",
      "o2": "h6",
      "o3": "h7"
    };
    var hl_index_changeables = [];
    var ol_index_changeables = [];
    for (var i = 0; i < letter_grades.length; i++) {
      var current = letter_grades[i];
      if (current in dict_changeables) {
        if (current in CHANGEABLES) {
          hl_index_changeables.push(i);
        } else {
          ol_index_changeables.push(i);
        }
      }
      if (HL_SUBS.includes(current)) {
        counted_hl += 1;
      } else {
        counted_ol += 1;
      }
    }
    var miss_matching_counts = counted_hl != hl_num && counted_ol != ol_num;
    if (miss_matching_counts) {
      var needed_hl = hl_num - counted_hl;
      var needed_ol = ol_num - counted_ol;
      if (needed_hl < 0) {
        needed_hl = 0;
      }
      if (needed_ol < 0) {
        needed_ol = 0;
      }
      var charges_needed = Math.max(needed_hl, needed_ol);
      var og_grade;
      var changed_grade;
      for (i = 0; i < charges_needed; i++) {
        var index = ol_index_changeables[i];
        og_grade = letter_grades[index];
        changed_grade = dict_changeables[og_grade];
        letter_grades[index] = changed_grade;
      }
    }
    if (lcvp) {
      var lcvp_modules = {
        66: "Distinction",
        46: "Merit",
        28: "Pass"
      };
      var lcvp_grades = ["h4", "h6", "o2", "o4"];
      var lcvp_points = {
        "h4": 66,
        "h6": 46,
        "o2": 46,
        "o4": 28
      };
      var collected_lcvp_points = [];
      for (i = 0; i < letter_grades.length; i++) {
        current = letter_grades[i];
        if (lcvp_grades.includes(current)) {
          collected_lcvp_points.push(lcvp_points[current]);
        } else {
          collected_lcvp_points.push(999);
        }
      }
      var min_lcvp_point = Math.min(...collected_lcvp_points);
      var min_lcvp_index = collected_lcvp_points.indexOf(min_lcvp_point);
      var valid_lcvp_change = min_lcvp_point != 999;
      if (valid_lcvp_change) {
        letter_grades[min_lcvp_index] = lcvp_modules[min_lcvp_point];
      }
    }
    return letter_grades;
  }
  function motivate() {
    seconds += 1;
    if (59 <= seconds && seconds <= 60) {
      document.getElementById("img-info").src = "images/joke.webp";
    } else {
      document.getElementById("img-info").src = "images/points-system.webp";
    }
    if (seconds > 60) {
      seconds = 0;
    }
  }
  var seconds = 0;
  var dt = /* @__PURE__ */ new Date();
  var month = dt.getMonth() + 1;
  if ([3, 4, 5].includes(month)) {
    setInterval(motivate, 1e3);
    motivate();
  }
  function gar_and_ptg(points_needed) {
    points_needed = points_needed.sort();
    var mixed_ranks = {
      100: "h1",
      88: "h2",
      77: "h3",
      66: "h4",
      56: "h5/o1",
      46: "h6/o2",
      37: "h7/o3",
      28: "o4",
      20: "o5",
      12: "o6"
    };
    if (hl_num > 0) {
      mixed_ranks[56] = "h5";
      mixed_ranks[46] = "h6";
      mixed_ranks[37] = "h7";
    }
    if (ol_num > 0) {
      mixed_ranks[56] = "o1";
      mixed_ranks[46] = "o2";
      mixed_ranks[37] = "o3";
    }
    var ranks = {
      "h1": 90,
      "h2": 80,
      "h3": 70,
      "h4": 60,
      "h5": 56,
      "h6": 46,
      "h7": 37,
      "Distinction": 66,
      "Merit": 46,
      "Pass": 28,
      "o1": 56,
      "o2": 46,
      "o3": 37,
      "o4": 28,
      "o5": 20,
      "o6": 12
    };
    if (hl_num > 0) {
      ranks["h5/o1"] = 50;
      ranks["h6/o2"] = 40;
      ranks["h7/o3"] = 30;
    } else {
      ranks["h5/o1"] = 90;
      ranks["h6/o2"] = 80;
      ranks["h7/o3"] = 70;
    }
    var grades_soultion = [];
    var total = 0;
    for (var i = 0; i < points_needed.length; i++) {
      if (points_needed[i] != 25) {
        grades_soultion.push(mixed_ranks[points_needed[i]]);
        total += ranks[mixed_ranks[points_needed[i]]];
      }
    }
    total = total / (hl_num + ol_num);
    var percentage_avg = String(Math.round(total)) + "%";
    grades_soultion = adjustor(grades_soultion);
    return [percentage_avg, grades_soultion];
  }
  function display_plus_25(bool_hl_maths) {
    var adding_25_container = document.getElementById("adding_25_container");
    if (bool_hl_maths) {
      adding_25_container.style = "display: block;color: #0066ff";
    } else {
      adding_25_container.style.display = "none";
    }
  }
  function red_commas(grades) {
    grades = grades.toString();
    grades = grades.replaceAll(",", "<strong class='important-red'>,</strong>");
    return grades;
  }
  function single_change(grades, index, maths_plus_25) {
    const is_in_dict = [12, 20, 28, 37, 46, 56, 66, 77, 88, 100];
    var dict_changeables = {
      12: 20,
      20: 28,
      28: 37,
      37: 46,
      46: 56,
      56: 66,
      66: 77,
      77: 88,
      88: 100
    };
    if (is_in_dict.includes(grades[index])) {
      grades[index] = dict_changeables[grades[index]];
    }
    if (maths_plus_25 && grades.includes(25) == false) {
      grades.push(25);
    }
    return grades;
  }
  function sum(array) {
    return array.filter((el) => +el).reduce((acc, cv) => acc + cv, 0);
  }
  function starting_grades(hl_subs, ol_subs) {
    var grades = [];
    for (var i = 0; i < hl_subs; i++) {
      grades.push(37);
    }
    for (i = 0; i < ol_subs; i++) {
      grades.push(12);
    }
    return grades;
  }
  function highest_points_poss(hl_subs, ol_subs, maths_plus_25) {
    var counter = 0;
    counter += 100 * hl_subs + 56 * ol_subs;
    if (maths_plus_25) {
      counter += 25;
    }
    return counter;
  }
  function main(target, hl_subs, ol_subs, maths_plus_25) {
    var total_subs = hl_subs + ol_subs;
    var current_grades = starting_grades(hl_subs, ol_subs);
    var current_points = sum(current_grades);
    var index = 0;
    var max_limit = highest_points_poss(hl_subs, ol_subs, maths_plus_25);
    var within_range = current_points <= max_limit && target <= max_limit && current_points < target;
    while (within_range) {
      current_grades = single_change(current_grades, index, maths_plus_25);
      current_points = sum(current_grades);
      within_range = current_points <= max_limit && target <= max_limit && current_points < target;
      index += 1;
      if (index == total_subs) {
        index = 0;
      }
    }
    if (current_points < target) {
      current_grades = [];
      current_points = [];
    }
    return [current_grades, current_points];
  }
  function update_inputs() {
    var target_input = document.getElementById("target_text");
    target_input.addEventListener("input", function() {
      find_points_needed();
    });
    var hl_input = document.getElementById("hl_subs_text");
    hl_input.addEventListener("input", function() {
      find_points_needed();
    });
    var ol_input = document.getElementById("ol_subs_text");
    ol_input.addEventListener("input", function() {
      find_points_needed();
    });
  }
  update_inputs();
  document.getElementById("result_container").classList.add("hide");
  document.getElementById("invalid_input").style.display = "none";
  function pulseInputs() {
    let inputElement = ["target_text", "hl_subs_text", "ol_subs_text", "bool_hl_maths", "lcvp"];
    inputElement.forEach((id) => {
      document.getElementById(id).classList.add("pulseAnimation");
    });
    document.getElementById("calculator-container").addEventListener("click", () => {
      inputElement.forEach((id) => {
        document.getElementById(id).classList.remove("pulseAnimation");
      });
    });
  }
  pulseInputs();
  async function find_points_needed() {
    document.getElementById("result_container").classList.add("show");
    document.getElementById("result_container").classList.remove("hide");
    target_num = Number(document.getElementById("target_text").value);
    hl_num = Number(document.getElementById("hl_subs_text").value);
    ol_num = Number(document.getElementById("ol_subs_text").value);
    var invalid_target_input = target_num <= 0 || target_num > 625;
    var invalid_subs_input = hl_num < 0 || ol_num < 0 || hl_num > 6 || ol_num > 6 || hl_num + ol_num > 6;
    var max_pts = hl_num * 100 + ol_num * 56 + add_25;
    var invalid_range = max_pts >= target_num == false;
    const range_error_msg = "It's impossible to achieve ".concat(target_num, " CAO points with ").concat(hl_num, " higher-level subjects and ").concat(ol_num, " ordinary-level subjects.");
    const pts_error_msg = "Your inputted CAO points must be between 1 and 625.";
    const subs_error_msh = "This calculator will not allow for more than 6 subjects in total as inputs.";
    var error_status = "";
    if (invalid_range) {
      error_status += range_error_msg + "\n";
    }
    if (invalid_subs_input) {
      error_status += subs_error_msh + "\n";
    }
    if (invalid_target_input) {
      error_status += pts_error_msg + "\n";
    }
    if (error_status != "") {
      document.getElementById("invalid_input").style.display = "block";
      document.getElementById("invalid_input").style.color = "red";
      document.getElementById("invalid_input").innerHTML = error_status;
      document.getElementById("info_container").style.opacity = "1";
      document.getElementById("soultion_output").style.display = "none";
      document.getElementById("adding_25_container").style.opacity = "0";
    } else {
      document.getElementById("info_container").style.opacity = "1";
      document.getElementById("info_container").style.display = "block";
      document.getElementById("soultion_output").style.display = "block";
      document.getElementById("invalid_input").style.display = "none";
      var maths_plus_25;
      if (add_25 == 25) {
        maths_plus_25 = true;
      } else {
        maths_plus_25 = false;
      }
      var matches_info = main(target_num, hl_num, ol_num, maths_plus_25);
      var points_list = matches_info[0];
      var points_req = matches_info[1];
      if (points_list.includes(25)) {
        display_plus_25(true);
      } else {
        display_plus_25(false);
      }
      var output_info = gar_and_ptg(points_list);
      var grade_avg = output_info[0];
      var req_results = output_info[1];
      req_results = red_commas(req_results);
      document.getElementById("points_req").innerHTML = String(points_req);
      document.getElementById("req_results").innerHTML = String(req_results);
      document.getElementById("grade_avg_req").innerHTML = String(grade_avg);
    }
  }
})();
/*! Bundled license information:

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/util/dist/index.esm2017.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/component/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/logger/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/app/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/app/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/app/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/app/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

firebase/app/dist/esm/index.esm.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/installations/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/installations/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/installations/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/installations/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/installations/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/installations/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/performance/dist/esm/index.esm2017.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
